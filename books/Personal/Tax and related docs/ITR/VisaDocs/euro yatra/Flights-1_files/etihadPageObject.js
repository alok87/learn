/// File generated by the merge tool. [10/03/2015 10:05:12 (UTC) Dublin, Edinburgh, Lisbon, London  ]
/// imported /// import YUI_3.1.2_Modules/attribute-min.js
/*
Copyright (c) 2010, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 3.1.2
build: 56
*/
YUI.add("attribute-base",function(C){C.State=function(){this.data={};};C.State.prototype={add:function(O,Y,f){var e=this.data;e[Y]=e[Y]||{};e[Y][O]=f;},addAll:function(O,d){var Y;for(Y in d){if(d.hasOwnProperty(Y)){this.add(O,Y,d[Y]);}}},remove:function(O,Y){var e=this.data;if(e[Y]&&(O in e[Y])){delete e[Y][O];}},removeAll:function(O,e){var Y=this.data;C.each(e||Y,function(f,d){if(C.Lang.isString(d)){this.remove(O,d);}else{this.remove(O,f);}},this);},get:function(O,Y){var e=this.data;return(e[Y]&&O in e[Y])?e[Y][O]:undefined;},getAll:function(O){var e=this.data,Y;C.each(e,function(f,d){if(O in e[d]){Y=Y||{};Y[d]=f[O];}},this);return Y;}};var K=C.Object,F=C.Lang,L=C.EventTarget,X=".",U="Change",N="getter",M="setter",P="readOnly",Z="writeOnce",V="initOnly",c="validator",H="value",Q="valueFn",E="broadcast",S="lazyAdd",J="_bypassProxy",b="added",B="initializing",I="initValue",W="published",T="defaultValue",A="lazy",R="isLazyAdd",G,a={};a[P]=1;a[Z]=1;a[N]=1;a[E]=1;function D(){var d=this,O=this.constructor.ATTRS,Y=C.Base;d._ATTR_E_FACADE={};L.call(d,{emitFacade:true});d._conf=d._state=new C.State();d._stateProxy=d._stateProxy||null;d._requireAddAttr=d._requireAddAttr||false;if(O&&!(Y&&d instanceof Y)){d.addAttrs(this._protectAttrs(O));}}D.INVALID_VALUE={};G=D.INVALID_VALUE;D._ATTR_CFG=[M,N,c,H,Q,Z,P,S,E,J];D.prototype={addAttr:function(Y,O,e){var f=this,h=f._state,g,d;e=(S in O)?O[S]:e;if(e&&!f.attrAdded(Y)){h.add(Y,A,O||{});h.add(Y,b,true);}else{if(!f.attrAdded(Y)||h.get(Y,R)){O=O||{};d=(H in O);if(d){g=O.value;delete O.value;}O.added=true;O.initializing=true;h.addAll(Y,O);if(d){f.set(Y,g);}h.remove(Y,B);}}return f;},attrAdded:function(O){return !!this._state.get(O,b);},modifyAttr:function(Y,O){var d=this,f,e;if(d.attrAdded(Y)){if(d._isLazyAttr(Y)){d._addLazyAttr(Y);}e=d._state;for(f in O){if(a[f]&&O.hasOwnProperty(f)){e.add(Y,f,O[f]);if(f===E){e.remove(Y,W);}}}}},removeAttr:function(O){this._state.removeAll(O);},get:function(O){return this._getAttr(O);},_isLazyAttr:function(O){return this._state.get(O,A);},_addLazyAttr:function(Y){var d=this._state,O=d.get(Y,A);d.add(Y,R,true);d.remove(Y,A);this.addAttr(Y,O);},set:function(O,d,Y){return this._setAttr(O,d,Y);},reset:function(O){var d=this,Y;if(O){if(d._isLazyAttr(O)){d._addLazyAttr(O);}d.set(O,d._state.get(O,I));}else{Y=d._state.data.added;C.each(Y,function(e,f){d.reset(f);},d);}return d;},_set:function(O,d,Y){return this._setAttr(O,d,Y,true);},_getAttr:function(d){var e=this,i=d,f=e._state,g,O,h,Y;if(d.indexOf(X)!==-1){g=d.split(X);d=g.shift();}if(e._tCfgs&&e._tCfgs[d]){Y={};Y[d]=e._tCfgs[d];delete e._tCfgs[d];e._addAttrs(Y,e._tVals);}if(e._isLazyAttr(d)){e._addLazyAttr(d);}h=e._getStateVal(d);O=f.get(d,N);if(O&&!O.call){O=this[O];}h=(O)?O.call(e,h,i):h;h=(g)?K.getValue(h,g):h;return h;},_setAttr:function(d,g,O,e){var k=true,Y=this._state,h=this._stateProxy,m=Y.data,j,n,o,f,i,l;if(d.indexOf(X)!==-1){n=d;o=d.split(X);d=o.shift();}if(this._isLazyAttr(d)){this._addLazyAttr(d);}j=(!m.value||!(d in m.value));if(h&&d in h&&!this._state.get(d,J)){j=false;}if(this._requireAddAttr&&!this.attrAdded(d)){}else{i=Y.get(d,Z);l=Y.get(d,B);if(!j&&!e){if(i){k=false;}if(Y.get(d,P)){k=false;}}if(!l&&!e&&i===V){k=false;}if(k){if(!j){f=this.get(d);}if(o){g=K.setValue(C.clone(f),o,g);if(g===undefined){k=false;}}if(k){if(l){this._setAttrVal(d,n,f,g);}else{this._fireAttrChange(d,n,f,g,O);}}}}return this;},_fireAttrChange:function(h,g,e,d,O){var j=this,f=h+U,Y=j._state,i;if(!Y.get(h,W)){j.publish(f,{queuable:false,defaultTargetOnly:true,defaultFn:j._defAttrChangeFn,silent:true,broadcast:Y.get(h,E)});Y.add(h,W,true);}i=(O)?C.merge(O):j._ATTR_E_FACADE;i.type=f;i.attrName=h;i.subAttrName=g;i.prevVal=e;i.newVal=d;j.fire(i);},_defAttrChangeFn:function(O){if(!this._setAttrVal(O.attrName,O.subAttrName,O.prevVal,O.newVal)){O.stopImmediatePropagation();}else{O.newVal=this.get(O.attrName);}},_getStateVal:function(O){var Y=this._stateProxy;return Y&&(O in Y)&&!this._state.get(O,J)?Y[O]:this._state.get(O,H);},_setStateVal:function(O,d){var Y=this._stateProxy;if(Y&&(O in Y)&&!this._state.get(O,J)){Y[O]=d;}else{this._state.add(O,H,d);}},_setAttrVal:function(m,l,i,g){var o=this,j=true,d=o._state,e=d.get(m,c),h=d.get(m,M),k=d.get(m,B),n=this._getStateVal(m),Y=l||m,f,O;if(e){if(!e.call){e=this[e];}if(e){O=e.call(o,g,Y);if(!O&&k){g=d.get(m,T);O=true;}}}if(!e||O){if(h){if(!h.call){h=this[h];}if(h){f=h.call(o,g,Y);if(f===G){j=false;}else{if(f!==undefined){g=f;}}}}if(j){if(!l&&(g===n)&&!F.isObject(g)){j=false;}else{if(d.get(m,I)===undefined){d.add(m,I,g);}o._setStateVal(m,g);}}}else{j=false;}return j;},setAttrs:function(O,Y){return this._setAttrs(O,Y);},_setAttrs:function(Y,d){for(var O in Y){if(Y.hasOwnProperty(O)){this.set(O,Y[O]);}}return this;},getAttrs:function(O){return this._getAttrs(O);},_getAttrs:function(e){var g=this,j={},f,Y,O,h,d=(e===true);e=(e&&!d)?e:K.keys(g._state.data.added);for(f=0,Y=e.length;f<Y;f++){O=e[f];h=g.get(O);if(!d||g._getStateVal(O)!=g._state.get(O,I)){j[O]=g.get(O);}}return j;},addAttrs:function(O,Y,d){var e=this;if(O){e._tCfgs=O;e._tVals=e._normAttrVals(Y);e._addAttrs(O,e._tVals,d);e._tCfgs=e._tVals=null;}return e;},_addAttrs:function(Y,d,e){var g=this,O,f,h;for(O in Y){if(Y.hasOwnProperty(O)){f=Y[O];f.defaultValue=f.value;h=g._getAttrInitVal(O,f,g._tVals);if(h!==undefined){f.value=h;}if(g._tCfgs[O]){delete g._tCfgs[O];}g.addAttr(O,f,e);}}},_protectAttrs:function(Y){if(Y){Y=C.merge(Y);for(var O in Y){if(Y.hasOwnProperty(O)){Y[O]=C.merge(Y[O]);}}}return Y;},_normAttrVals:function(O){return(O)?C.merge(O):null;},_getAttrInitVal:function(O,Y,e){var f,d;if(!Y[P]&&e&&e.hasOwnProperty(O)){f=e[O];}else{f=Y[H];d=Y[Q];if(d){if(!d.call){d=this[d];}if(d){f=d.call(this);}}}return f;}};C.mix(D,L,false,null,1);C.Attribute=D;},"3.1.2",{requires:["event-custom"]});YUI.add("attribute-complex",function(B){var A=B.Object,C=".";B.Attribute.Complex=function(){};B.Attribute.Complex.prototype={_normAttrVals:function(G){var I={},H={},J,D,F,E;if(G){for(E in G){if(G.hasOwnProperty(E)){if(E.indexOf(C)!==-1){J=E.split(C);
D=J.shift();F=H[D]=H[D]||[];F[F.length]={path:J,value:G[E]};}else{I[E]=G[E];}}}return{simple:I,complex:H};}else{return null;}},_getAttrInitVal:function(K,I,N){var E=I.value,M=I.valueFn,D,F,H,G,O,L,J;if(M){if(!M.call){M=this[M];}if(M){E=M.call(this);}}if(!I.readOnly&&N){D=N.simple;if(D&&D.hasOwnProperty(K)){E=D[K];}F=N.complex;if(F&&F.hasOwnProperty(K)){J=F[K];for(H=0,G=J.length;H<G;++H){O=J[H].path;L=J[H].value;A.setValue(E,O,L);}}}return E;}};B.mix(B.Attribute,B.Attribute.Complex,true,null,1);},"3.1.2",{requires:["attribute-base"]});YUI.add("attribute",function(A){},"3.1.2",{use:["attribute-base","attribute-complex"]});

/// imported /// import Common.js
function GetType() {
    var ibe = WhiteLabel.getIbeData();
    var type = "flow=booking";

    if (ibe == null) {
        type = "flow=mmb";
    }
    if (ibe.redemption == true) {
        type = "flow=redemption";
    } else {
        type = "flow=booking";
    }
    if (ibe.journeySpan == "MULTI_CITY") {
        type += "&multicity=1";
    }
    return type;
};

// Converts a 1 digit number into a two digit number
function OneDigitNumberConverter(stringNumber) {
    var number = stringNumber;

    if (stringNumber.toString().length === 1) {
        number = '0' + stringNumber;
    }

    return number;
}

// Parses a Sabre date into a date object
function ParseDateString(dateString) {
    var date = null;
    if (typeof (dateString) != 'undefined' && dateString != null) {
        var dateArray = dateString.split('/');
        try {
            if (typeof (dateArray) != 'undefined' && dateArray.length > 0) {
                // Set the time to be 00:00
                date = new Date(dateArray[0], (parseInt(dateArray[1], 10) - 1).toString(), dateArray[2].split(' ')[0], 0, 0, 0);
            }
        } catch (er) {
            errorMessagesString = '';
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.params.add("AdditionalMsg", errorMessagesString);
                exLogger.log(er, exLogger.ErrorLevel.Error);
            }
            
        }
        return date;
    }
}

// Formats a date string into the specific format
// Input: A string date
// Output: A string date
function FormatDateTime(dateString) {
    var date = ParseDateString(dateString),
        formattedDate = null,
        day = '',
        month = '';

    if (date !== null && date !== 'undefined') {
        if (date.getDate().toString().length === 1) {
            day = '0' + date.getDate().toString();
        } else {
            day = date.getDate().toString();
        }

        if ((date.getMonth() + 1).toString().length === 1) {
            month = '0' + (date.getMonth() + 1).toString();
        } else {
            month = (date.getMonth() + 1).toString();
        }

        formattedDate = day + '/' + month + '/' + date.getFullYear();
    }

    return formattedDate;
}

// Returns the difference between two dates in days
function getDateDifferenceInDays(date1, date2, ignoreTime) {
    // Set 1 day in milliseconds
    var one_day = 1000 * 60 * 60 * 24

    if (ignoreTime) {
        date1.setHours(0, 0, 0, 0);
        date2.setHours(0, 0, 0, 0);
    }
    return (date2 - date1) / one_day;
}


// Cookie object which creates and gets values from a cookie
function Cookie() {
    // Setting the expiry date to a dateTime object
    this.defaultExpiryDate = new Date();
    // Add 1 year to the datetime
    this.defaultExpiryDate.setTime(this.defaultExpiryDate.getTime() + 31536000000); //1 year
    // Assign the default expiry date
    this.expiryDate = this.defaultExpiryDate;
}

// Function allows you to set a cookie.  It will either use the default expiry date of a
// year or the date provided in the to the function
Cookie.prototype.SetCookie = function (key, value, optionalExpiryDate) {
    if (arguments.length == 3) {
        this.expiryDate = optionalExpiryDate
    }
    document.cookie = key + '=' + value + ';expires=' + this.expiryDate.toUTCString();
}

// Function gets a cookie from the key supplied
Cookie.prototype.GetCookie = function (key) {
    var keyValue = document.cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
    return keyValue ? keyValue[2] : null;
}


// Function works similar to the String.Format method in .net.  Pass in the expression or string and an array
// of properties.  If the expression contains { followed by a number e.g. 0 } then it will replace this with the
// corresponding item in the properties array.
function StringFormat(expression, properties) {
    for (var i = 0; i < properties.length; i++) {
        expression = expression.replace("{" + (i) + "}", properties[i]);
    }
    return expression;
}

function EtihadCookie() { }

EtihadCookie.prototype.AddValue = function (key, value) {
    YUI({
        base: '/SSW2010/javascripts/yui/3.3.0/build/'
    }).use('node', 'cookie', function (Y) {
        Y.Cookie.setSub('SSWEtihad', key, value, { secure: true });
    });
}

EtihadCookie.prototype.RetrieveValue = function (key) {
    var cookieValue = null;

    YUI({
        base: '/SSW2010/javascripts/yui/3.3.0/build/'
    }).use('node', 'cookie', function (Y) {

        cookieValue = Y.Cookie.getSub('SSWEtihad', key);
    });

    return cookieValue;
};

function Resources(textKey, yahooInstance) {
    var result;
    var lang = sabre.config.global.language;

    var getResource = function (textKey, Y) {
        var translation;
        // Try and get the resource, if it's not available then default to english

        if (Y.translations === undefined || Y.translations === null) {
            Y.translations = Y.translations || { lang: lang };
        }

        try {
            Y.use('wl-lang-' + Y.translations.lang, function (A) {
                translation = A.translations[sabre.config.global.language][textKey];
            });

            if (translation === undefined) {
                // try getting it from extra resources
                if (extraResources.hasOwnProperty(textKey) && (extraResources[textKey].hasOwnProperty(lang))) {
                    translation = extraResources[textKey][lang];
                }
            }
        } catch (er) {
            errorMessagesString = '';
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.params.add("AdditionalMsg", errorMessagesString);
                exLogger.log(er, exLogger.ErrorLevel.Error);
            }
        }

        return translation;
    };

    var getResourceWithParams = function (textKey, Y) {
        var splitted = textKey.split('|');

        var key = splitted[0];

        var resultWithParams = getResource(key, Y);

        for (var i = 1; i < splitted.length; i++) {
            resultWithParams = resultWithParams.replace("{}", splitted[i]);
        }

        return resultWithParams;
    };

    if (arguments.length === 2) {
        result = getResourceWithParams(textKey, yahooInstance);
    }
    else if (typeof Y !== 'undefined') {
        result = getResourceWithParams(textKey, Y);
    }
    else {
        YUI().use('node', function (Y) {
            result = getResourceWithParams(textKey, Y);
        });
    }

    return result;
}

var extraResources = {
    'custom.js.all.content.usdotmessage': {
        'ko_KR': '예정 출발 시간 7일 이전에 예약하신 경우 예약 후 24시간 내에 예약을 취소하면 전액 환불을 받으실 수 있습니다. 환불 처리를 위해서는 저희 콜센터에 연락하시기 바랍니다.',
        'ja_JP': 'ご出発の 7 日前までにご予約いただいた予約便の取り消しは、24 時間以内に全額払い戻しいたします。払い戻しのお手続きについては、エティハドの コールセンター にお問い合わせください。',
        'pt_BR': 'Você pode cancelar sua reserva, com reembolso total do valor em 24 horas, se a reserva foi feita 7 dias ou mais antes da partida.  Para solicitar o reembolso, por favor contate nossa central de atendimento.',
        'ru_RU': 'Если вы бронировали билет за 7 или более дней до запланированной даты вылета, то вы можете аннулировать бронь в течение 24 часов, получив полный возврат стоимости заказа на бронирование. Для того чтобы оформить возврат стоимости билета, свяжитесь с нашим центром обработки заказов.',
        'zh_CN': '如您在距出发日期7日或超过7日前进行预订，则可在24小时内取消预约并获得全额退款。需要退款请联系我们的 呼叫中心。',
        'ar_AE': 'يمكنكم إلغاء حجزكم مع الحصول على المبلغ المدفوع بالكامل خلال 24 ساعة قبل موعد المغادرة، في حال قمتم بحجز تذاكركم قبل 7 أيام من موعد الرحلة المقرر، يرجى الاتصال بمركز الخدمة الهاتفية التابع للاتحاد للطيران.',
        'fr_FR': 'Vous pouvez annuler votre réservation et obtenir un remboursement intégral sous 24 heures si vous aviez effectué votre réservation au moins 7 jours avant la date de départ prévue. Pour obtenir un remboursement, veuillez contacter notre  centre d\'appel.',
        'it_IT': 'Puoi annullare la tua prenotazione e richiedere il rimborso completo entro 24 ore se hai effettuato la prenotazione 7 giorni o più prima della partenza. Per richiedere il rimborso, ti invitiamo a contattare il nostro call center.',
        'el_GR': 'Μπορείτε να ακυρώσετε την κράτησή σας, με πλήρη επιστροφή χρημάτων, εντός 24 ωρών, εφόσον η κράτησή σας έχει πραγματοποιηθεί τουλάχιστον 7 ημέρες πριν από την προγραμματισμένη ημερομηνία αναχώρησης της πτήσης. Για να ξεκινήσει η διαδικασία επιστροφής των χρημάτων, σας παρακαλούμε να επικοινωνήσετε με το τηλεφωνικό κέντρο μας.',
        'en_GB': 'You can cancel your reservation for a full refund within 24 hours if you booked 7 days or more prior to scheduled departure. To process a refund, please contact our call centre.',
        'de_DE': 'Sie können Ihre Reservierung mit voller Rückerstattung innerhalb von 24 Stunden stornieren, wenn Sie 7 Tage vor dem planmäßigen Abflug oder noch früher gebucht haben. Um eine Rückerstattung einzuleiten, kontaktieren Sie bitte unser Callcenter.',
        'es_ES': 'Podrá cancelar su reserva y obtener un reembolso íntegro en un plazo de 24 horas siempre que haya realizado la reserva al menos 7 días antes de la fecha de salida prevista. Para solicitar el reembolso, deberá ponerse en contacto con nuestro  centro de asistencia telefónica.',
        'tr_TR': 'Planlanan kalkıştan 7 gün veya daha önceden rezervasyon yaptırdıysanız, rezervasyonunuzu 24 saat içinde iptal ederek paranızı eksiksiz iade alabilirsiniz. Para iadesi işlemleri için, lütfen çağrı merkezimizi arayın.',
        'nl_NL': 'U kunt uw reservering annuleren en uw betaling binnen 24 uur volledig terugontvangen indien uw reservering 7 dagen of eerder voorafgaand aan de geplande vertrekdatum plaatsvond. Neem voor uw terugbetaling contact op met ons callcenter.',
        'th_TH': 'คุณสามารถยกเลิกการจองโดยได้รับเงินคืนเต็มจำนวนภายใน 24 ชั่วโมง หากคุณจองตั้งแต่ 7 วันขึ้นไปก่อนการเดินทาง หากต้องการขอเงินคืน โปรดติดต่อ  ศูนย์บริการทางโทรศัพท์ '
    },
    'custom.js.all.content.fareNoticeHeading': {
        'en_GB': 'Fare notice'
    },
    'custom.js.all.content.fareNoticeBody': {
        'en_GB': 'body'
    }
}

getParameterByName = function (url,name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(url);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

getUrlExecutionCodeInitial = function () {
    var urlCode = null;
    var parameterValue = getParameterByName(window.location.href, 'execution');
    if (parameterValue)
        urlCode = $.trim(parameterValue).substring(0, 2);
    return urlCode;
}

calculateAge = function (dateObj,mode) {
    var today = new Date();
    var age = Math.floor((today - dateObj) / (24 * 60 * 60 * 1000));
    if (mode) {
        if (mode == "M")
            age = age * 0.0328549;
        else
            age = age / 365.25;
    }
    return age;
}

/// imported /// import eyTranslations.js
function getTranslationForKey(translationKey) {
    var translatedText = '';

    var translationFromStan = Resources(translationKey);
    var translationNotSupportedByStan = typeof translationFromStan === 'undefined';
    if (translationNotSupportedByStan) {
        try {
            var currentLanguage = sabre.config.global.language;
            translatedText = eyTranslations[currentLanguage][translationKey];
        } catch(e) {

        } 
    }

    return translatedText;
}

(function() {
    window.eyTranslations = {};

    var korean = eyTranslations['ko_KR'] = {};
    korean['label.flc.usBaggageAllowanceLinkText'] = '수하물 요금이 부과될 수 있습니다';
    korean['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var japanese = eyTranslations['ja_JP'] = {};
    japanese['label.flc.usBaggageAllowanceLinkText'] = '手荷物料金が適用される場合があります';
    japanese['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var portuguese = eyTranslations['pt_BR'] = {};
    portuguese['label.flc.usBaggageAllowanceLinkText'] = 'Bagagem sujeita à tarifação';
    portuguese['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var russian = eyTranslations['ru_RU'] = {};
    russian['label.flc.usBaggageAllowanceLinkText'] = 'Могут применяться сборы за багаж';
    russian['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var chinese = eyTranslations['zh_CN'] = {};
    chinese['label.flc.usBaggageAllowanceLinkText'] = '可能产生行李费用';
    chinese['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var arabic = eyTranslations['ar_AE'] = {};
    arabic['label.flc.usBaggageAllowanceLinkText'] = 'تطبق رسوم الأمتعة';
    arabic['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var french = eyTranslations['fr_FR'] = {};
    french['label.flc.usBaggageAllowanceLinkText'] = 'Des frais de bagages peuvent être facturés';
    french['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var italian = eyTranslations['it_IT'] = {};
    italian['label.flc.usBaggageAllowanceLinkText'] = 'Possono essere applicate tasse sul bagaglio.';
    italian['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var greek = eyTranslations['el_GR'] = {};
    greek['label.flc.usBaggageAllowanceLinkText'] = 'Ενδέχεται να επιβληθούν τέλη επισκευών';
    greek['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var english = eyTranslations['en_GB'] = {};
    english['label.flc.usBaggageAllowanceLinkText'] = 'Baggage fees may apply';
    english['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var german = eyTranslations['de_DE'] = {};
    german['label.flc.usBaggageAllowanceLinkText'] = 'Gepäckgebühren können anfallen';
    german['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var spanish = eyTranslations['es_ES'] = {};
    spanish['label.flc.usBaggageAllowanceLinkText'] = 'Pueden aplicarse cargos por exceso de equipaje.';
    spanish['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var turkish = eyTranslations['tr_TR'] = {};
    turkish['label.flc.usBaggageAllowanceLinkText'] = 'Bagaj ücretleri uygulanabilir';
    turkish['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var dutch = eyTranslations['nl_NL'] = {};
    dutch['label.flc.usBaggageAllowanceLinkText'] = 'Mogelijk is een bagagetoeslag van toepassing';
    dutch['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';

    var thai = eyTranslations['th_TH'] = {};
    thai['label.flc.usBaggageAllowanceLinkText'] = 'อาจมีการคิดค่าธรรมเนียมสัมภาระ';
    thai['label.flc.usBaggageAllowanceLinkUrl'] = 'https://www.etihad.com//before-you-fly/baggage-information/allowances-us-canada-brazil';
})();



/// imported /// import customComponents.js
function CustomComponents() { }

CustomComponents.prototype.allFunctions = function () {
    YUI.use('node', function (Y) {
        var ibeObject = WhiteLabel.getIbeData();
        var currentPageCode = retrievePageCode();

        if (currentPageCode === etihad.pageCodes.PassengerPage) {
            // Grab the passenger control
            var passenger = Y.one('#passenger-accordion').ancestor('div');
            // See if it is present
            if (passenger !== null || passenger !== 'undefined') {
                // Create the node
                var h2PaxInfo = Y.Node.create('<h2 class="paxInfo">Passenger Information</h2>');
                // Append the node to the document
                passenger.insert(h2PaxInfo, Y.one('#passenger-accordion'));
            }
        };

        if (currentPageCode === etihad.pageCodes.SeatsPage || currentPageCode === etihad.pageCodes.AncillarySeatPage ||
            currentPageCode === etihad.pageCodes.ExchangeSeatsPage || currentPageCode === etihad.pageCodes.UpgradeSeatsPage) {
            try {
                if (ibeObject.journeySpan === 'ROUND_TRIP') {
                    var Y_SeatMapContainer = Y.one('#seat-map-map-container'),
                        Y_SeatMapDetailsContainer = Y.one('#flight-list-infobox'),
                        Y_OutboundSeats = Y_SeatMapDetailsContainer.one('.seat-map-flights-departing'),
                        Y_InboundSeats = Y_SeatMapDetailsContainer.one('.seat-map-flights-returning'),
                        outboundSegments = 0,
                        inboundSegments = 0;
                    // Finds the number of segments per bound
                    Y_OutboundSeats.all('li.seat-map-flights-expanded').each(function () {
                        outboundSegments++;
                    });
                    // Finds the number of segments per bound
                    Y_InboundSeats.all('li.seat-map-flights-expanded').each(function () {
                        inboundSegments++;
                    });

                    var counter = 0,
                        outboundSegmentsComplete = false,
                        inboundSegmentsComplete = false;

                    Y_SeatMapContainer.all('.seat-map-segment').each(function () {
                        if (!outboundSegmentsComplete) {
                            this.toggleClass('outboundSegment');
                            counter++;
                            if (outboundSegments === counter) {
                                outboundSegmentsComplete = true;
                                counter = 0;
                            }
                        } else {
                            if (!inboundSegmentsComplete) {
                                this.toggleClass('inboundSegment');
                                counter++;

                                if (inboundSegments === counter) {
                                    inboundSegmentsComplete = true;
                                }
                            }
                        }
                    });
                }
            } catch (error) {
                // do nothing
                errorMessagesString = '';
                if (typeof exLogger != 'undefined' && exLogger) {
                    exLogger.params.add("AdditionalMsg", errorMessagesString);
                    exLogger.log(error, exLogger.ErrorLevel.Error);
                }
            }
        }
        if (retrievePageCode() === etihad.pageCodes.ConfirmationPage) {
            try {
                if (ibeObject.journeySpan === 'ROUND_TRIP') {
                    var Y_FlightsElement = Y.one('.flightsdetails-component'),
                    Y_Itineraries = Y_FlightsElement.all('.itinerary-wrapper');

                    if (Y_Itineraries.size() == 2) {
                        Y_Itineraries.get(0).toggleClass('outboundSegment');
                        Y_Itineraries.get(1).toggleClass('inboundSegment');
                    }
                }

            } catch (er) {
                errorMessagesString = '';
                if (typeof exLogger != 'undefined' && exLogger) {
                    exLogger.params.add("AdditionalMsg", errorMessagesString);
                    exLogger.log(er, exLogger.ErrorLevel.Error);
                }

            }
        };

        function addCssClassToSelectedFare(Y) {
            // Only execute code if the fare tables have been loaded
            // Grab an instance of the fare tables
            var Y_FlightTables = Y.all('.flight-list');

            Y_FlightTables.each(function (table) {
                if (table.one('input:checked') !== null) {
                    table.one('input:checked').ancestor('td').toggleClass('selected');
                }
            });
        }
    });

    // Create odd and even css classes on the multicity search results page
    if (sabre.config.pageCode === 'AIR_SELECT_PAGE') {
        YUI().use('node', function (Y) {
            // On content ready
            Y.on("contentready", function () {
                // Get an instance of the table
                var table = Y.one('table.flights-multi'),
                // Retrieve all the headers
                tableRows = table.all('tbody tr'),
                // Create a counter
                tableRowCounter = 0,
                // Get the headers
                tableHeaders = table.all('thead th');

                // Iterate around the headers 
                tableRows.each(function () {
                    // Add the css class
                    if (!this.hasClass('emptyTableRow')) {
                        AddTRClassesToTableRow(this, tableRowCounter);
                        // Increament table
                        tableRowCounter++;
                    }
                    else {
                        // if it is an empty row then we need to need to start with an even row
                        if (!IsEven(tableRowCounter)) {
                            tableRowCounter--;
                        }
                    }
                });

                // add the column headers
                AddColumnHeading(tableHeaders.item(0), 'index');
                AddColumnHeading(tableHeaders.item(1), 'operatedBy');
                AddColumnHeading(tableHeaders.item(2), 'flight');
                AddColumnHeading(tableHeaders.item(3), 'depart');
                AddColumnHeading(tableHeaders.item(4), 'arrive');
                AddColumnHeading(tableHeaders.item(5), 'stops');
                AddColumnHeading(tableHeaders.item(6), 'duration');
                AddColumnHeading(tableHeaders.item(7), 'price');

                // Only run function if the table has a class of type
                // flights-multi
            }, "table.flights-multi");
        });
    };

    function AddColumnHeading(y_column, heading) {
        try {
            y_column.addClass(heading);
        }
        catch (er) {
            errorMessagesString = '';
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.params.add("AdditionalMsg", errorMessagesString);
                exLogger.log(er, exLogger.ErrorLevel.Error);
            }
        }
    };

    // Adds a css class to the tr
    function AddTRClassesToTableRow(tableRow, counter) {
        // Check if the counter integer is odd or even
        if (IsEven(counter)) {
            // Even row
            tableRow.addClass('even');
        } else {
            // Odd row
            tableRow.addClass('odd');
        }
    };

    // Looks to see if an integer is an even or odd number
    function IsEven(counterVariable) {
        if (counterVariable % 2) {
            return false;
        } else {
            return true;
        }
    };
}

/// imported /// import Bus/Bus.js
function createBus() {
    "use strict";
    var handlerMap = {};
    var publishedMessages = [];
    var handeledMessages = [];
    var errorMessages = [];

    function Bus() {
        this.handeledMessages = handeledMessages;
        this.errorMessages = errorMessages;
        this.publishedMessages = publishedMessages;
    }

    function logHandeledMsg(msg, handler) {
        var logMsg = {};
        logMsg.msgName = msg.name;
        logMsg.handlerName = handler.name;
        logMsg.msg = msg;
        
        handeledMessages.push(logMsg);
    }

    function logErrorMsg(msg, handler, ex) {
        var logMsg = {};
        logMsg.msgName = msg.name;
        logMsg.handlerName = handler.name;
        logMsg.msg = msg;
        logMsg.exLogger = ex;
        errorMessages.push(logMsg);
    }

    function addHandler(msgName, handler) {
        if (msgName && handler) {
            handlerMap[msgName] = handlerMap[msgName] || [];
            handlerMap[msgName].push(handler);
        }
    };

    Bus.prototype.publish = function (msg) {
        if (msg) {
            publishedMessages.push(msg);
            var handlers = handlerMap[msg.name] || [];
            $.each(handlers, function (i, handler) {
                try {
                    handler(msg);
                    logHandeledMsg(msg, handler);
                } catch(e) {
                    logErrorMsg(msg, handler, e);
                } 
            });
        }
    };
    
    Bus.prototype.subscribe = function (msgName, handler) {
        if ($.isArray(handler)) {
            for (var i = 0; i < handler.length; i++) {
                addHandler(msgName, handler[i]);
            }
        } else {
            addHandler(msgName, handler);
        }
    };

    return new Bus();
}

/// imported /// import ExternalResourcesUrls.js
var ibmEnvAddress = {
    "prod": "https://modules.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml",
    "ppe": "https://modules.ppe.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml",
    "test": "https://modules.test.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml",
    "dev": "https://modules.dev.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml"
};

var webModuleEnvAddress = {
    "prod": "https://webmodule.etihad.com",
    "test": "https://webmodule.test.etihad.com",
    "test2": "https://webmodule2.test.etihad.com",
    "dev": "https://webmodule.dev.etihad.com"
};

var getSswAssetsUrl = function() {
    var jsFileLocation = $('script[src*=etihadPageObject]').attr('src');
    return jsFileLocation.replace(/js\/etihadPageObject\.js.*$/, '');
};

var sswAssetsUrl = getSswAssetsUrl();

function ExternalResourcesUrls() {

}
ExternalResourcesUrls.prototype = function () {


    var setExternalUrls = function (Y) {

        var configUrls = getCookie(Y);
        if (configUrls != null) {
            if (configUrls.hasOwnProperty('IBMUrl') && configUrls.IBMUrl != '') {
                externalResourcesConfigUrls.IBMUrl = configUrls.IBMUrl;
            }
            else {
                externalResourcesConfigUrls.IBMUrl = ibmEnvAddress['prod'];
            }
            if (configUrls.hasOwnProperty('WebModuleUrl') && configUrls.WebModuleUrl != '') {
                externalResourcesConfigUrls.WebModuleUrl = configUrls.WebModuleUrl;
            }
            else {
                externalResourcesConfigUrls.WebModuleUrl = webModuleEnvAddress['prod'];
            }
        }
        else {
            externalResourcesConfigUrls = {};
            externalResourcesConfigUrls.IBMUrl = ibmEnvAddress['prod'];
            externalResourcesConfigUrls.WebModuleUrl = webModuleEnvAddress['prod'];
        }

        
        log('ibm url: ' + externalResourcesConfigUrls.IBMUrl);
        log('web module url: ' + externalResourcesConfigUrls.WebModuleUrl);
    };

    var getCookieName = function () {

        return 'testersConfig';
    };

    var log = function (sMessage) {
        if (window.console) {
            console.log('[Testers Configuration] ' + sMessage);
        }
    };

    var getCookie = function (Y) {
        var cookieName = getCookieName();
        if (!Y.Cookie.exists(cookieName)) {
            return undefined;
        }
        //log('Cookie exists');

        var cookieString = Y.Cookie.get(cookieName);

        if (!cookieString)
            return undefined;

        if (cookieString == '{}')
            return undefined;
        
        var result = JSON.parse(cookieString);
        //log('Cookie parsed');
        return result;
    };

    var setCookie = function (value, Y) {
        //log('Setting cookie ' + value);

        var cookieName = getCookieName();
        var stringified = Y.JSON.stringify(value);
        Y.Cookie.set(cookieName, stringified);  // setting as a session cookie.
        //log('Cookie set.');
    };

    var removeCookie = function (Y) {
        Y.Cookie.remove(getCookieName());
    };

    return {
        getCookie: getCookie,
        setCookie: setCookie,
        removeCookie: removeCookie,
        setExternalUrls: setExternalUrls
    };

}();

var externalResourcesUrls = new ExternalResourcesUrls();
var externalResourcesConfigUrls = {};
YUI().use('cookie', function (Y) {
    externalResourcesUrls.setExternalUrls(Y);
});

$(document).ready(function () {
    
    function saveTestersConfiguration() {

        var ibmQuery = getParameterByName('ibmenv');
        var webModuleQuery = getParameterByName('wmenv');
        YUI().use('cookie', 'json-stringify', function (Y) {
            var cookieObj = new Object();
            var savedCookieObj = externalResourcesUrls.getCookie(Y);

            if (ibmEnvAddress.hasOwnProperty(ibmQuery) && ibmQuery != '') {
                cookieObj.IBMUrl = ibmEnvAddress[ibmQuery];
            }
            else {
                if (savedCookieObj != null && savedCookieObj.hasOwnProperty('IBMUrl')) {
                    cookieObj.IBMUrl = savedCookieObj['IBMUrl'];
                }
            }
            if (webModuleEnvAddress.hasOwnProperty(webModuleQuery) && webModuleQuery != '') {
                cookieObj.WebModuleUrl = webModuleEnvAddress[webModuleQuery];
            }
            else {
                if (savedCookieObj != null && savedCookieObj.hasOwnProperty('WebModuleUrl')) {
                    cookieObj.WebModuleUrl = savedCookieObj['WebModuleUrl'];
                }
            }

            externalResourcesUrls.setCookie(cookieObj, Y);
            externalResourcesUrls.setExternalUrls(Y);
        });
    }
    

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    if (sabre.config.pageCode == etihad.pageCodes.FlightsSearchPage || sabre.config.pageCode == etihad.pageCodes.FlightsResultsPage) {
        saveTestersConfiguration();
    }
    

    
});






/// imported /// import GuestLogin.js
/*!
 * $Id: GuestLoginPanel.js 04-11-2014
 * 
 * Functionality to show/hide Guest Login Panel
 *
 * Author: Renees, rpayerioliyat@etihad.ae
 * Etihad Airways, Abu Dhabi
 */

function GuestLogin() { }

GuestLogin.prototype = function() {
    var hideLoginPanelIfEpiphayDown = function() {
        if (Etihad.config.isEpiphanyDown) {
            $('.login-component .togglee').hide();
            $('.login-component .component-content').append('<div class="ey-cust-in-wrpr-out"><div class="ey-cust-ins-wrpr-in"><div class="ey-cust-in-header">Guest login unavailable</div><div class="ey-cust-in-error-logo"></div><div class="ey-cust-in-msg">Unfortunately Etihad guest login is not available at the present time due to maintenance. Please try again later.</div></div></div>');
            //$('.login-component .component-content').append('<div id="flow-message-validationError" class="flow-message-error"><div class="flow-message-title"><div class="translate wasTranslated" wl:translate="flow.message.validationError.title">Guest login unavailable</div></div><div class="flow-message-code"></div><div class="flow-message-text"><div class="translate wasTranslated" wl:translate="flow.message.validationError.message">Unfortunately Etihad guest login is not available at the present time due to maintenance. Please try again later.</div></div></div>');

            $('.component-content .toggler a').on('click', function() {
                $('.ey-cust-in-wrpr-out').toggleClass('hidden');
                //$('#loginMessage').toggleClass('hidden');
                //$('.error-wrapper').toggleClass('hidden');
            });
        }
    };
    return {
        hideLoginPanelIfEpiphayDown: hideLoginPanelIfEpiphayDown
    };
}();

/// imported /// import Main.js
var bus = createBus();

function Etihad() {
    var config = null;
}

(function () {

    var isProduction = (window.location.host === 'booking.etihad.com');
    
    if (isProduction && sabre.config.pageCode == 'AIR_SEARCH_PAGE') {
        window.location = "http://www.etihad.com/sswcallback/?type=logo&" + GetType();
    } 

    if (!isProduction) {

        var showLanguageDropdown = function() {
            YUI().use('node', function(Y) {
                Y.on('contentready', function() {
                    this.setStyle('display', 'block');  // nope. there is no .show() in YUI 3.1.2
                }, '#lang_1');
            });
        };

        showLanguageDropdown();
    }
    

    function getConfiguration() {
        return {
            etihadLandingPage: "http://www.etihad.com/sswcallback/",
            enableAVSBinLookup: false,
            isEpiphanyDown: false,    // NOTE: Change this to 'true' when guest login needs to be disabled.
            enableCodeShareShare: false,
            enableMTOInsurance: false,
            enableMYBInsurance: true
        };
    }

    Etihad.config = getConfiguration();

    if (sabre.config.pageCode == 'PURCHASE_PAGE' ||
        sabre.config.pageCode == 'EXCHANGE_PAYMENT_PAGE' ||
        sabre.config.pageCode == 'UPGRADE_PURCHASE_PAGE') {
        YUI({
            base: '/SSW2010/javascripts/yui/3.3.0/build/'
        }).use('node', 'cookie', function (Y) {
            Y.on('contentready', function () {

                var origins = ['AUH', 'XNB', 'XMB', 'AAN'];
                var origin = WhiteLabel.getIbeData().itineraryParts[0].departureAirport;

                if (origin !== 'undefined' && origin !== null && origin.toString().length > 0) {
                    if ($.inArray(origin, origins) > -1) {
                        if (!$('body').hasClass('UAEOrigin')) {
                            $('body').addClass('UAEOrigin');
                }
                    } else {
                        if (!$('body').hasClass('OtherOrigin')) {
                            $('body').addClass('OtherOrigin');
        }
                        }
                    }

            }, '#bigRedLollipop');
                });
            }

    YUI().use('node', function (Y) {
        Y.on('contentready', function () {
            if (retrievePageCode() == etihad.pageCodes.PaymentPage) {
                $('html').addClass('onlyMC');
                var scope = $('.payment-details.credit-card-form.multi-fop-details');
                applyCountryAddressStyle(scope); // Apply styling based on selected country in the CC billing address.
            }
            //Fix for SSW Flights page greys out in Redemption flow for AAN-SEZ route
            if (retrievePageCode() == "AIR_SELECT_PAGE" & sabre.config.global.flowType == "REDEMPTION") {
                $("#modify-search_mask").hide();
            }

        }, '#bigRedLollipop');

        Y.on('contentready', function () {
            if (retrievePageCode() == "ANCILLARY_PAGE") {
                var strHTML = "<div class=\"clear-both\"><span class=\"field-required-legend\"><span class=\"translate\" data-wl-translate=\"validation.field.required.legend.begin\">{0}</span><span class=\"field-required\">&nbsp;</span> <span class=\"translate\" data-wl-translate=\"validation.field.required.legend.end\">{1}</span></span><div>";
                strHTML = strHTML.replace("{0}", Resources('validation.field.required.legend.begin'));
                strHTML = strHTML.replace("{1}", Resources('validation.field.required.legend.end'));
                var parentDiv = $("div.hotel-searchForm-roomsControl").after(strHTML);
            }
        }, '#hotel_1');

        Y.on('contentready', function () {
            if (retrievePageCode() == "ANCILLARY_PAGE") {
                var strHTML = "<li class=\"clear-both\"><span class=\"field-required-legend\" style=\"padding-left:0px\"><span class=\"translate\" data-wl-translate=\"validation.field.required.legend.begin\"><br/><br/>{0}</span><span class=\"field-required\">&nbsp;</span> <span class=\"translate\" data-wl-translate=\"validation.field.required.legend.end\">{1}</span></span><li>";
                strHTML = strHTML.replace("{0}", Resources('validation.field.required.legend.begin'));
                strHTML = strHTML.replace("{1}", Resources('validation.field.required.legend.end'));
                var parentDiv = $("li.car-search-loyalty-number").after(strHTML);
            }
        }, '#car_1');

        Y.on('contentready', function () {
            // Show/hide Guest Login Panel depending on the availability of the Epiphany service
            var guestLoginPanel = new GuestLogin();
            guestLoginPanel.hideLoginPanelIfEpiphayDown();
        }, '.login-component .togglee');

        if (sabre.config.pageCode == 'ANCILLARIES_MTO_ANCILLARY_PAGE') {
            YUI({
                base: '/SSW2010/javascripts/yui/3.3.0/build/'
            }).use('node', 'cookie', function (Y) {
                Y.on('contentready', function (Y) {
                    var insuranceAncillary = new InsuranceAncillary();
                    insuranceAncillary.showInsuranceProducts(Y);
                }, '#bigRedLollipop');
            });
        }

        // IN MYB Flow Etihad logo does not go back to home page Fix

        //Y.on('contentready', function () {


        //        var ibe = WhiteLabel.getIbeData();
        //        var flow = "flow=booking";

        //        if (ibe == null) {
        //            flow = "flow=mmb";
        //        }
        //        if (ibe.redemption == true) {
        //            flow = "flow=redemption";
        //        } else {
        //            flow = "flow=booking";
        //        }
        //        if (ibe.journeySpan == "MULTI_CITY") {
        //            flow += "&multicity=1"
        //        }

        //        //if it's MYB flow
        //        if (ibe.pnrNumber != null) {
        //            returnUrl = Etihad.config.etihadLandingPage + "?type=logo&" + flow;
        //            $("#airline-logo").attr("href", returnUrl);
        //        }


        //}, '#bigRedLollipop');

        });

    
})();

(function () {
    WhiteLabel.addEventHandler(function () {
        if (sabre.config.global.flowType === 'REDEMPTION') {
            $('body').addClass('REDEMPTION');
        }
    });
})();

var etihad = {
    pageCodes: {
        'NotFound': 'NA',
        'FlightsResultsPage': 'AIR_SELECT_PAGE',
        'FlightsSearchPage': 'AIR_SEARCH_PAGE',
        'PassengerPage': 'PASSENGERS_PAGE',
        'ExtrasPage': 'ANCILLARY_PAGE',
        'SeatsPage': 'SEATS_PAGE',
        'PaymentPage': 'PURCHASE_PAGE',
        'ConfirmationPage': 'CONFIRMATION_PAGE',
        'SabreError': 'PageError',
        'AncillarySeatPage': 'ANCILLARIES_MTO_SEATS_PAGE',
        'MMBHubPage': 'MY_BOOKING_PAGE',
        'MyTripsPage': 'MY_TRIPS_PAGE',
        'EditPaxDetailsPage': 'CHANGE_PAX_DETAILS_PAGE',
        'ViewItineraryPage': 'VIEW_ITINERARY_PAGE',
        'ExchangeFlightPage': 'FLIGHT_EXCHANGE_PAGE',
        'ExchangeSearchPage': 'EXCHANGE_AIR_SEARCH_PAGE',
        'ExchangeFlightSelectPage': 'EXCHANGE_AIR_SELECT_PAGE',
        'ExchangePassengerPage': 'EXCHANGE_PASSENGERS_PAGE',
        'ExchangeReviewPage': 'EXCHANGE_REVIEW_PAGE',
        'ExchangeExtrasPage': 'EXCHANGE_ANCILLARY_PAGE',
        'ExchangeSeatsPage': 'EXCHANGE_SEATS_PAGE',
        'ExchangePaymentPage': 'EXCHANGE_PAYMENT_PAGE',
        'ExchangeConfirmationPage': 'EXCHANGE_CONFIRMATION_PAGE',
        'UpgradeExtrasPage': 'UPGRADE_ANCILLARY_PAGE',
        'UpgradeSeatsPage': 'UPGRADE_SEATS_PAGE',
        'UpgradePaymentPage': 'UPGRADE_PURCHASE_PAGE',
        'UpgradeConfirmationPage': 'UPGRADE_CONFIRMATION_PAGE',
        'UpdateSeatsAncillaryPage' : 'ANCILLARIES_MTO_ANCILLARY_PAGE'
    },
    journeyType: {
        'OneWay': 'OneWay',
        'Return': 'Return',
        'Multi': 'Multi'
    },
    isCugVisaEnabled: false
};

(function checkAFOPPaymentMethodOnConfirmationpage() {

    if (sabre.config.pageCode === etihad.pageCodes.ConfirmationPage && getCookie('isAFOPPayment') === 'true') {
        $('#ROOT').hide();
        window.location = 'http://etihad.com';
    }

    function getCookie(cname) {

        try {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            if (ca)
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i].trim();
                    if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
                }
            return "";
        } catch(e) {
            if (typeof exLogger != 'undefined') {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
            return "";
        }

    }
})();

function retrievePageCode() {
    var sPageCode = etihad.pageCodes.NotFound;

    try {
        sPageCode = sabre.config.pageCode;
    } catch (e) {
        sPageCode = etihad.pageCodes.SabreError;
    }

    return sPageCode;
}

function EtihadPageObject(Y) {
    this.currentPage = null;
    this.yahooInstance = Y;
}

EtihadPageObject.prototype = function () {
    // Sets the page object for the current page
    // and calls the relevent function
    var instantiate = function (pageName) {
        window.__yFromEtihadPageObject = this.yahooInstance;
        this.currentPage = pageName;

        busBootstrap();
        var breadcrumbVIP =new VipBreadcrumb();
        breadcrumbVIP.instantiate();
        


        try {
            switch (pageName) {
                case etihad.pageCodes.FlightsSearchPage:
                    flightsSearchPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.PaymentPage:
                    paymentPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.FlightsResultsPage:
                    flightsResultsPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.PassengerPage:
                    SetSecondVIPEmailAddress(this.yahooInstance);
                    formatPassengerPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.EditPaxDetailsPage:
                case etihad.pageCodes.ExchangePassengerPage:
                    passengerPage(this.yahooInstance);
                    formatPassengerPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.ExtrasPage:
                    extrasPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.ConfirmationPage:
                    confirmationPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.ExchangePaymentPage:
                    break;
                case etihad.pageCodes.SeatsPage:
                case etihad.pageCodes.ExchangeSeatsPage:
                case etihad.pageCodes.UpgradeSeatsPage:
                    seatsPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.AncillarySeatPage:
                    MTOSeatsPage(this.yahooInstance);
                    break;                    
                case etihad.pageCodes.UpgradePaymentPage:
                    mybPaymentPage();
                    break;
                case etihad.pageCodes.ExchangeFlightSelectPage:
                    exchangeFlightsResultsPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.PassengerPage:
                case etihad.pageCodes.EditPaxDetailsPage:
                case etihad.pageCodes.ExchangePassengerPage:
                    passengerPage();
                    break;
                case etihad.pageCodes.ExchangeExtrasPage:
                    mybExchangeExtrasPage(this.yahooInstance);
                    break;
                case etihad.pageCodes.ViewItineraryPage:
                    viewItineraryPage();
                    break;
            }

            if (pageName !== etihad.pageCodes.ConfirmationPage) {
                var allPage = new AllPages(this.yahooInstance);
                allPage.redirectTimeoutPopup();
            }
            var etihadRouter = new EtihadRouter(this.yahooInstance);
            etihadRouter.registerRoutes();

            var journeyValues = new saveJourneyValues(this.currentPage);
            journeyValues.instantiate();


            var ruleEngine = new BusinessRuleEngine();
            ruleEngine.initialize();



        } catch (error) {
            if (window.console) {
                console.log('[AFOP] an error occurred before AFOP module is initialized. \n\n' + error);
            }

            errorMessagesString = '';
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.params.add("AdditionalMsg", errorMessagesString);
                exLogger.log(error, exLogger.ErrorLevel.Error);
            }

            throw error;
        }
        finally {
            // making sure that payment methods is initialized.
            // doing it with try..finally for now. It should be replaced with a better solution that applies to all modules.

            var paymentMethods = new PaymentMethods();
            paymentMethods.instantiate();


        }
       

            //showBreadcrumb();
            //var vipFlow = new VipPagesFlow();vipc
            //vipFlow.instantiate();
            //vipFlow.updateUIForVIP();

        },
        flightsSearchPage = function (Y) {
            
        },
        flightsResultsPage = function (y) {

            //Insurance Cookie
             y.Cookie.set("passengerDOB_" + getUrlExecutionCodeInitial(), '');
        
            // Wetlease
            var wetLease = new WetLeasePopup();
            wetLease.Instantiate();
            var crossCabin = new CrossCabin();
            crossCabin.Instanitate();

            var flightWarningPopup = new FlightWarningPopup();
            flightWarningPopup.Instantiate();

            $("#BestPrice").attr("href", "http://www.etihad.com/en/messages/general-bpp/");

            var farePolicyNotice = new FarePolicyNotice();
            farePolicyNotice.registerCheckFareFamiliesEvent();
            farePolicyNotice.checkFareFamilies();

            clearAfopPaymentCookie();
        },
        passengerPage = function () {
            try {

                //var pageA380 = new VipPagesFlow();
                //pageA380.instantiate();

                var reqLabels = $('.phone-fields .requiredIndicatorLabel');
                reqLabels.each(function () {
                    var $el = $(this);
                    $el.next().after($el);
                });

            } catch (er) {

                errorMessagesString = '';
                if (typeof exLogger != 'undefined' && exLogger) {
                    exLogger.params.add("AdditionalMsg", errorMessagesString);
                    exLogger.log(er, exLogger.ErrorLevel.Error);
                }

            }
            //var confirmEmailControl = new confirmEmailAddressControl(y);
            //confirmEmailControl.instantiate();
        },
        viewItineraryPage = function () {
            var viewItinerary = new ViewItineraryPage();
            viewItinerary.manageMealBookingOption();
        },
        extrasPage = function (y) {
            var extraPage = new ExtraPage();
            extraPage.removeWeightBaggage();

            var insuranceAncillary = new InsuranceAncillary();
            insuranceAncillary.showInsuranceProducts(y);
        },
        seatsPage = function (y) {
            var seatsPageHandler = new SeatsPageHandler();
            seatsPageHandler.updateIndicatorToReflectSelectedSeat();
            seatsPageHandler.applySeatIndicatorColorAfterLoad(y);
            seatsPageHandler.attachRearFacingSeatToolTip();
            seatsPageHandler.attachCssClassToBassinetAttachSeatRow();
        },
        MTOSeatsPage = function (y) {
            var seatsPageHandler = new SeatsPageHandler();
            seatsPageHandler.attachCssClassToBassinetAttachSeatRow();
        },
        paymentPage = function (y) {
            var creditCardsSection = new CreditCardsSection();
            creditCardsSection.instantiate();

            var payPalSection = new PayPalSection();
            payPalSection.instantiate(y);

            var poliSection = new POLiSection();
            poliSection.instantiate(y);
            
            var additonalTandCMsg = new AdditionalTandcMessages();
            additonalTandCMsg.instantiate(y);

            var usDotMessage = new UsDotMessage();
            usDotMessage.addCreditCardUsDotMessage();
            usDotMessage.addOtherDotMessage();

            (function refreshPageAfterLoginLogout() {
                 
                var loginBtnSelector = '.component.login input.btn-login';
                var logoutBtnSelector = '.component.login a.logout';

                y.one('body').delegate('click', function () {
                    y.on('contentready', reloadPage, logoutBtnSelector);
                }, loginBtnSelector);
                
                y.one('body').delegate('click', function () {
                    y.on('contentready', reloadPage, loginBtnSelector);
                }, logoutBtnSelector);
                

                function reloadPage() {
                    window.location = window.location.href;
                }
            })();
        },
        mybPaymentPage = function (y) {
            var additonalTandCMsg = new AdditionalTandcMessages();
            additonalTandCMsg.instantiate(y);
        },
        mybExchangeExtrasPage = function (Y) {
                var mybExtraPage = new mybExtrasPage();
                mybExtraPage.UpdateExtraPage(Y);

            var insuranceAncillary = new InsuranceAncillary();
            insuranceAncillary.showInsuranceProducts(Y);
                },
        exchangeFlightsResultsPage = function (y) {
            var farePolicyNotice = new FarePolicyNotice();
            farePolicyNotice.registerCheckFareFamiliesEvent();
            farePolicyNotice.checkFareFamilies();
        },
        showBreadcrumb = function () {
            $(function () { document.getElementById("booking-process").setAttribute('style', 'display:block !important'); });
        },
        confirmationPage = function (y) {
            var executionCodeInitial = getUrlExecutionCodeInitial();
            if (executionCodeInitial)
                //Insurance Cookie
                y.Cookie.remove("passengerDOB_" + executionCodeInitial);
            
            var confirmationPage = new ConfirmationPage();
            confirmationPage.instantiate(y);
        };
    var SetSecondVIPEmailAddress = function(y) {
        var vipPassengerPage = new VipPassengerPage();
        vipPassengerPage.instantiate(y);
    };
    // Exposes public  functions

    var formatPassengerPage = function (y) {
        var formatPassengerPage = new FormatPassengerPage();
        formatPassengerPage.instantiate(y);
    };

    return {
        instantiate: instantiate
    };
}();

applyCountryAddressStyle = function (scope) {

    //var cs = jQuery(jQuery('[name="selectedCards[0].billingData.country"]')[0]).val(); //$('[id="billingData\\.countryEnabled_clone"] select').val(); //get selected country code.
    var cs = jQuery('select[name="selectedCards[0].billingData.country"]', scope).val();
    var address1 = $('input[name="selectedCards[0].billingData.street1"]', scope).parent().parent();
    var postcode = $('input[name="selectedCards[0].billingData.zipCode"]', scope).parent();

    if (cs == 'GB' || cs === 'US' || cs === 'CA') {
        $(address1).css({ display: 'block' }).children().css({ display: 'inline-block' });
        $(postcode).css({ display: 'block' });
    } else {
        $(address1).css({ display: 'none' }).children().css({ display: 'none' });
        $(postcode).css({ display: 'none' });
    }
};


/// imported /// import Modules/tooltip.js
/**
 *
 * jQuery accessible tooltip plugin
 * 
 */
; (function (window, $, undefined) {

    "use strict";

    /** 
    * @class tooltip
    * @memberOf $.fn
    */
    $.fn.tooltip = function (options) {
        // Extend default options with those provided
        var settings = $.extend({}, $.fn.tooltip.defaults, options);

        initTooltip($(this), settings);
    };

    // Plugin defaults
    $.fn.tooltip.defaults = {
        tipContainerClass: 'tooltip',	// element where the tooltip content is written
        rtl: $('body').hasClass('LANGUAGE_ar_AE') ? true : false,
        pageXOffsetMouse: 3	            // horizontal offset for mouse
    };

    function initTooltip($obj, opts) {
        // Create tooltip container
        var ttID = opts.tipContainerId, tooltip = $('#' + ttID), tipCoordinates, tipWidth;
        if (!$('#' + ttID).attr('id')) {
            tooltip = $('<div id="' + ttID + '" class="' + opts.tipContainerClass + '"></div>').hide();
            tooltip.appendTo('body');
        }
        if (opts.tipText && opts.tipText.length > 0)
            tooltip.text(opts.tipText);

        $obj.find("strong").mouseover(function (e) {
            var top = e.pageY - tooltip.outerHeight(),
                left = opts.rtl ? e.pageX - tooltip.outerWidth() - opts.pageXOffsetMouse : e.pageX + opts.pageXOffsetMouse;
            tooltip
            .css({
                top: top,
                left: left
            }).show();
        }).mousemove(function (e) {
            var top = e.pageY - tooltip.outerHeight(),
                left = opts.rtl ? e.pageX - tooltip.outerWidth() - opts.pageXOffsetMouse : e.pageX + opts.pageXOffsetMouse;
            tooltip
            .css({
                top: top,
                left: left
            });
        }).mouseout(function (e) {
            tooltip.hide();
        });
    }

}(window, jQuery));

/// saveJourneyValues.js

/// imported /// import EtihadRouter.js
/* Page Router */

function EtihadRouter() { }

EtihadRouter.prototype = function () {

    // Pages included here will not have routing applied
    var excludedPage = [];

    //Routing table all routes in GLOBAL will be applied to all pages
    // Add entry for page specific
    var routingTable = {
        "GLOBAL": [{
            "type": "logo",
            "element": "#airline-logo"
        },
                     {
                         "type": "logo",
                         "element": "#booking-process #step-1 a"
                     },
                     {
                         "type": "modify",
                         "element": "#modify-search-trigger"
                     },
                     {
                         "type": "error",
                         "element": "#errors > .flow-message-error"
                     }
        ]
    }

    var registerRoutes = function () {
        for (var i = 0; i < excludedPage.length; i++) {
            if (exludedPage[i] == sabre.config.pageCode) {
                return;
            }
        }

        registerGlobalRoutes();
    },
    registerGlobalRoutes = function () {
        var routes = routingTable["GLOBAL"];
        if (routes == null) return;
        for (var i = 0; i < routes.length; i++) {
            if (routes[i].type == "logo") {
                registerLogo(routes[i]);
            } else if (routes[i].type == "modify") {
                registerModify(routes[i]);
            } else if (routes[i].type == "error") {
                redirectForError(routes[i]);
            }
        }
    },
    registerLogo = function (data) {
        YUI().use('node', "event", function (Y) {
            var node = Y.one(data.element);
            if (node == null) return;
            var flow = getType();
            if (node.getAttribute("href") != null) {
                node.setAttribute("href", Etihad.config.etihadLandingPage + "?type=logo&" + flow);
            }
            node.on('click', function (e) {
                e.preventDefault();
                Y.config.win.location = Etihad.config.etihadLandingPage + "?type=logo&" + flow;
            });
        });
    },
    registerModify = function (data) {
        // Override the default modify search link click behaviour to redirect to the flight search landing page
        var modifySearchLink = new ModifySearchLink();
        modifySearchLink.updateModifySearchLink(data);
    },
    redirectForError = function (data) {
        YUI().use('node', "event", function (Y) {
            if (Y.one('#modify-search') != null) {
                Y.one('#modify-search').setStyle('display', 'none');
            }
            var node = Y.one(data.element);
            if (node == null) return;
            var text = node.get('text');

            Y.one('#modify-search_c').remove();

            var flow = getType();
            //window.location = Etihad.config.etihadLandingPage + "?type=error&msg=" + encodeURIComponent(text) + "&" + flow;
            Y.config.win.location = Etihad.config.etihadLandingPage + "?type=error&msg=" + encodeURIComponent(text) + "&" + flow;
        });
    },
    getType = function () {
        var ibe = WhiteLabel.getIbeData();
        var type = "flow=booking";

        if (ibe == null) {
            type = "flow=mmb";
        }
        if (ibe.redemption == true) {
            type = "flow=redemption";
        } else {
            type = "flow=booking";
        }
        if (ibe.journeySpan == "MULTI_CITY") {
            type += "&multicity=1"
        }
        return type

    };

    return {
        registerRoutes: registerRoutes
    }
}();

/* End Page Router */

/// imported /// import AllPages.js
/* All Pages */

function AllPages() { }

AllPages.prototype = function () {
    var timeoutRedirect = Etihad.config.etihadLandingPage + "?type=logo";

    var redirectTimeoutPopup = function () {
        YUI().use('node', 'event', function (Y) {
            var timeoutMessage = Y.one("#popupSessionTimeout");

            if (timeoutMessage !== null) {
                timeoutMessage.addClass("hidden__");

                window.__timeoutIntervalId = window.setInterval(function (e) {
                    var timeout = Y.one("#popupSessionTimeout:not(.hidden__)");
                    if (timeout == null) return;

                    Y.one("#popupSessionTimeout .ft button").on('click', function (e) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        Y.config.win.location = timeoutRedirect + "&flow=" + getType();
                    });
                    window.clearInterval(window.__timeoutIntervalId);
                }, 500);
            }
        });
    },
    getType = function () {
        var ibe = WhiteLabel.getIbeData();
        var type = "flow=booking";

        if (ibe == null) {
            type = "flow=mmb";
        }
        if (ibe.redemption == true) {
            type = "flow=redemption";
        } else {
            type = "flow=booking";
        }
        if (ibe.journeySpan == "MULTI_CITY") {
            type += "multicity=1"
        }
        return type;

    };

    return {
        redirectTimeoutPopup: redirectTimeoutPopup
    };

}();

/* End All Pages */

//Set Copyright year in all pages to current year
jQuery(document).ready(function () {
    var dateValue = new Date();
    var yearValue = dateValue.getFullYear();

    var copyrightText = jQuery(".copyright").text();
    copyrightText = copyrightText.replace("2013", yearValue);
    jQuery(".copyright").text(copyrightText);
    jQuery("div#branding").append("<span id='partner-logo'></span>");
});


/// imported /// import OTPPopup.js
var OTPPopup = function () {

};

OTPPopup.prototype = function () {

    var getContentMessage = function (canceled, delayed30, delayed60) {
        var messageText = Resources('custom.js.all.popup.eyOTP.messege.text');
        if (messageText) {
            messageText = messageText.replace('{0}', canceled);
            messageText = messageText.replace('{1}', delayed30);
            messageText = messageText.replace('{2}', delayed60);
            messageText = messageText.replace(/\\\'/g, "'").trim(); //replace the escape char \'
        }
        return messageText;
    };

    var OTPEnablesAirports;

    var flightNumbers = [];


    var displayOTPMessage = function (popup) {
        var isOTPRequired = false;
        var popupID = popup.get('id');
        (popup.all('.flight-number')).each(function(taskNode) {
          var flightNumberNode = taskNode.one('a');
          if (flightNumberNode != undefined && flightNumberNode != null )
            {
            var flightNumber = taskNode.one('a').get('text');
            var selectedFlight = $(flightNumbers).filter(function() { return this.flightNumber === flightNumber });

            if (selectedFlight && selectedFlight.length > 0) {
                taskNode.append('<br/>');
                divOTP = Y.Node.create('<div id=\"dvOTP\"></div>');
                spnOTP = Y.Node.create('<span id=\"otp\"></span>');
                spnTxtOTP = Y.Node.create('<span>OTP*</span>');
                spnOTP.append(spnTxtOTP);
                iconInfo = Y.Node.create('<div class="otp-InfoIcon"></div>');
                spnOTP.append(iconInfo);
                divOTP.append(spnOTP);
                taskNode.append(divOTP);

                var headerText, contentText;

                $.each(OTPEnablesAirports, function(index, airport) {
                    if ($.inArray(flightNumber, airport.flightNumbers) > -1) {
                        headerText = flightNumber.replace(' ', '') + ' ' + selectedFlight[0].Source + '-' + selectedFlight[0].Destinition + ' ' + airport.oTPHeader;
                        contentText = airport.oTPmessage;
                    }
                });

                var dialog = new PopUpInformation({
                    id: "otpInfoPopUp",
                    header: headerText,
                    content: contentText,
                    containerID: popupID
                });

                spnOTP.on('mouseenter', function(e) {
                    dialog.showDialog(e);

                });
                spnOTP.on('mouseleave', function() {
                    dialog.closeDialog();
                });
                isOTPRequired = true;
            }

        }
        });
        if (isOTPRequired) {
            divOTPText = Y.Node.create('<div class=\'otpMsgText\'>* ' + Resources('custom.js.all.popup.eyGRU.OTPText') + '</div>');
            popup.append(divOTPText);
        }
    },

    loadFlightsForOTPAirports = function (componentModel, isMultiCity) {

        OTPEnablesAirports = [
        {
            groupId: 1,
            airportCode: "GRU",
            flightNumbers: ["EY 190"],
            oTPHeader: Resources('custom.js.all.popup.eyOTP.header'),
            oTPmessage: getContentMessage(Resources('custom.js.all.popup.eyOTP.messege.percentage.canceled.EY190'), Resources('custom.js.all.popup.eyOTP.messege.percentage.delayed.30min.EY190'), Resources('custom.js.all.popup.eyOTP.messege.percentage.delayed.60min.EY190'))
        },
        {
            groupId: 2,
            airportCode: "GRU",
            flightNumbers: ["EY 191"],
            oTPHeader: Resources('custom.js.all.popup.eyOTP.header'),
            oTPmessage: getContentMessage(Resources('custom.js.all.popup.eyOTP.messege.percentage.canceled.EY191'), Resources('custom.js.all.popup.eyOTP.messege.percentage.delayed.30min.EY191'), Resources('custom.js.all.popup.eyOTP.messege.percentage.delayed.60min.EY191'))
        }
        ];


        if (!isMultiCity) {
            $.each(componentModel, function (index, flightData) {
                $.each(flightData.segments, function (index, segment) {
                    if (HasOTPEnabledAirport(segment.arrivalCode) || HasOTPEnabledAirport(segment.departureCode)) {
                        $.each(segment.flightNumber, function (index, elem) {
                            var filteredFlight = $(flightNumbers).filter(function () { return this.flightNumber === "EY " + elem });
                            if (!filteredFlight || filteredFlight.length < 1) {
                                flightNumbers.push({ flightNumber: "EY " + elem, Source: segment.departureCode, Destinition: segment.arrivalCode });
                            }
                        });
                    }
                });
            });
        }
        else {
            $.each(componentModel, function (index, flightData) {
                $.each(flightData.parts, function (index, part) {
                    $.each(part.segments, function (index, segment) {
                        if (HasOTPEnabledAirport(segment.arrivalCode) || HasOTPEnabledAirport(segment.departureCode)) {
                            $.each(segment.flightNumber, function (index, elem) {
                                var filteredFlight = $(flightNumbers).filter(function () { return this.flightNumber === "EY " + elem });
                                if (!filteredFlight || filteredFlight.length < 1) {
                                    flightNumbers.push({ flightNumber: "EY " + elem, Source: segment.departureCode, Destinition: segment.arrivalCode });
                                }
                            });
                        }
                    });
                });
            });
        }
    },

    HasOTPEnabledAirport = function (airportCode) {
        var retrunVal = false;
        $.each(OTPEnablesAirports, function (index, airport) {
            if (airport.airportCode == airportCode) {
                retrunVal = true;
            }
        });
        return retrunVal;
    };

    return {
        loadFlightsForOTPAirports: loadFlightsForOTPAirports,
        displayOTPMessage: displayOTPMessage
    };
}();

function PopUpInformation(options) {
    this.header = options.header;
    this.content = options.content;
    this.id = options.id;
    this.containerID = options.containerID;
    this.extraClass = options.className;
}

PopUpInformation.prototype = function () {

    var closeDialog = function () {
        $("#" + this.id).remove();
    };

    var position = function (id,e) {
        var modal = $('#' + id);
        var window_width = $(window).width();
        var window_height = $(window).height();
        var modal_height = modal.height();
        var modal_width = modal.width();
        var top = e.clientY - 60;
        var left = e.clientX + 50;

        modal.css({ 'top': top, 'left': left });
    };

    var showDialog = function (e) {
        var dialogId = this.id;
        var html =
            '<div class="confirmation-dialog divOTPConfirmationPopup" id="' + this.id + '">' +
                '<div class="container">' +
                    '<div class="heading"><h3>' + this.header + '</h3> </div> ' +
                    '<div class="content"><p>' + this.content + '</p></div>' +
                    '</div> ' +
            '</div>';

        var $body = $('body');
        $body.append(html);

        position(this.id,e);

        $('#' + this.id).show();
    };

    return {
        showDialog: showDialog,
        closeDialog: closeDialog
    };
}();


/// imported /// import SearchResultPage.js
function getTarget(evt) {
    evt = evt || window.event; // get window.event if argument is false (in IE)
    // get srcElement if target is false (IE)
    var targetElement = evt.target || evt.srcElement;
    return targetElement.id;
}
//Set prev / next day text for calander
function setCalanderSlider(Y) {
    if (Y != null) {
        Y.on('contentready', function () {
            var daysText = Resources('custom.js.calander.day');
            //$(".prev-next-label span:not(.translate)").append(daysText);
            if (daysText != null && daysText != "") {
                $(".prev-next-label span:not(.translate)").each(function () {
                    var txt = $(this).text();
                    var appended = txt.indexOf(daysText, txt.length - daysText.length);
                    if (appended == -1)
                        $(this).text(txt + daysText);
                });
            }

        }, '.dates-next');
    }
    else {
        var daysText = Resources('custom.js.calander.day');
        if (daysText != null && daysText != "") {
            $(".prev-next-label span:not(.translate)").each(function () {
                var txt = $(this).text();
                var appended = txt.indexOf(daysText, txt.length - daysText.length);
                if (appended == -1)
                    $(this).text(txt + daysText);
            });
        }
    }
}
function readSubCookie(name, subname) {
    var cookieData = getCookie(name);
    var nameEQ = subname + "=";
    var ca = cookieData.split('&');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
}

$(document).ready(function () {
    YUI().use('node', 'event', 'cookie', function (Y) {
        setCalanderSlider(Y);

        Y.on('contentready', function () {
            $('#BestPrice img').remove();
            var bestPrice = $('#BestPrice');
            $('#customhtmlHajjAdvisory').append(bestPrice);
        }, '#BestPrice');
    });

});

function replaceArabicDates() {
    if (sabre.config.global.language == "ar_AE") {
        $("div.date-range").each(function () {
            $("span.date.translate.wasTranslated",$(this)).each(function () {
                var incorrectDate = $(this).text();
                var correctDate = incorrectDate.split("/")[0];
                $(this).text(correctDate);
            });
        });
    }
}

function modifySearchResults(searchMatrixLoadedEvent) {
    replaceArabicDates();
    var $table = searchMatrixLoadedEvent.$table;
    var componentModel = searchMatrixLoadedEvent.componentModel;
    var vipFareFamilyCode = 'TR';
    var vipSupportedAircraftCodes = ['380', '388'];
    var videoLinkSupportedAircraftCodes = ['380', '388'];
    var aircraftCodeToNameHash = {
        "31B": "A319-132", "31J": "A319", "32D": "A320-232",
        "32Z": "A320-212", "32E": "A321", "33C": "A330-243",
        "33A": "A330-343", "345": "A340-541", "346": "A340-642",
        "34E": "A340-642", "77B": "B777-300", "77C": "B777-300",
        "77D": "B777-300", "77H": "B777-200", "78A": "B787",
        "SEZ / HM": "A330-243", "9W - 33J": "A330-200", "9W - 33G": "A330-200",
        "9W - 33V": "A330-200", "9W - 77G": "B777-300", "9W - 77M": "B738",
        "VA - 77V": "B777-300", "AF - 34Y": "A340-300", "380": "A380", "787": "B787", "747": "B747", "388": "A380", "789": "B787"
    };

    function createModelForRow($row, componentModel) {
        var $columns = $row.find('td');

        var $departureSpans = $columns.eq(0).find('span');
        var $arrivalSpans = $columns.eq(1).find('span');

        var model = {
            departure: {
                airportCode: $departureSpans.eq(0).text(),
                time: $departureSpans.eq(1).text()
            },
            arrival: {
                airportCode: $arrivalSpans.eq(0).text(),
                time: $arrivalSpans.eq(1).text()
            },
            totalTripDuration: msToHourMinuteModel(componentModel.itineraryPartData.totalTripDuration),
            stopovers: componentModel.itineraryPartData.stops,
            stopsCount: componentModel.itineraryPartData.stops.length
        };

        var travelDuration = getDateDifferenceInDays(ParseDateString(componentModel.itineraryPartData.departureDate),
                                                     ParseDateString(componentModel.itineraryPartData.arrivalDate));
        model.hasNextDayArrivalIndicator = (travelDuration == 1);
        model.hasTwoDaysArrivalIndicator = (travelDuration == 2);
        model.aircraftCodes = componentModel.itineraryPartData.aircraftType.slice();
        model.aircraftNames = componentModel.itineraryPartData.aircraftType.slice();
        for (var i = 0; i < model.aircraftNames.length; i++) {
            if (aircraftCodeToNameHash.hasOwnProperty(model.aircraftNames[i])) {
                model.aircraftNames[i] = aircraftCodeToNameHash[model.aircraftNames[i]];
            }
        }

        model.hasVipSupportedAircraft = arrayIntersect(componentModel.itineraryPartData.aircraftType, vipSupportedAircraftCodes).length > 0;

        return model;

        function msToHourMinuteModel(ms) {
            var x;
            x = ms / 1000;
            x /= 60;
            var minutes = Math.floor(x % 60);
            x /= 60;
            var hours = Math.floor(x);

            var hrs = Resources("label.flc.durationFormat.hours");
            var mins = Resources("label.flc.durationFormat.minutes");

            return hours + hrs + ' ' + minutes + mins;
        }

        function arrayIntersect(leftArray, rightArray) {
            return $.grep(leftArray, function (leftArrayElement) {
                return $.inArray(leftArrayElement, rightArray) > -1;
            });
        }
    }

    function createFromToView(model) {
        var template2 = '';

        var hasMoreThanOneDayIndicator = model.hasNextDayArrivalIndicator || model.hasTwoDaysArrivalIndicator;
        template2 += '<td class="ItinHeaderFrom">' +
         (hasMoreThanOneDayIndicator ? '<div class="alignAfterMoreThanOneDayIndicator">' : '<div>') + model.departure.airportCode + '</div>' +
            '<div>' + model.departure.time + '</div>' +
            '</td>';

        template2 += '<td class="ItinHeaderPlane">' + (hasMoreThanOneDayIndicator ? '<div class="ItinHeaderPlaneImg alignAfterMoreThanOneDayIndicator" /></td>' : '<div class="ItinHeaderPlaneImg" /></td>');

        var arrivalCell = '<div>' + model.arrival.airportCode + '</div>' +
            '<div>' + model.arrival.time + '</div>';

        if (hasMoreThanOneDayIndicator) {
            arrivalCell += '<div class="more-than-one-day-indicator ' + (model.hasNextDayArrivalIndicator ? "next-day-indicator" : "two-days-indicator") + '"></div>';
        }

        template2 += '<td class="ItinHeaderTo">' + arrivalCell + '</td>';

        return template2;
    }

    function createStopsDurationView(model) {
        var template = '<div>' + model.stopsCount + '</div>';

        if (model.stopsCount > 0) {
            var stopovers = model.stopovers[0];
            for (var i = 1; i < model.stopsCount; i++) {
                stopovers += ", " + model.stopovers[i];
            }

            template += '<div class="ey-stopovers-list">(' + stopovers + ')</div>';
        }

        template += '<div>' + model.totalTripDuration + '</div>';

        return template;
    }

    function createAircraftView(model) {
        var view = '';

        $.each(model.aircraftCodes, function (i, item) {
            var subView = '';
            var aircraftModelname = model.aircraftNames[i] || item;
            subView += aircraftModelname;

            if ($.inArray(item, videoLinkSupportedAircraftCodes) > -1) {
                subView += '<span class="aircraftVideo" ></span>';
                subView = '<div class="aircraft-video-container" onclick="javascript:openAircraftVideoPopup(\'' + aircraftModelname + '\');">' + subView + '</div>';
            } else {
                subView = "<div >" + subView + "</div>";

            }


            view += subView;
        });

        return view;
    }

    var fromToHeader =
            '<th class="yui-dt-first ItinHeaderFrom">' + Resources('label.flc.itineraryHeader.flyingFrom') + '</th>' +
            '<th class="ItinHeaderPlane">' + '<div class="ItinHeaderPlaneImg"/>' + '</th>' +
            '<th class="ItinHeaderTo">' + Resources('label.flc.itineraryHeader.flyingTo') + '</th>';

    var stopsDurationHeader = '<th class="ey-stops-duration-header"><div class="ey-stops-header"><span>' + Resources('label.flc.stops') + '</span></div><div class="ey-duration-header"><span>' + Resources('label.flc.duration') + '</span></div></th>';

    var aircraftHeader = '<th><span>' + Resources('label.flc.aircraft') + '</span></th>';

    function hideHeaders() {
        $headerColumns.eq(0).hide();
        $headerColumns.eq(1).hide();
        $headerColumns.eq(2).hide();
        $headerColumns.eq(3).hide();
    }

    function insertHeaders() {
        $(aircraftHeader).insertAfter($headerRow.find('th').eq(5));
        $headerRow.prepend(stopsDurationHeader);
        $headerRow.prepend((fromToHeader));
    }

    function adjustVIPColumnVisibility() {

        function hideVIPAndFareMatrixColumn() {
            //ajust columns width after hiding
            $table.find("td.ItinHeaderTo").next().addClass('adjustWidthStopsDuration');
            $table.find("td:eq(9)").addClass('adjustWidthOperratedBy');
            $table.find("td:eq(10)").addClass('adjustWidthAircraft');


            //hide both for outbound and return table
            $('th[id$="' + vipFareFamilyCode + '"]').hide();
            $('td[fare-family-key="' + vipFareFamilyCode + '"]').hide();

        }

        var isVIPRoute = IsVIPRoute();
        if (isVIPRoute === false) {
            hideVIPAndFareMatrixColumn();
        }
    }




    var $flightDetailsRows = $table.find('tbody tr[id]');
    var $headerRow = $table.find('thead tr:not(.guest)');
    var $headerColumns = $headerRow.find('th');

    hideHeaders();
    insertHeaders();

    $flightDetailsRows.each(function (i, row) {
        var $row = $(row);
        var model = createModelForRow($row, componentModel[i]);

        var fromToView = createFromToView(model);
        var stopsDurationView = createStopsDurationView(model);
        var aircraftView = createAircraftView(model);

        hideContentColumns();
        insertColumns();
        updateVIPCellBasedOnSupportedAircraft();

        function hideContentColumns() {
            var $bodyColumns = $row.find('td');
            $bodyColumns.eq(0).hide();
            $bodyColumns.eq(1).hide();
            $bodyColumns.eq(2).hide();
            $bodyColumns.eq(3).hide();
        }

        function updateVIPCellBasedOnSupportedAircraft() {
            var vipFlightUnavalible = '<span class="farefamily-cell-unavailable translate" data-wl-translate="custom.js.all.flightResultsColumn.VIPunavailable">N/A</span>';

            if (model.hasVipSupportedAircraft === false) {
                $row.find('.fare-family-TR .inner').html(vipFlightUnavalible);
            }
        }

        function insertColumns() {
            $(wrapInTd(aircraftView)).insertAfter($row.find('td').eq(5));

            $row.prepend(wrapInTd(stopsDurationView));
            $row.prepend((fromToView));

            function wrapInTd(view) {
                return '<td>' + view + '</td>';
            }
        }
    });

    $table.find("td:eq(9)").addClass('adjustWidthOperratedBy');

    var ibeObj = WhiteLabel.getIbeData();
    var isRedemptionFlow = ibeObj.redemption;
    if (isRedemptionFlow) {
        modifyTablesInRedemptonFlow();
    } else {
        adjustVIPColumnVisibility();
    }

    $table.addClass('ey-processed');
}

function modifyTablesInRedemptonFlow() {
    var redemptionText = Resources('custom.js.redemption.guestMessage'),
        $heading = $('.flight-list-header-container'),
        tables = $('.flight-list-container table');

    for (var i = 0; i < $heading.length; i++) {
        var numberOfParagraphs = $('p.redemptionText', $heading[i]).length;

        if (numberOfParagraphs == 0) {
            $($heading[i]).append('<p class="redemptionText">' + redemptionText + '</p>');
        }
    }

    for (var i = 0; i < tables.length; i++) {
        var $table = $(tables[i]);

        if ($table.length > 0) {
            var numberOfBrands = parseInt($('th.price', $table).length, 10);

            if ($('.guest', $table).length == 0) {
                var headingHtml = '<tr class="guest"><td class="guestEmpty" colspan="7">&nbsp;</td><td class="guestSeat">GuestSeat</td><td class="openSeat" colspan="' + (numberOfBrands - 1) + '">OpenSeat</td></tr>'

                $('thead', $table).prepend(headingHtml);
            }
        }
    }
}

function addFamillyFareMatrix() {
    function SearchResultPage() {
    }
    SearchResultPage.prototype = function () {

        var tables = ["#dtcontainer-outbounds > table", "#dtcontainer-inbounds > table", "#dtcontainer-both > table"];
        var yahooInstance = null;
        var availbleLanguageEditions = ['en_GB', 'de_DE', 'ru_RU', 'ja_JP'];

        var instantiate = function () {
            var currentLanguage = sabre.config.global.language;

            if ($.inArray(currentLanguage, availbleLanguageEditions) > -1) {
                yahooInstance = YUI();
                buildFareFamilyInformation();
            }
        },
            buildFareFamilyInformation = function () {
                yahooInstance.use('event', function () {
                    for (var i = 0; i < tables.length; i++) {
                        if (yahooInstance.one(tables[i]) == null) continue;

                        var selectedBtns = yahooInstance.all(tables[i] + " tr.fare-family");
                        for (var j = 0; j < selectedBtns.size() ; j++) {
                            selectedBtns.item(j).remove();
                        }

                        var selectedBtns = yahooInstance.all(tables[i] + " td input:checked");
                        var airport = getAirportCode(tables[0]);

                        try {
                            for (var j = 0; j < selectedBtns.size() ; j++) {

                                var tableCell = selectedBtns.item(j).ancestor("td");
                                var tableRow = selectedBtns.item(j).ancestor("tr");

                                var $table = $(tables[i]);
                                var containingTableDiv = $table.parent().attr('id');


                                // By default use the purple icons
                                var usePurpleIcons = true;

                                // find out which fare was selected
                                var selectedPriceIndex = $('#' + tableCell.get('id'), $table).index() - 11;

                                // calculate if we need to display a blue or purple
                                if (containingTableDiv.indexOf('inbounds') > -1) {
                                    usePurpleIcons = false;
                                }

                                var trId = parseInt(tableRow.get('id').split('-')[2], 10);

                                var availableBrandElements = $('th.price:visible', $table);
                                var numberOfFareFamilies = availableBrandElements.length;

                                var refundableRow = buildRefundableRow(airport, numberOfFareFamilies, usePurpleIcons, selectedPriceIndex, availableBrandElements);
                                var cancelRow = buildCancelRow(airport, numberOfFareFamilies, usePurpleIcons, selectedPriceIndex, availableBrandElements);

                                //Append the new row to the body of the #myTable table
                                var numberOfRows = $('tbody tr', $table).length - 1;

                                $('#' + containingTableDiv + ' table tbody tr:eq(' + trId + ')').after(refundableRow);

                                if ((trId) == numberOfRows) {
                                    $('#' + containingTableDiv + ' table tbody').append(cancelRow);
                                } else {
                                    $('#' + containingTableDiv + ' table tbody tr:eq(' + (trId + 1) + ')').after(cancelRow);
                                }
                            }
                        } catch (er) {
                            var error = er;
                            errorMessagesString = '';
                            if (typeof exLogger != 'undefined' && exLogger) {
                                exLogger.params.add("AdditionalMsg", errorMessagesString);
                                exLogger.log(er, exLogger.ErrorLevel.Error);
                            }
                        }
                    }
                });
            },
            getAirportCode = function (tableId) {
                if (WhiteLabel.getIbeData().itineraryParts == null) {
                    return "";
                }

                if (tableId.indexOf("outbound") != -1) {
                    return WhiteLabel.getIbeData().itineraryParts[0].departureAirport;
                }
                if (tableId.indexOf("inbound") != -1) {
                    return WhiteLabel.getIbeData().itineraryParts[0].arrivalAirport;
                }
                if (tableId.indexOf("both") != -1) {
                    return WhiteLabel.getIbeData().itineraryParts[0].departureAirport;
                }
            },
            getFareFamily = function (numberOfColumns, selectedPriceIndex, availableBrandElements) {

                var $brandElement = availableBrandElements[selectedPriceIndex];
                var brand = $($brandElement).attr('id').split('-')[1];

                return brand;
            },
            buildRefundableRow = function (airport, numberOfColumns, usePurpleIcons, selectedPriceIndex, availableBrandElements) {
                var $newRow = $('<tr/>').attr('class', 'fare-family'),
                    html = '',
                    tdCss = '';
                var refundableLabel = Resources('custom.js.all.content.refundable');
                var yesLabel = Resources('custom.js.farematrix.yes');
                var noLabel = Resources('custom.js.farematrix.no');

                html += (buildTitleNode(refundableLabel, "top-left"));

                for (var i = 0; i < numberOfColumns; i++) {

                    var isAnEdge = false,
                        isSelected = false;

                    if (selectedPriceIndex === i) {
                        isSelected = true;
                    }

                    if ((i + 1) == numberOfColumns) {
                        isAnEdge = true;
                    }

                    if (!isAnEdge && !isSelected) {
                        tdCss = 'top';
                    } else if (!isAnEdge && isSelected) {
                        tdCss = 'top selected';
                    } else if (isAnEdge && !isSelected) {
                        tdCss = 'top-right';
                    } else {
                        tdCss = 'top-right selected';
                    }

                    var famillyFareCode = getFareFamily(numberOfColumns, i, availableBrandElements);
                    var code = airport + "_" + famillyFareCode;
                    html += buildRefundableNode(code, tdCss, usePurpleIcons, yesLabel, noLabel, famillyFareCode);
                }

                $newRow.html(html);

                return $newRow;
            },
            buildCancelRow = function (airport, numberOfColumns, usePurpleIcons, selectedPriceIndex, availableBrandElements) {
                var $newRow = $('<tr/>').attr('class', 'fare-family'),
                    html = '',
                    tdCss = '';

                var cancellationLabel = Resources('custom.js.all.content.change');
                var yesLabel = Resources('custom.js.farematrix.yes');
                var noLabel = Resources('custom.js.farematrix.no');

                html += (buildTitleNode(cancellationLabel, "bottom-left"));

                for (var i = 0; i < numberOfColumns; i++) {
                    var isAnEdge = false,
                        isSelected = false;

                    if (selectedPriceIndex === i) {
                        isSelected = true;
                    }

                    if ((i + 1) == numberOfColumns) {
                        isAnEdge = true;
                    }

                    if (!isAnEdge && !isSelected) {
                        tdCss = 'bottom';
                    } else if (!isAnEdge && isSelected) {
                        tdCss = 'bottom selected';
                    } else if (isAnEdge && !isSelected) {
                        tdCss = 'bottom-right';
                    } else {
                        tdCss = 'bottom-right selected';
                    }

                    var famillyFareCode = getFareFamily(numberOfColumns, i, availableBrandElements);
                    var code = airport + "_" + famillyFareCode;
                    html += buildCancelNode(code, tdCss, usePurpleIcons, yesLabel, noLabel, famillyFareCode);
                }
                $newRow.html(html);
                return $newRow;
            },
            buildTitleNode = function (label, position) {
                var parts = label.split("<br>");
                var html = '<td  colspan="7" class="label ';

                if (parts.length > 1) {
                    html += position + '">' + parts[0] + '<br><span class="labelNormal">' + parts[1] + '</span>' + '</td>';
                } else
                    html += position + '">' + label + '</td>';

                return html;
            },
            buildRefundableNode = function (code, position, usePurpleIcons, yesLabel, noLabel, famillyFareCode) {
                var html = '';

                if (usePurpleIcons) {
                    if (fareComparison[code] == null) {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + purpleLargeCross + '" alt="Unavailable" />';

                        var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                        return n;
                    }

                    var data = fareComparison[code].can;

                    if (data.isCan) {
                        if (data.discount != null && data.discount != '') {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + purpleSmallTick + '" alt="Available" />';
                            html += buildFareMatrixCurrency(data.discount);
                        } else {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + purpleLargeTick + '"  alt="Available" />';
                        }
                    } else {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + purpleLargeCross + '"  alt="Unavailable" />';
                    }
                } else {
                    if (fareComparison[code] == null) {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + cyanLargeCross + '" alt="Unavailable" />';

                        var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                        return n;
                    }

                    var data = fareComparison[code].can;

                    if (data.isCan) {
                        if (data.discount != null && data.discount != '') {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + cyanSmallTick + '" alt="Available" />';
                            html += buildFareMatrixCurrency(data.discount);
                        } else {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + cyanLargeTick + '"  alt="Available" />';
                        }
                    } else {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + cyanLargeCross + '"  alt="Unavailable" />';
                    }
                }

                var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                return n;

            },
            buildCancelNode = function (code, position, usePurpleIcons, yesLabel, noLabel, famillyFareCode) {
                var html = '';

                if (usePurpleIcons) {
                    if (fareComparison[code] == null) {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + purpleLargeCross + '"  alt="Unavailable" />';
                        var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                        return n;
                    }

                    var data = fareComparison[code].chg;

                    if (data.isChg) {
                        if (data.discount != null && data.discount != "") {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + purpleSmallTick + '" alt="Available" />';
                            html += buildFareMatrixCurrency(data.discount);
                        } else {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + purpleLargeTick + '" alt="Available" />';
                        }
                    } else {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + purpleLargeCross + '" alt="Unavailable" />';
                    }
                } else {
                    if (fareComparison[code] == null) {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + cyanLargeCross + '"  alt="Unavailable" />';
                        var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                        return n;
                    }

                    var data = fareComparison[code].chg;

                    if (data.isChg) {
                        if (data.discount != null && data.discount != "") {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + cyanSmallTick + '" alt="Available" />';
                            html += buildFareMatrixCurrency(data.discount);
                        } else {
                            html = '<span class="lblFlag">' + yesLabel + '</span>'; //'<img src="' + cyanLargeTick + '" alt="Available" />';
                        }
                    } else {
                        html = '<span class="lblFlag">' + noLabel + '</span>'; //'<img src="' + cyanLargeCross + '" alt="Unavailable" />';
                    }
                }
                var n = '<td class="' + position + ' ey-ff-' + famillyFareCode + '">' + html + '</td>';
                return n;
            },
            buildFareMatrixCurrency = function (fareData) {
                var fareHtml = '<div class="discount">';
                var parts = fareData.split(" ");

                if (parts.length > 1) {
                    if ($.isNumeric(parts[1])) {
                        fareHtml += '<span class="currency">' + parts[0] + ' </span>';
                        fareHtml += '<span>' + parts[1] + '</span>';
                    } else {
                        fareHtml += '<span>' + parts[0] + ' </span>';
                        //assuming the rest of the parts have info to be displayed
                        parts.splice(0, 1);
                        fareHtml += '<span class="currency">' + parts.join(" ") + '</span>';
                    }
                    fareHtml += '</div>';
                } else
                    fareHtml += fareData + '</div>';

                return fareHtml;
            };

        return {
            instantiate: instantiate
        };
    }();

    new SearchResultPage().instantiate();
}

function addSelectedClassOnInputSelected(msg) {
    var $table = msg.$table;

    $table.find('.pointer input:checked').closest('td').addClass('selected');

    $table.find('td.pointer').click(function (e) {

        $table.find('td.selected').removeClass('selected');

        var $input = $(e.target);
        $input.closest('td').addClass('selected');
    });
}

function openAircraftVideoPopup(aircraftType) {

    var selectedClass = "#coralEconomy";

    switch (WhiteLabel.getIbeData().cabinClass) {
        case 'FIRST':
            selectedClass = "diamondFirst";
            break;
        case 'BUSINESS':
            selectedClass = "pearlBusiness";
            break;
    }

    var isResidenceSelected = IsResidenceSelected();

    if (isResidenceSelected)
        selectedClass = "vipSuite";
        
    if (WhiteLabel.getIbeData().selectedOffers.length > 0) {

        var selectedBrandId = WhiteLabel.getIbeData().selectedOffers[0].parts[0].segments[0].brandId;
        switch (selectedBrandId) {

            case 'TR':
                selectedClass = "vipSuite";
                break;
            case 'DS':
            case 'DV':
            case 'DF':
                selectedClass = "diamondFirst";
                break;
            case 'BS':
            case 'BV':
            case 'BF':
                selectedClass = "pearlBusiness";
                break;
            case 'EV':
            case 'EF':
            case 'ES':
                selectedClass = "coralEconomy";
                break;
            default:
                selectedClass = "coralEconomy";
                break;
        }
    }

    var a = new IFramePopup({
        id: 'videopopup',
        src: '//www.etihad.com/lightboxes/flight-class-videos/?travelClass=' + selectedClass + '&aircraft=' + aircraftType + '#' + selectedClass,
        width: 654,
        height: 348
    });
    a.showDialog();
}

function adjustColumnsIfVIPSold() {
    var $tds = $('td.price.selected');
    // $('td.seats-remaining-adjust').removeClass('seats-remaining-adjust');

    $.each($tds, function (i, item) {
        var $item = $(item);
        //td height is variable - calculate the diff and adjust
        if ($item.find('.seats-remaining').length || $item.height() > 60) {
            var tdHeight = $item.height();
            var heightDiff = tdHeight - 60;
            var bkPosition = -3 + heightDiff;
            $item.attr('style', 'background-position:-14px ' + bkPosition + 'px !important;');
        }
    });
}

function clearAfopPaymentCookie() {
    setCookie('isAFOPPayment', 'false', 0);

    function setCookie(cname, cvalue, minutesToExpire) {

        try {
            var d = new Date();
            d.setTime(d.getTime() + (minutesToExpire * 60 * 1000));
            var expires = "expires=" + d.toGMTString();
            document.cookie = cname + "=" + cvalue + "; " + expires;
        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }

    }
}

function updateBookingSummary(msg) {
    try {
        var cart = WhiteLabel.getComponentModel('cart_1');
        var vipBrandlabel = cart.fareFamilyDataMap.TR.localizedData.en_GB.label;
        if ($('#cart_leg_undefined_fare-family-name').length > 0) {
            if ($('#cart_leg_undefined_fare-family-name').text() === vipBrandlabel) {
                if ($('#cart_leg_undefined_class-of-service').length > 0) {
                    $('#cart_leg_undefined_class-of-service').hide();
                }
            }
        }
        if ($('#cart_leg_0_fare-family-name').length > 0) {
            if ($('#cart_leg_0_fare-family-name').text() === vipBrandlabel) {
                if ($('#cart_leg_0_class-of-service').length > 0) {
                    $('#cart_leg_0_class-of-service').hide();
                }
            }
        }
        if ($('#cart_leg_1_fare-family-name').length > 0) {
            if ($('#cart_leg_1_fare-family-name').text() === vipBrandlabel) {
                if ($('#cart_leg_1_class-of-service').length > 0) {
                    $('#cart_leg_1_class-of-service').hide();
                }
            }
        }
    } catch (e) {
        if (typeof exLogger != 'undefined' && exLogger) {
            exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    }
}


function IsVIPRoute() {
    var vipSearchCookie = readSubCookie('SSW', 'VIPRoute');
    if (vipSearchCookie && vipSearchCookie === "true") {
        return true;
    } else {
        return false;
    }
}



function IsResidenceSelected() {
    var residenceCookie = readSubCookie('SSW', 'IsResidenceSelected');
    if (residenceCookie && residenceCookie === "true") {
        return true;
    } else {
        return false;
    }
}

function addBrasilPopUpEvent(msg) {

    var $table = msg.$table;
    var tableId = $table.attr('id');
    if (tableId) {
        YUI().use('node', 'event', function (Y) {
            var isMultiCity = (tableId.indexOf("multicity") > -1);
            var otpPopup = new OTPPopup();
            otpPopup.loadFlightsForOTPAirports(msg.componentModel, isMultiCity);
            var flightNumberClick = function () {
                Y.on('contentready', function () {
                    if (!(this.one('#otp'))) {
                        otpPopup.displayOTPMessage(this);
                    }
                }, ('#' + msg.popupName));
            }

            Y.on('click', flightNumberClick, ('#' + tableId + ' .flight-number'));
        });
    }
}


 
/// imported /// import SearchResultPopups.js

function FlightWarningPopup() {
}

FlightWarningPopup.prototype.Instantiate = function () {
    var flightsMatchCriteria = [

          {
              className: "umrahPopup",
              groupId: 4,
              flightNumbers: ["EY 2567", "EY 2568"],
              message: Resources('custom.js.all.popup.umrahMessage'),
              date: "2013/07/17 00:00:00",
              isMessageAddedToCurrentPopup: false
          },
          {
              className: "umrahPopup",
              groupId: 4,
              flightNumbers: ["EY 2599", "EY 2600"],
              message: Resources('custom.js.all.popup.umrahMessage'),
              date: "2013/08/14 00:00:00",
              isMessageAddedToCurrentPopup: false
          },

          {
              groupId: 6,
              flightNumbers: ["EY 601", "EY 603", "EY 602", "EY 604"],
              message: Resources('custom.js.all.popup.jetAUHJNB'),      // johannesbourg
              date: null,
              isMessageAddedToCurrentPopup: false
          },
          {
              groupId: 7,
              flightNumbers: ["EY 672", "EY 674", "EY 671", "EY 673"],
              message: Resources('custom.js.all.popup.jetAUHLOS'),      // lagos
              date: null,
              isMessageAddedToCurrentPopup: false
          }
    ];



    var checkedFlights = [];

    var checkFlights = function (itinParts) {
        if (!window.__hasDisplayedWetLease) {

            var content = "";
            var isWetLease = false;
            var classToAdd = "";

            var isMultidestinationSearch = $(".flights-multi").length > 0;
            if (isMultidestinationSearch) {
                classToAdd = checkFlightsMultiDestination();
            } else {
                classToAdd = checkFlightsSingleDestination();
            }

            if (isWetLease) {
                displayPopup(classToAdd);
            }
        }

        function displayPopup(className) {
            window.__hasDisplayedJetPopup = true;

            var headerText = Resources('custom.js.all.content.pleaseNote');
            var continueText = Resources('custom.js.all.content.continue');

            var dialog = new ConfirmationDialog({
                id: "jetPopup",
                header: headerText,
                content: content,
                continueText: continueText,
                className: className
            });

            dialog.showDialog(function () {
                window.__hasDisplayedJetPopup = false;
                isWetLease = false;
            });
        }

        function checkFlightsSingleDestination() {
            var addToCheckedFlights = null;
            var selectedRowIdentifier;
            var className = "";
            var shownGroups = [];
            content = "";
            for (var i = 0; i < itinParts.length; i++) {
                addToCheckedFlights = false;

                var selectedFlights = $(".flight-list-container:nth-child(" + (i + 1) + ") input[type='radio']:checked");
                if (selectedFlights.length > 0) {
                    var departureDate = ParseDateString(itinParts[i].date);

                    $.each(flightsMatchCriteria, function (index, matchCriteria) {
                        var flightDate = matchCriteria.date !== null ? ParseDateString(matchCriteria.date) : null;
                        var dateMatch = flightDate === null || +flightDate === +departureDate;

                        var selectedRow = selectedFlights.first().closest("tr");
                        var flightNumbers = selectedRow.find(".flight-number a").map(function () { return $(this).text(); }).get();
                        selectedRowIdentifier = flightNumbers.toString() + '_' + itinParts[i].date;

                        $.each(flightNumbers, function (a, flightNumber) {
                            var flightNumberMatch = $.inArray(flightNumber, matchCriteria.flightNumbers) >= 0;

                            // var rowId = selectedRow.attr("id");
                            if (flightNumberMatch && dateMatch) {
                                if (checkedFlights[i] == null || checkedFlights[i] != selectedRowIdentifier) {
                                    if (jQuery.inArray(matchCriteria.groupId, shownGroups) === -1) {    // if it's not shown before

                                        isWetLease = true;

                                        if (matchCriteria.className != null && className.indexOf(matchCriteria.className) === -1) {
                                            className += " " + matchCriteria.className;
                                        }

                                        if (content != null && content.length > 0) {
                                            content += "<br /><br />";
                                        }

                                        content += matchCriteria.message;

                                        shownGroups.push(matchCriteria.groupId);
                                    }
                                }

                                addToCheckedFlights = true;
                            }
                        });
                    });

                    if (addToCheckedFlights)
                        checkedFlights[i] = selectedRowIdentifier; // checkedRowId + '_' + itinParts[i].date;
                    else
                        checkedFlights[i] = null;
                }
            }

            return className;
        }

        function checkFlightsMultiDestination() {
            content = "";
            var className = "";
            var shownGroups = [];
            var currentFlightDetailsRow = $(".flights-multi input[type='radio']:checked").closest("tr");

            for (var i = 0; i < itinParts.length; i++) {
                itinParts[i].flightNumbers = currentFlightDetailsRow.find(".flight-number a").map(function () { return $(this).text(); }).get();
                currentFlightDetailsRow = currentFlightDetailsRow.next();
            }

            $.each(itinParts, function (index, currentPart) {
                $.each(flightsMatchCriteria, function (partIndex, matchCriteria) {

                    $.each(currentPart.flightNumbers, function (a, flightNumber) {
                        var flightNumberMatch = $.inArray(flightNumber, matchCriteria.flightNumbers) >= 0;
                        var itinerarayDepartureDate = ParseDateString(currentPart.date);
                        var criteriaDate = matchCriteria.date !== null ? ParseDateString(matchCriteria.date) : null;
                        var dateMatch = criteriaDate === null || +itinerarayDepartureDate === +criteriaDate;

                        if (flightNumberMatch && dateMatch) {
                            isWetLease = true;

                            if (matchCriteria.isMessageAddedToCurrentPopup === false && jQuery.inArray(matchCriteria.groupId, shownGroups) == -1) {
                                matchCriteria.isMessageAddedToCurrentPopup = true;

                                if (matchCriteria.className != null && className.indexOf(matchCriteria.className) === -1) {
                                    className += " " + matchCriteria.className;
                                }

                                shownGroups.push(matchCriteria.groupId);

                                if (content != null && content.length > 0) {
                                    content += "<br /><br />";
                                }

                                content += matchCriteria.message;
                            }
                        }
                    });
                });
            });

            $.each(flightsMatchCriteria, function (index, item) {
                item.isMessageAddedToCurrentPopup = false;
            });

            return className;
        }
    };


    var ibeData = WhiteLabel.getIbeData();

    if (ibeData.fullyPopulated !== 'undefined' && ibeData.fullyPopulated === true) {
        checkFlights(ibeData.itineraryParts);
    }

    WhiteLabel.addEventHandler(function (ibeData) {
        if (ibeData.fullyPopulated !== 'undefined' && ibeData.fullyPopulated === true) {
            checkFlights(ibeData.itineraryParts);
        }
    });
};

function WetLeasePopup() { }

WetLeasePopup.prototype.Instantiate = function () {
    var routes = ['KULAUH', 'AUHKUL'];
    content = null;

    var days = [1];

    window.__hasDisplayedWetLease = false;

    var isWetLease = false;

    var ibeData = WhiteLabel.getIbeData();

    var checkFlights = function (itinParts) {
        if (!window.__hasDisplayedWetLease) {
            for (var i = 0; i < itinParts.length; i++) {
                // Check to see if the departure airport is in the list

                var route = itinParts[i].departureAirport + itinParts[i].arrivalAirport;

                if ($.inArray(route, routes) > -1) {
                    // Route is potentially a wet lease route
                    // Now check the days of operation
                    var departureDate = ParseDateString(itinParts[i].date);

                    if ($.inArray(departureDate.getDay(), days) > -1) {
                        if ($(".flight-list-container:nth-child(" + (i + 1) + ") input[type='radio']:checked").length == 0) {
                            isWetLease = true;
                            content = Resources('custom.js.all.popup.codeShare.VAmessage');
                            break;
                        }
                    }
                }
            }

            if (isWetLease) {
                window.__hasDisplayedWetLease = true;
                var width = $(document).width();

                var top = 160;
                var left = (width / 3);
                var continueText = Resources('custom.js.all.content.continue');
                var headingText = Resources('custom.js.all.content.pleaseNote');

                var dialog = new ConfirmationDialog({
                    id: "codeshare1Popup",
                    top: top,
                    left: left,
                    header: headingText,
                    content: content,
                    continueText: continueText
                });

                dialog.showDialog(function () {
                    window.__hasDisplayedWetLease = false;
                    isWetLease = false;
                });
            }
        }
    };

    if (ibeData.fullyPopulated !== 'undefined' && ibeData.fullyPopulated === true) {
        checkFlights(ibeData.itineraryParts);
    }

    WhiteLabel.addEventHandler(function (ibeData) {
        checkFlights(ibeData.itineraryParts);
    });
}


/* End Result Search Page */

/* Cross cabin */

function CrossCabin() {
    this.economyRdbs = ['T', 'E', 'U', 'V', 'L', 'Q', 'M', 'K', 'P', 'H', 'B', 'Y']
    this.businessRdbs = ['W', 'D', 'C', 'J'];
    this.firstRdbs = ['R', 'A', 'F'];

    window.__choosenClass = null;
    window.__cabinClassPopupShow = false;
}

CrossCabin.prototype.Instanitate = function () {
    WhiteLabel.addEventHandler(function (ibeData) {
        var isCrossedCabin = false;

        // Check the object is populated
        if (ibeData.fullyPopulated !== undefined && ibeData.fullyPopulated !== false) {

            // get the selected fares
            var selectedFares = ibeData.selectedOffers;

            if (selectedFares !== null) {
                // Check to see if both parts are populated
                var numberOfBounds = selectedFares.length;
                var allBoundsBeenSelected = false;

                // check to see if the parts node is populated within each selectedFare.parts
                if (numberOfBounds == 2) {
                    if (selectedFares[0].parts != null && selectedFares[1].parts != null) {
                        allBoundsBeenSelected = true;
                    }
                }
                if (numberOfBounds == 1) {
                    if (selectedFares[0].parts != null) {
                        allBoundsBeenSelected = true;
                    }
                }

                if (allBoundsBeenSelected) {
                    for (var i = 0; i < selectedFares.length; i++) {
                        for (var j = 0; j < selectedFares[i].parts.length; j++) {
                            segments = selectedFares[i].parts[j].segments;

                            var lastCabin = '';

                            for (var k = 0; k < segments.length; k++) {
                                var cabin = segments[k].cabinClass;

                                if (lastCabin == '') {
                                    lastCabin = cabin;
                                }
                                else {
                                    if (lastCabin != cabin) {
                                        isCrossedCabin = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    // Show popup
                    if (window.__cabinClassPopupShow === false && isCrossedCabin) {
                        window.__cabinClassPopupShow = true;

                        var width = $(document).width(),
                            top = 200,
                            left = (width / 2) - 300,
                            content = Resources('custom.js.all.crossCabin.message'),
                            continueText = Resources('custom.js.all.content.continue'),
                            headingText = Resources('custom.js.all.content.pleaseNote');

                        var dialog = new ConfirmationDialog({
                            id: "crosscabinDialog",
                            top: top,
                            left: left,
                            header: headingText,
                            content: content,
                            continueText: continueText
                        });

                        dialog.showDialog(function () {
                            window.__cabinClassPopupShow = false;
                        });
                    }
                }
            }
        }
    });
}

/* End Cross cabin */

/* Start confirmation dialog 
options:
id          the id for the popup
left        number specifying the left position
top         number specifying the top position
header      the header text
content     the content
continue    the title for the ok button
*/

function ConfirmationDialog(options) {
    this.header = options.header;
    this.content = options.content;
    this.continueText = options.continueText;
    this.cancelText = options.cancelText;
    this.id = options.id;
    this.extraClass = options.className;
    this.hasButtonCancel = options.hasButtonCancel;
}

ConfirmationDialog.prototype = function () {

    var close = function (id) {
        $("#" + id).remove();
        $("#opacityScreen" + id).remove();
    };

    var center = function (id) {
        var modal = $('#' + id);
        var window_width = $(window).width();
        var window_height = $(window).height();
        var modal_height = modal.height();
        var modal_width = modal.width();
        var top = (window_height - modal_height) / 2;
        var left = (window_width - modal_width) / 2;

        modal.css({ 'top': top, 'left': left });
    };

    var showDialog = function (okClickFn) {
        var dialogId = this.id;

        var html =
            '<div class="confirmation-dialog ' + this.extraClass + '" id="' + this.id + '" style="display:none;">' +
                '<div class="container">' +
                    '<div class="heading"><h3>' + this.header + '</h3></div> ' +
                    '<div class="content"><p>' + this.content + '</p></div>' +
                    '<div class="button button-smaller align-right"> ' +
                        '<input type="button" class="translate send" id="' + this.id + 'Btn" value="' + this.continueText + '"/> ' +
                    '</div>' +
                '</div> ' +
            '</div>' +
            '<div id="opacityScreen' + this.id + '" class="opacityScreen">&nbsp;</div>';

        var $body = $('body');
        $body.append(html);


        if (this.hasButtonCancel) {
            var btnCancelHtml = '<div class="button button-smaller align-right"> ' +
                                '<input type="button" class="translate send" id="' + this.id + 'BtnCancel" value="' + this.cancelText + '"/> ' +
                            '</div>',
            btnCloseHtml = '<a class="container-close" href="#">Close</a>';

            $('#' + this.id).find('.heading').append(btnCloseHtml);
            $('#' + this.id).find('.container').append(btnCancelHtml);

            $('#' + this.id + 'BtnCancel').bind('click', function () {
                close(dialogId);
            });

            $('#' + this.id).find('.container-close').bind('click', function (e) {
                e.preventDefault();
                close(dialogId);
            });
        }


        center(this.id);

        $(window).resize(function () {
            center(dialogId);
        });

        $('#' + this.id).show();

        $('#' + this.id + 'Btn').bind('click', function () {
            close(dialogId);

            if (okClickFn != null && typeof okClickFn == "function") {
                okClickFn();
            }
        });
    };

    return {
        showDialog: showDialog
    };
}();

/* End Generic confirmation dialog */


/// imported /// import InsuranceAncillary.js
function InsuranceAncillary() {

}

InsuranceAncillary.prototype = function () {
    var displayedInsuranceDivID = "";
    var prevSelectedProduct = "";
    var tempIbeData = null;
    var yuiObj = null;
    var selectedDivObject = null;
    var originCountry = null;
    var passengerJSON = null;
    var currencyPrefixCode = null;
    var insuranceProductList = null;

    //Insurance region begin
    var showInsuranceProducts = function (Y) {
        var ibeData = WhiteLabel.getIbeData();
        yuiObj = Y;
        if (ibeData) {
            var listedAcillaries = WhiteLabel.getComponentModel("ancillary_1").ancillaryItems;
            var listedCartDetails = WhiteLabel.getComponentModel("cart_1");
            if (listedAcillaries && listedCartDetails
                && listedCartDetails.itineraryParts
                && listedCartDetails.itineraryParts.length > 0)
                getInsuranceMasterData(ibeData, listedAcillaries, listedCartDetails);
            
        }

    },

    hideAllExistingInsurance = function (displayedProductMasterDataText) {
        var masterDataFilteredList = displayedProductMasterDataText.split(",");
        $.each(masterDataFilteredList, function (index, value) {
            $("#" + value).hide();
        });

        rdoInsuranceProductClick(null, null);
    },

    insuranceDisplayAlgo = function (selectedInsuranceProduct, ibeData) {
        var listedProducts = new Array();
        var selectedFamilyProduct = new Array();
        selectedFamilyProduct = getInsurancePlanonAttribute(null, 'F', selectedInsuranceProduct);
        var isFamilyBooking = checkFamilyBooking(ibeData);
        if (selectedFamilyProduct.length > 0) {
            if (isFamilyBooking) {
                listedProducts = selectedFamilyProduct;
            }
            else {
                listedProducts = getTheHighestPlan(getInsurancePlanonAttribute(null, 'I', selectedInsuranceProduct));
            }
        }
        else {
            if (isFamilyBooking) {
                listedProducts = getTheHighestPlan(selectedInsuranceProduct);
            }
            else {
                listedProducts = getTheHighestPlan(selectedInsuranceProduct);
            }
        }
        return listedProducts;
    },

    checkFamilyBooking = function (ibeData) {

         var adultCount = ibeData.passengers.ADT;
         var childCount = ibeData.passengers.CHD;
         var infantCount = ibeData.passengers.INF;
         return adultCount == 2 && (childCount > 0 || infantCount > 0);
     },

    getTheHighestPlan = function (selectedInsuranceProduct) {
         //select the highest plan based price value among selected products.
         var highestPlan = new Array();
         var highestValue = 0;
         var currValue = 0;

         $.each(selectedInsuranceProduct, function (index, value) {
             currValue = parseFloat($("#" + value.ProductSubCode).find('.ancillary-price-before-add').find('.prices-amount').html());
             if (currValue > highestValue) {
                 highestValue = currValue;
                 if (highestPlan)
                     highestPlan.pop();
                 highestPlan.push(value);
             }
         });
         return highestPlan;
     },

    getInsurancePlanonAttribute = function (productSubCode, permissiblePassenger, selectedInsuranceProduct) {
         //select the appropriate insurance product from the displayed list depending on condition
         var retObj = new Array();
         $.each(selectedInsuranceProduct, function (index, value) {
             if (productSubCode) {
                 if (value.ProductSubCode == productSubCode) {
                     retObj.push(value);
                 }
             }
             else if (permissiblePassenger) {
                 if (permissiblePassenger == value.PermissiblePassenger) {
                     retObj.push(value);
                 }
             }
         });
         return retObj;
     },

    rdoInsuranceProductClick = function (divID, ibeData) {
         var listedCartDetails = WhiteLabel.getComponentModel("cart_1");
         $(".insurancePolicyTerms").hide();
         if (listedCartDetails.ancillaries.length > 0) {
             var insuranceAncillaryIndex = parseInt(getAncillaryIndex(listedCartDetails));
             if (insuranceAncillaryIndex >= 0) {
                 enableDisableProductRadioButton(false);
                 $("#AncillaryItemButtonRemove-" + listedCartDetails.ancillaries[insuranceAncillaryIndex].code).trigger("click");
             }
         }
         if (divID && ibeData) {
             tempIbeData = ibeData;
             enableDisableProductRadioButton(false);
             $("#AncillaryItemButtonAdd-" + divID).trigger("click");
             $(".insurancePolicyTerms").show();
         }
    },

    isHetrogenousTravelClass = function (listedCartDetails) {
        var travelClass = null;
        var isDifferentClass = false;
        if (listedCartDetails.itineraryParts) {
            $.each(listedCartDetails.itineraryParts, function (index, value) {
                if (value.segments) {
                    $.each(value.segments, function (segmentIndex, segmentObj) {
                        if (segmentObj.allClassOfService) {
                            if (travelClass != segmentObj.allClassOfService && travelClass != null)
                            {
                                isDifferentClass = true;
                                return false;
                            }
                            travelClass = segmentObj.allClassOfService;
                        }
                    });
                    if (isDifferentClass) return false;
                }
            });
        }
        return isDifferentClass;
    },

    createInsuranceContainerHtml = function (selectedDivObject, selectedInsuranceProduct, ibeData) {

         var headerText = $('<h4>').addClass('ancillary-name translate wasTranslated').html(Resources('Ancillary.insurance.span.productDescriptionHeader'));
         var divImageConatiner = $('<div>').addClass('ancillary-image ancillary-image-insurance');
         var divDescription = $('<div>').addClass('ancillary-description translate wasTranslated').html(
             getResourceByCountry('Ancillary.insurance.span.productDescription', originCountry));
         var rdoButtonHeader = $('<span>').html(getResourceByCountry('Ancillary.insurance.span.productSelectionHeader', originCountry)).addClass('ancillary-rdoHeader');
         var divContainer = $('<div>').attr('id', 'divInsuranceProductContainer').addClass('ancillary-item').append(headerText).append(divImageConatiner).append(divDescription).append(rdoButtonHeader);
         var divInsuranceColumn = $('<div>').addClass('insuranceProductColumn');
         var divInsuranceProduct = $('<div>').attr('id', 'divSelectedInsuranceList').addClass('insurace_item_list').append(divInsuranceColumn);

         $.each(selectedDivObject, function (index, value) {
             removeExcludedPassengerFromList(value.id, ibeData);
             var selectedProduct = getInsurancePlanonAttribute(value.id, null, selectedInsuranceProduct);
             var rdoInsuranceProduct = $('<input>').attr({ id: 'rdo' + selectedProduct[0].ProductSubCode, type: 'radio', name: 'insuranceProduct' });
             var spnInsuranceProductName = $('<span>').attr('id', 'spn' + selectedProduct[0].ProductSubCode).addClass('radio_text').html(
                 Resources('Ancillary.insurance.span.productBrandName') + ", " + Resources('Ancillary.insurance.span.productType.' + selectedProduct[0].ProductType));
             var lnkProductDetail = Resources('Ancillary.insurance.lnk.productDetails');
             var priceseparator = $('<span>').html(" - ");
             var price = parseFloat($("#" + value.id).find('.ancillary-price-before-add').find('.prices-amount').html());
             if ((selectedProduct[0].PermissiblePassenger != "F") && (ibeData.passengers.CHD > 0 || ibeData.passengers.INF > 0)) {
                 price = price * 2;
             }

             var spnPriceHtml = ibeData.currency === 'AED' ? ibeData.currency + " " + price : ibeData.currency + " " + price.toFixed(2);
             var spnPriceText = $('<span>').addClass('price_text').html(spnPriceHtml);
             var divSelectedInsuranceProduct = $('<div>').addClass('rowInsuranceProduct').append(rdoInsuranceProduct).append(spnInsuranceProductName).append(lnkProductDetail).append(priceseparator).append(spnPriceText);
             divInsuranceColumn.append(divSelectedInsuranceProduct);
             divInsuranceProduct.append(divInsuranceColumn);

             $(rdoInsuranceProduct).on("change", function () { if ($('#rdo' + selectedProduct[0].ProductSubCode).is(':checked')) { rdoInsuranceProductClick(value.id, ibeData); } });
         });


         var rdoNoInsuranceProduct = $('<input>').attr({ id: 'rdoNoInsurance', type: 'radio', name: 'insuranceProduct' });
         var spnNoInsuranceProductName = $('<span>').attr('id', 'spnNoInsurance').addClass('radio_text').html(Resources('Ancillary.insurance.rdo.noInsurance'));
         var divNoInsurance = $('<div>').attr('id', 'divNoInsurance').append(rdoNoInsuranceProduct).append(spnNoInsuranceProductName).addClass('rowInsuranceProduct');
         $(divInsuranceProduct).children().first('div').append(divNoInsurance);

         $(rdoNoInsuranceProduct).on("change", function () { rdoInsuranceProductClick(null, null) });

         var divTotalPrice = $('<div>').attr('id', 'divTotalPrice').addClass('productPrice');
         $(divInsuranceProduct).append(divTotalPrice);

         var spnPolicyTerms = $('<div>').html(Resources('Ancillary.insurance.span.productOptionFooter').replace('#', Resources('Ancillary.insurance.disclaimer.tnc')));
         var policyTermsCondition = $('<div>').append(spnPolicyTerms).addClass('insurancePolicyTerms');

         divContainer.append(divInsuranceProduct);
         $('#ancillary_1').find('.ancillary-component').append(divContainer).append(policyTermsCondition);
     },

    updatePaxListForInsurance = function () {
         var listedCartDetails = WhiteLabel.getComponentModel("cart_1");
         setTotalPrice(listedCartDetails);
         if (listedCartDetails.ancillaries.length > 0) {
             var insuranceAncillaryIndex = parseInt(getAncillaryIndex(listedCartDetails));
             if (insuranceAncillaryIndex >= 0)
                 var excludedPassengerCount = removeExcludedPassengerFromList(listedCartDetails.ancillaries[insuranceAncillaryIndex].code, tempIbeData);
         }
         else {
             if (tempIbeData)
                 $.each(selectedDivObject, function (index, value) { removeExcludedPassengerFromList(value.id, tempIbeData); });
             tempIbeData = null;
         }
         enableDisableProductRadioButton(true);
     },

    setTotalPrice = function (listedCartDetails) {
         $("#divTotalPrice").html('');
         if (listedCartDetails.ancillaries.length > 0) {
             var insuranceAncillaryIndex = parseInt(getAncillaryIndex(listedCartDetails));
             if (insuranceAncillaryIndex >= 0) {
                 var spnCurrency = $('<span>').html(currencyPrefixCode + " ").addClass('totalPriceCurrency');
                 var spnTotalAmount = listedCartDetails.ancillaries[insuranceAncillaryIndex].totalAsMoney.amount;
                 var spnPriceHtml = listedCartDetails.currencyCode === 'AED' ? parseInt(spnTotalAmount) : spnTotalAmount;
                 var spnPrice = $("<span>").html(spnPriceHtml);
                 $(spnPrice).addClass('totalPrice');
                 $("#divTotalPrice").append(spnCurrency).append(spnPrice);
             }
         }
     },

    removeExcludedPassengerFromList = function (divID, ibeData) {
         var isFamily = checkFamilyBooking(ibeData);
         var paxList = "";
         if (passengerJSON) {
             paxList = $("div#" + divID).find(".ancillary-pax-checked-true");
             $.each(passengerJSON, function (index, value) {
                 if ((value.PassengerType == "INF" && value.Age < 3)
                     || (value.PassengerType == "ADT" && value.Age > 960)) {
                     //'Child less than 3 months' or Adult greater than 80 years
                     if (paxList)
                         $(paxList[value.PassengerIndex]).removeClass("ancillary-pax-checked-true").addClass("ancillary-pax-checked-false");
                 }
             });
         }
         //select one memeber for family package
         if (isFamily && divID.substring(0, 1).toLowerCase() == "f") {
             paxList = $("div#" + divID).find(".ancillary-pax-checked-true");
             if (paxList) {
                 if (paxList.length > 1) {
                     $.each(paxList, function (index, value) {
                         if (index > 0)
                             $(paxList[index]).removeClass("ancillary-pax-checked-true").addClass("ancillary-pax-checked-false");
                     });
                 }
             }
         }
     },

    checkForAnyEligibiblePassenger = function (ibeData) {
        var nonEligiblePassengerCount = 0;
        if (passengerJSON) {
            $.each(passengerJSON, function (index, value) {
                if ((value.PassengerType == "INF" && value.Age < 3)
                    || (value.PassengerType == "ADT" && value.Age > 960)) {
                    //'Child less than 3 months' or Adult greater than 80 years
                    nonEligiblePassengerCount++;
                }
            });
        }
        return (ibeData.passengersInfo.length > nonEligiblePassengerCount) ? true : false;
    },

    enableDisableProductRadioButton = function (enanbleRadio) {
        var radioButtonList = $("#divSelectedInsuranceList").find("input[type=radio]");
        if (enanbleRadio) {
            $(radioButtonList).removeAttr('disabled');
        }
        else {
            $(radioButtonList).attr('disabled', true);
        }
    },

    loadRuletoSelectInsuranceProduct = function (ibeData, listedCartDetails, selectedDivObject, insuranceRuleData) {
         var originAirport = "";
         var productCodeToSelect = "";
         var preSelectionRule = insuranceRuleData.HasPreSelectionRule;
         $(".insurancePolicyTerms").hide();

         if (listedCartDetails.ancillaries.length > 0) {
             var insuranceAncillaryIndex = parseInt(getAncillaryIndex(listedCartDetails));
             if (insuranceAncillaryIndex >= 0)
                 productCodeToSelect = listedCartDetails.ancillaries[insuranceAncillaryIndex].code;
         }
         else if (preSelectionRule) {
             productCodeToSelect = selectedDivObject[0].id;
         }
         if (productCodeToSelect) {
             rdoInsuranceProductClick(productCodeToSelect, ibeData);
             $("#rdo" + productCodeToSelect).attr('checked', 'checked');
         }

     },

    getAncillaryIndex = function (listedCartDetails) {
         var retIndex = null;
         $.each(listedCartDetails.ancillaries, function (index, value) {
             if (insuranceProductList.indexOf(value.code) >= 0)
                 retIndex = index;
         });
         return retIndex;
     },

    cloneContinueButton = function () {

         var divCloneButton = $('<div>').addClass('button clone');
         var btnCloneSubmit = $('<input>').attr({ type: 'button', value: Resources('label.sbmt.continue') }).addClass('button');
         divCloneButton.append(btnCloneSubmit);
         var divButtonHolder = $('#sbmt_1 .buttons');
         var divOriginalButton = divButtonHolder.find('div .button');
         divOriginalButton.addClass('hidden');
         divButtonHolder.append(divCloneButton);
         divCloneButton.on("click", function (e) {
             var selectedInsurance = $('input[type=radio]:checked', '#divSelectedInsuranceList');
             var isNoOptionSelected = $('#rdoNoInsurance:checked', '#divSelectedInsuranceList').length > 0;
             if (selectedInsurance.length < 1 || isNoOptionSelected) {
                 var continueText = Resources('custom.js.all.content.continue');
                 var cancelText = Resources('custom.js.all.content.cancel');
                 var title = Resources('Ancillary.insurance.reminderPopup.title');
                 var message = Resources('Ancillary.insurance.reminderPopup.message');
                 var dialog = new ConfirmationDialog({
                     id: 'insuranceConfirmation',
                     header: title,
                     content: message,
                     continueText: continueText,
                     cancelText: cancelText,
                     hasButtonCancel: true,
                     className: 'cancel'
                 });

                 dialog.showDialog(
                     function () {
                         divOriginalButton.trigger("click");
                     });
             }
             else {
                 loadDisclaimerPopup(divOriginalButton);
             }
         });
     },

    getOriginCountry = function () {
         var ibeData = WhiteLabel.getIbeData();
         var airportCountry = '';
         yuiObj.use('wl-airport-list', function () {
             airportCountry = yuiObj.airports[ibeData.itineraryParts[0].departureAirport].country;
         });
         return airportCountry;
     },

    loadDisclaimerPopup = function (divOriginalButton) {
         var disclaimerHeader = Resources('Ancillary.insurance.disclaimer.header'),
            disclaimerBody = getResourceByCountry('Ancillary.insurance.disclaimer.body', originCountry),
            TnCLink = $('<a>').html(Resources('Ancillary.insurance.disclaimer.tnc.linkText')).attr({ target: '_new', href: Resources('Ancillary.insurance.disclaimer.tnc') }),
            disclaimerfooter = Resources('Ancillary.insurance.disclaimer.footer'),
            continueText = Resources('Ancillary.insurance.disclaimer.continue'),
            cancelText = Resources('Ancillary.insurance.disclaimer.cancel');

         var dialog = new DisclaimerDialog({
             id: 'insuranceConfirmation',
             header: disclaimerHeader,
             continueText: continueText,
             cancelText: cancelText,
             disclaimerBody: disclaimerBody,
             footer: disclaimerfooter,
             TnCLink: TnCLink,
             className: 'discliamer'
         });

         dialog.showDialog(
             function () {
                 divOriginalButton.trigger("click");
             }, function () {
                 rdoInsuranceProductClick(null, null);
                 divOriginalButton.trigger("click");
             });
     },

    checkCodeSharing = function (listedCartDetails) {
        var isCodeShare = false;
         if (!Etihad.config.enableCodeShareShare) {
             if (listedCartDetails.itineraryParts) {
                 $.each(listedCartDetails.itineraryParts, function (index, value) {
                     if (value.segments) {
                         $.each(value.segments, function (segmentIndex, segmentObj) {
                             var isNonEYCarrierCode = false;
                             var isEYAirlineCode = false;

                             if (segmentObj.operatingCarrier && !isNonEYCarrierCode) {
                                 $.each(segmentObj.operatingCarrier, function (carrirIndex, carrierObj) {
                                     if (carrierObj && carrierObj.toLowerCase() != "ey") {
                                         isNonEYCarrierCode = true;
                                         return false;
                                     }
                                 });
                             }
                             if (segmentObj.airlineCodes && !isEYAirlineCode) {
                                 $.each(segmentObj.airlineCodes, function (airlineCodeIndex, airlineCodeObj) {
                                     if (airlineCodeObj && airlineCodeObj.toLowerCase() == "ey") {
                                         isEYAirlineCode = true;
                                         return false;
                                     }
                                 });
                             }
                             if (isNonEYCarrierCode && isEYAirlineCode) { isCodeShare = true; return false; }
                         });
                     }
                     if (isCodeShare) return false;
                 });
             }
         }
         return isCodeShare;
    },

    checkEYMarketingCarrier = function (listedCartDetails) {
        var isNonEYOperational = false;
        if (listedCartDetails.itineraryParts) {
            $.each(listedCartDetails.itineraryParts, function (index, value) {
                if (value.segments) {
                    $.each(value.segments, function (segmentIndex, segmentObj) {
                        var isNonEYAirlineCarrier = false;
                        var isNonEYAirlineMarket = false;

                        if (segmentObj.operatingCarrier) {
                            $.each(segmentObj.operatingCarrier, function (carrirIndex, carrierObj) {
                                if (carrierObj && carrierObj.toLowerCase() != "ey") {
                                    isNonEYAirlineCarrier = true;
                                    return false;
                                }
                            });
                        }
                        if (segmentObj.airlineCodes) {
                            $.each(segmentObj.airlineCodes, function (airlineCodeIndex, airlineCodeObj) {
                                if (airlineCodeObj && airlineCodeObj.toLowerCase() != "ey") {
                                    isNonEYAirlineMarket = true;
                                    return false;
                                }
                            });
                        }
                        if (isNonEYAirlineCarrier && isNonEYAirlineMarket) { isNonEYOperational = true; return false; }
                    });
                }
                if (isNonEYOperational) return false;
            });
        }
        return !(isNonEYOperational);
    }

    getResourceByCountry = function (textKey, countryCode) {
         var countryTextKey = textKey + '.' + countryCode;
         return Resources(countryTextKey) === undefined ? Resources(textKey) : Resources(countryTextKey);
     },

    getInsuranceMasterData = function (ibeData, listedAcillaries, listedCartDetails) {
         var requestUrl = buildServiceUrl(listedCartDetails);
         var xDomainSupported = crossDomainAjaxSupported();
         var dataType = xDomainSupported ? 'json' : 'jsonp';

         $.ajax({
             type: "GET",
             dataType: dataType,
             cache: false,
             url: requestUrl,
             success: function (jsonObj) {
                 insuranceProductList = jsonObj.InsuranceProductCodes;
                 hideAllExistingInsurance(jsonObj.InsuranceProductCodes);
                 if (jsonObj.Status == 'Success') {
                     if(isRegularInsuranceEnable() || isMYBInsuranceEnable() || isMTOInsuranceEnable()){
                         currencyPrefixCode = ibeData.currency;
                         var isCodeShare = checkCodeSharing(listedCartDetails);
                         var isEYOperatedMarketed = checkEYMarketingCarrier(listedCartDetails);
                         var isHetrogenousCabinClass = isHetrogenousTravelClass(listedCartDetails);
                         var passengerJSONText = yuiObj.Cookie.get("passengerDOB_" + getUrlExecutionCodeInitial());
                         if (passengerJSONText)
                             passengerJSON = JSON.parse(passengerJSONText);
                         var isEligiblePassenger = checkForAnyEligibiblePassenger(ibeData);

                         if (!isCodeShare && isEligiblePassenger && jsonObj.IsAPREligible
                             && !isHetrogenousCabinClass && isEYOperatedMarketed) {
                             populateInsuranceProduct(ibeData, listedCartDetails, listedAcillaries, jsonObj);
                         }
                     }
                 }
             },
             error: function (errorMsg) {
                 if(window.console)
                    console.error(errorMsg);
             }
         });
    },
   
    isMYBInsuranceEnable = function ()
    {
        return (sabre.config.pageCode == etihad.pageCodes.ExchangeExtrasPage && Etihad.config.enableMYBInsurance);
    },

    isMTOInsuranceEnable = function () {
        return (sabre.config.pageCode == etihad.pageCodes.UpdateSeatsAncillaryPage && Etihad.config.enableMTOInsurance);
    },

    isRegularInsuranceEnable = function () {
        return (sabre.config.pageCode == etihad.pageCodes.ExtrasPage);
    }

    buildServiceUrl = function (listedCartDetails) {
        var serviceUrl = externalResourcesConfigUrls.WebModuleUrl + '/InsuranceService.svc';
        serviceUrl += "/" + createServiceUrl(listedCartDetails);
        return serviceUrl;
    },

    createServiceUrl = function (listedCartDetails) {
     var retVal = null;
     if (listedCartDetails && listedCartDetails.itineraryParts
         && listedCartDetails.itineraryParts.length > 0) {
         var depatureDateTime;
         var departureAirportCode;
         var arrivalDateTime;
         var arrivalAirportCode;
         var isMTO = (sabre.config.pageCode == etihad.pageCodes.UpdateSeatsAncillaryPage);
         var iteneraryObj = (isMTO) ? listedCartDetails.originalItineraryParts : listedCartDetails.itineraryParts;
         var itineraryLength = iteneraryObj.length;

         if (iteneraryObj[0].segments[0]) {
             if (isMTO) {
                 depatureDateTime = formatDate($.trim(iteneraryObj[0].segments[0].departure));
                 departureAirportCode = iteneraryObj[0].segments[0].origin.code;
             }
             else {
                 depatureDateTime = formatDate($.trim(iteneraryObj[0].segments[0].departureDate));
                 departureAirportCode = iteneraryObj[0].segments[0].departureCode;
             }
         }

         if ((listedCartDetails.tripType).toLowerCase() == 'round_trip'
           || (listedCartDetails.tripType).toLowerCase() == 'multi_city') {
             var segmentsLength = iteneraryObj[itineraryLength - 1].segments.length;
             if (iteneraryObj[itineraryLength - 1].segments[segmentsLength - 1]) {
                 if (isMTO) {
                     arrivalDateTime = formatDate($.trim(iteneraryObj[itineraryLength - 1].segments[segmentsLength - 1].arrival));
                     arrivalAirportCode = iteneraryObj[itineraryLength - 1].segments[segmentsLength - 1].destination.code;
                 }
                 else {
                     arrivalDateTime = formatDate($.trim(iteneraryObj[itineraryLength - 1].segments[segmentsLength - 1].arrivalDate));
                     arrivalAirportCode = iteneraryObj[itineraryLength - 1].segments[segmentsLength - 1].arrivalCode;
                 }
             }
         }
         else {
             var onewayTripSegmentLength = iteneraryObj[0].segments.length;
             if (iteneraryObj[0].segments[onewayTripSegmentLength - 1]) {
                 if (isMTO) {
                     arrivalDateTime = formatDate($.trim(iteneraryObj[0].segments[onewayTripSegmentLength - 1].arrival));
                     arrivalAirportCode = iteneraryObj[0].segments[onewayTripSegmentLength - 1].destination.code;
                 }
                 else {
                     arrivalDateTime = formatDate($.trim(iteneraryObj[0].segments[onewayTripSegmentLength - 1].arrivalDate));
                     arrivalAirportCode = iteneraryObj[0].segments[onewayTripSegmentLength - 1].arrivalCode;
                 }
             }
         }
         retVal = encodeURIComponent(departureAirportCode) + "/" + encodeURIComponent(depatureDateTime) + "/" + encodeURIComponent(arrivalAirportCode) + "/" + encodeURIComponent(arrivalDateTime);
     }
     return retVal;
 },

    formatDate = function (formatDate) {
     return (formatDate.replace(/\//g, '-').replace(/:/g, '-').replace(' ', '-'));
 },

    crossDomainAjaxSupported = function () {
        return ($.support.cors);
    },

    populateInsuranceProduct = function (ibeData, listedCartDetails, listedAcillaries, insuranceRuleData) {

         var displayedProductMasterDataText = insuranceRuleData.InsuranceProductCodes;
         var selectedInsurance = "";
         var selectedInsuranceProduct = new Array();
         var listedProducts = new Array();
         var insuranceProductMasterData = insuranceRuleData.InsuranceProductCollection;

         $.each(listedAcillaries, function (index, value) {
             $.each(insuranceProductMasterData, function (indexValue, objectValue) {
                 if (value && objectValue) {//ie 8 requires this checking explicitly
                     if (objectValue.ProductSubCode === value.code) {
                         selectedInsuranceProduct.push(objectValue);
                         return false;
                     }
                 }
             });
         });


         if (selectedInsuranceProduct.length > 0) {
             //Insurance Algo
             listedProducts = insuranceDisplayAlgo(selectedInsuranceProduct, ibeData);
             //Insurance Algo

             //Display selected insurance begin
             if (listedProducts) {
                 var selectedInsuranceCount = 0;
                 var ancillaryComponentList = $("div.ancillary-component>div");
                 selectedDivObject = new Array();
                 $.each(listedProducts, function (index, value) {
                     $.each(ancillaryComponentList, function (indexValue, objValue) {
                         //check for insurance product
                         if (displayedProductMasterDataText.indexOf(objValue.id) >= 0) {
                             if (value.ProductSubCode == objValue.id) {
                                 selectedDivObject.push(objValue);
                             }
                         }
                     });
                 });

                 if (selectedDivObject) {
                     //display selected insurance with radio
                     originCountry = getOriginCountry();
                     cloneContinueButton();
                     createInsuranceContainerHtml(selectedDivObject, selectedInsuranceProduct, ibeData);
                     loadRuletoSelectInsuranceProduct(ibeData, listedCartDetails, selectedDivObject, insuranceRuleData);

                     //register 'updatePaxListForInsurance' method with event bus
                     bus.subscribe('cartUpdatedForInsurance', updatePaxListForInsurance);
                     if (sabre.config.global.flowType === 'EXCHANGE')
                     {                        
                         EventBusAPI.registerHandler('ajax-finished-cart-updatePriceWithAncillary', function () {
                             var msg = { name: 'cartUpdatedForInsurance' };
                             bus.publish(msg);
                         });
                     }
                     else
                     {                      
                         EventBusAPI.registerHandler('cart:cart-updated-with-seats-price', function () {
                             var msg = { name: 'cartUpdatedForInsurance' };
                             bus.publish(msg);
                         });
                     } 
                 }
             }
         }
     };
    //Insurance region end

    return {
        showInsuranceProducts: showInsuranceProducts
    };
}();

function DisclaimerDialog(options) {
    this.header = options.header;
    this.subHeader = options.subHeader;
    this.continueText = options.continueText;
    this.cancelText = options.cancelText;
    this.id = options.id;
    this.extraClass = options.className;
    this.disclaimerBody = options.disclaimerBody;
    this.footer = options.footer;
    this.TnCLink = options.TnCLink;
}

DisclaimerDialog.prototype = function () {

    var close = function (id) {
        $("#" + id).remove();
        $("#opacityScreen" + id).remove();
    };

    var center = function (id) {
        var modal = $('#' + id);
        var window_width = $(window).width();
        var window_height = $(window).height();
        var modal_height = modal.height();
        var modal_width = modal.width();
        var top = (window_height - modal_height) / 2;
        var left = (window_width - modal_width) / 2;

        modal.css({ 'top': top, 'left': left });
    };

    var showDialog = function (okClickFn, noClickFn) {
        var dialogId = this.id,
            divDialog = $('<div>').attr({ id: this.id }).addClass('confirmation-dialog ' + this.extraClass).css('display', 'none'),
            divDisclaimerContainer = $('<div>').addClass('disclaimers'),
            divDisclaimerHeader = $('<div>').addClass('header').text(this.header),
            divDisclaimerBody = $('<div>').addClass('body').html(this.disclaimerBody),
            divDisclaimerFooter = $('<div>').addClass('footer').text(this.footer),
            divDialogButtons = $('<div>').addClass('dialogButtons'),
            divOkButton = $('<div>').addClass('button button-smaller'),
            btnOk = $('<input>').attr({ type: 'button', value: this.continueText, id: (this.id + 'Btn') }).addClass('translate send'),
            divCancelButton = $('<div>').addClass('button button-smaller'),
            btnCancel = $('<input>').attr({ type: 'button', value: this.cancelText, id: (this.id + 'BtnCancel') }).addClass('translate send');


        divDisclaimerFooter.append(this.TnCLink);

        divOkButton.append(btnOk);
        divCancelButton.append(btnCancel);
        divDialogButtons.append(divOkButton);
        divDialogButtons.append(divCancelButton);

        divDisclaimerContainer.append(divDisclaimerHeader);
        divDisclaimerContainer.append(divDisclaimerBody);
        divDisclaimerContainer.append(divDisclaimerFooter);
        divDisclaimerContainer.append(divDialogButtons);

        divDialog.append(divDisclaimerContainer);

        var divOpacity = $('<div>').attr({ id: 'opacityScreen' + this.id }).addClass('opacityScreen');

        var $body = $('body');

        $body.append(divDialog);
        $body.append(divOpacity);

        center(this.id);

        $(window).resize(function () {
            center(dialogId);
        });

        $('#' + this.id).show();

        $('#' + this.id + 'Btn').bind('click', function () {
            close(dialogId);

            if (okClickFn != null && typeof okClickFn == "function") {
                okClickFn();
            }
        });
        $('#' + this.id + 'BtnCancel').bind('click', function () {
            close(dialogId);

            if (noClickFn != null && typeof noClickFn == "function") {
                noClickFn();
            }
        });
    };

    return {
        showDialog: showDialog
    };
}();


/// imported /// import ExtraPage.js

/* Extra Page */

function ExtraPage() { }

ExtraPage.prototype = function () {

    var cloneSubmitButton = function () {
        // Get a local scope to stop expensive crossing of the DOM
        var $pageContainer = $('#cnt_2'),
            formUrl = $('#form_sbmt_1', $pageContainer).attr('action');
        // Add the new button
        $('<div id="smbt_1_new" class="component sbmt" style="float: left; padding: 0px 0px 20px; width:693px"><form id="cloneform_sbmt_1" action="' + formUrl + '" method="POST"><div class="componentContentHolder ftl-created rendered"><div class="buttons clear-left"><div class="button"><input class="hidden" type="hidden" value="" name="_eventId_next"><input id="btn-search_clone" class="button translate wasTranslated" type="submit" value="Continue" data-wl-translate="label.sbmt.continue"></div></div></div><input type="hidden" value="sbmt" name="componentTypes"></form></div>').insertAfter('#customhtmlAncillariesText');

        $('#btn-search_clone', $pageContainer).bind('click', function () {
            $(this).addClass('disabled');
        });
    };

    var removeWeightBaggage = function () {
        var $baggagePieces = $('#BG_PCS'),
                $baggageWeight = $('#BG_WGT');

        if ($baggagePieces.length > 0 && $baggageWeight.length > 0) {
            // Hide weight
            $baggageWeight.hide();
        }
    };

    return {
        cloneSubmitButton: cloneSubmitButton,
        removeWeightBaggage: removeWeightBaggage
    };
}();




/// imported /// import AVSSwitch.js
var AVSSwitch = function () {

};

AVSSwitch.prototype = function () {

    var crossDomainAjaxSupported = function () {

        return ($.support.cors);
    },

    autoAVSFieldDisplay = function (cardNumber) {
        var BINNum = cardNumber.substr(0, 6);
        if ($.inArray(BINNum, avsServiceArray) < 0) {
            avsServiceArray.push(BINNum);
            var xDomainSupported = crossDomainAjaxSupported();
            var Url = externalResourcesConfigUrls.WebModuleUrl + '/AVSVerification.svc/' + BINNum;
            var dataType = xDomainSupported ? 'json' : 'jsonp';
            $.ajax({
                type: 'GET',
                dataType: dataType,
                url: Url,
                cache: false,
                jsonp: 'callback',
                success: function (data) {
                    avsServiceArray.splice($.inArray(data.BinNumber, avsServiceArray), 1);
                    processAVSResult(data);
                },
                error: function (xhr, txtStat, errThrown) {
                    avsServiceArray.splice($.inArray(BINNum, avsServiceArray), 1);
                    if (window.console) { console.log('BIN LookUp ' + BINNum + ': Error') };
                }
            });
        }
    },

     processAVSResult = function (resultObj) {

         if (resultObj.Result.toUpperCase() === 'OK') {
             var creditCardNumber = getUnMaskedText($(creditCardSelector).val());
             var firsrSixDigit = creditCardNumber.replace('-', '').substring(0, 6);
             if (resultObj.BinNumber === firsrSixDigit) {
                 var scope = $('.payment-details.credit-card-form.multi-fop-details');
                 applyCountryAddressCC(resultObj.CountryCode, scope);
             }
             if (window.console) { console.log('BIN LookUp ' + resultObj.BinNumber + ': Success') };
         }
         if (resultObj.Result.toUpperCase() === 'FAILED') {
             if (window.console) { console.log('BIN LookUp ' + resultObj.BinNumber + ': Failed') };
         }
     },

     getCardType = function (cardNumber) {

         var cardCode = '';
         cardStartNumber = cardNumber.substr(0, 2);
         if (cardStartNumber === '34' || cardStartNumber === '37') {
             cardCode = 'ax';
         } else if (cardStartNumber.charAt(0) === '4') {
             cardCode = 'vi';
         } else if (cardStartNumber.charAt(0) === '5') {
             cardCode = 'ca';
         } else if (cardStartNumber === '35') {
             cardCode = 'jb';
         } else if (cardStartNumber.charAt(0) === '1') {
             cardCode = 'tp';
         } else if (cardStartNumber === '30' || cardStartNumber === '36' || cardStartNumber === '38') {
             cardCode = 'dc';
         }
         return cardCode;
     },

     applyCountryAddressCC = function (cs, scope) {
         //If issuing country is USA, United Kingdom or Canada; we will show the AVS fields.
         var address1 = $('input[name="selectedCards[0].billingData.street1"]', scope).parent().parent();
         var postcode = $('input[name="selectedCards[0].billingData.zipCode"]', scope).parent();

         if (cs == 'GB' || cs === 'US' || cs === 'CA') {
             $('select[name="selectedCards[0].billingData.country"]').val(cs);
             $('select[name="selectedCards[0].billingData.country"]').css({ display: 'none' });
             var txtCountry = $('<input/>').attr({ type: 'text', name: 'CountryTextBox', readonly: 'true', id: 'txtCountry', value: $('[name="selectedCards[0].billingData.country"] option:selected', scope).text() });
             $(txtCountry).addClass('country-text-field');
             $('select[name="selectedCards[0].billingData.country"]').closest("div").append($(txtCountry));
             $(address1).css({ display: 'block' }).children().css({ display: 'inline-block' });
             $(postcode).css({ display: 'block' });
         } else {
             $(address1).css({ display: 'none' }).children().css({ display: 'none' });
             $(postcode).css({ display: 'none' });
         }
     };

    return {
        autoAVSFieldDisplay: autoAVSFieldDisplay,
        getCardType: getCardType
    };
}();



/// imported /// import CreditCardsSection.js
function CreditCardsSection() {
    window.__paymentPageAdded = false;
}

CreditCardsSection.prototype = function() {
    var incorrectCardNumber = false;
    var invalidCardNumber = false;

    var selectFirstCreditCard = function() {
        $('.fop-item.credit-card-item input[type=radio]:first').click();
    },
        getNode = function(name, node) {
        var n = node.one('[name="' + name + '"]');
        if (!n) {
            var elements = document.getElementsByName(name);
            if (elements.length > 0) {
                n = node.one("#" + elements[0].id);
            }
        }
        return n;
    },
        updateId = function(node) {
        if (node.hasAttribute('id')) {
            node.set('id', node.get('id') + '_clone');
        }
    },
        cloneNode = function(n) {
        if (n == null) return null;
        var n2 = n.cloneNode(true);
        updateId(n2);
            n2.all('div,input,select').each(function(node) {
            updateId(node);
        });
            n2.all('label').each(function(node) {
            if (node.hasAttribute('for')) {
                node.setAttribute('for', node.getAttribute('for') + '_clone');
            }
        });
        n2.purge(true);
        return n2;
    },
        rules = function(Y) {
        return Y.JSON.parse('{"ognlExpression":"selectedCards","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"required","isRequiredValidationCondition":null,"fieldValidator":{"rules":[{"ognlExpression":"cardNumber","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"cardNumberRequired","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"cardNumber.regexp","minAttributeName":"cardNumber.min","maxAttributeName":"cardNumber.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"nameOnCard","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"nameOnCardRequired","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"nameOnCard.regexp","minAttributeName":"nameOnCard.min","maxAttributeName":"nameOnCard.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"expDate","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"expDateRequired","isRequiredValidationCondition":null,"fieldValidator":{"yearUpperOffsetAttributeName":"creditCardExpiry.yearUpperOffset","yearLowerOffsetAttributeName":"creditCardExpiry.yearLowerOffset","checkMonthInRangeAttributeName":"creditCardExpiry.checkMonthInRange","ignoreDayAttributeName":"creditCardExpiry.ignoreDay","dateInFutureAttributeName":"creditCardExpiry.dateInFuture","type":"ExtendedDateFieldValidator"},"scope":"BOTH"},{"ognlExpression":"cvcNumber","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"cvcNumberRequired","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":true,"inlineContextValue":"cvc","regexpAttributeName":"cvc.regexp","minAttributeName":"cvc.min","maxAttributeName":"cvc.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.street1","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.street1Required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"street.regexp","minAttributeName":"street.min","maxAttributeName":"street.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.street2","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.street2Required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"street.regexp","minAttributeName":"street.min","maxAttributeName":"street.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.city","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.cityRequired","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"city.regexp","minAttributeName":"city.min","maxAttributeName":"city.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.province","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.provinceRequired","isRequiredValidationCondition":null,"fieldValidator":{"optionSetPropertyName":"province.options","type":"OptionSetValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.zipCode","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.zipCodeRequired","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"zipCode.regexp","minAttributeName":"zipCode.min","maxAttributeName":"zipCode.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"billingData.country","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"billingData.countryRequired","isRequiredValidationCondition":null,"fieldValidator":{"optionSetPropertyName":"country.options","type":"OptionSetValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.email","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.email.required","isRequiredValidationCondition":null,"fieldValidator":{"type":"EmailFieldValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.emailConfirm","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.emailConfirm.required","isRequiredValidationCondition":null,"fieldValidator":{"comparisonFieldExpression":"purchaserContactInfo.email","comparisonFieldLabel":"label.payc.email.comparisonNoMatch","type":"TextFieldComparisonValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.phoneType","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.phoneType.required","isRequiredValidationCondition":null,"fieldValidator":{"optionSetPropertyName":"phoneType.options","type":"OptionSetValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.phoneNumber.countryCode","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.phoneNumber.countryCode.required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"phoneCountryCode.regexp","minAttributeName":"phoneCountryCode.min","maxAttributeName":"phoneCountryCode.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.phoneNumber.areaCode","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.phoneNumber.areaCode.required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"phoneAreaCode.regexp","minAttributeName":"phoneAreaCode.min","maxAttributeName":"phoneAreaCode.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.phoneNumber.number","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.phoneNumber.number.required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"phoneNumber.regexp","minAttributeName":"phoneNumber.min","maxAttributeName":"phoneNumber.max","type":"TextFieldValidator"},"scope":"BOTH"},{"ognlExpression":"purchaserContactInfo.phoneNumber.extension","overrideRequiredAttribute":null,"validationCondition":null,"isRequiredAttributeName":"purchaserContactInfo.phoneNumber.extension.required","isRequiredValidationCondition":null,"fieldValidator":{"inlineWithContext":false,"inlineContextValue":null,"regexpAttributeName":"phoneExtension.regexp","minAttributeName":"phoneExtension.min","maxAttributeName":"phoneExtension.max","type":"TextFieldValidator"},"scope":"BOTH"}],"type":"CollectionValidator"},"scope":"BOTH"}');
    },
        validationRules = function(Y) {
        return {
            payc: { type: 'PaymentComponentModelValidator', rules: [rules(Y)] }
        };
    },
        resetCountrySelection = function(Y) {
        var $paymentForm = $('.payment-details.credit-card-form.multi-fop-details');
        var $countryElm = $('[name="selectedCards[0].billingData.country"]', $paymentForm);
        var countryValue = $($countryElm).val();

        if ($.trim(countryValue) !== "")
            // Set the country code so it doesn't reset
            $countryElm.attr("data-wl-value", countryValue);

    },
        initializeValidations = function(code, Y) {
        try {
            var node = Y.one('.payment-details.credit-card-form.multi-fop-details');
            getNode('cardType.code', node).set('value', code);
            var config = { payc: sabre.config.satConfiguration.formsOfPaymentConfiguration.cardsConfigForFront[code].configuration };
            var billingData = config.payc.billingData;
            billingData.cityRequired = true;
            billingData.zipCodeRequired = true;
            billingData.street1Required = true;
            resetCountrySelection(Y);
            Y.wlValidation.initializeForPartial('payc', validationRules(Y)['payc'], config, node);

            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }

    },
        reinitializeValidations = function(code, Y) {
        Y.wlValidation.errorRendering.hideAllOverlays();
        initializeValidations(code, Y);
    },
        cardCode = function(Y) {
        return getNode('selectedCards[0].cardType.code', Y).get('value');
    },
        showErrors = function(names, errors, Y) {
            Y.Array.each(names, function(e) { Y.wlValidation.errorRendering.showError(Y.one('[name="' + e + '"]'), errors); });
    },
        hideErrors = function(names, Y) {
            Y.Array.each(names, function(e) { Y.wlValidation.errorRendering.hideError(Y.one('[name="' + e + '"]')); });
    },
        resetValidations = function(names, container, Y) {
        Y.wlValidation.resetValidation('payc', names, container);
    },
        addValidations = function(Y) {
        Y.translations = Y.translations || { lang: sabre.config.global.language };
            Y.use('wl-lang-' + Y.translations.lang, function(A) {
            try {
                initializeValidations(cardCode(Y), Y);
                Y.one('#cardNumberEnabled_clone label').addClass('field-required');
                Y.on('blur', Y.wlValidation.validate, Y.one('.payment-details.credit-card-form.multi-fop-details'));
                } catch(err) {
                if (typeof exLogger != 'undefined' && exLogger)
                    exLogger.log(err, exLogger.ErrorLevel.Error);
            }
        });
    },
        cardNumberValidations = function(e, Y) {

        try {
            var v = e.currentTarget.get('value').replace(/-/g, '');
            var v2 = v.replace(/_/g, '');


            //******** MOD 10 Check   -   User_story_Mod10Check_v0.2.docx
            if (v2.length == v.length && v2.length > 8) {
                invalidCardNumber = !isValidLuhn(v2);

                if (invalidCardNumber) {
                    showErrors(['formattedCardNumber'], [Resources('custom.js.content.errorMsg.IncorrectCard')], Y);
                    e.stopPropagation();
                    return;
                }
            }
            //************************************************

            if (v2.substr(0, 1) === '4' && v2.length > 12 && v2.length < 17) {
                hideErrors(['formattedCardNumber'], Y);
                e.stopPropagation();
                } else {
                if (v2.length === 0 || v2.length !== v.length) {

                    var msg = v2.length === 0 ? 'validation.field.required' : 'validation.text.tooShort';

                    if (incorrectCardNumber && v2.length > 0)
                        showErrors(['formattedCardNumber'], [Resources('custom.js.content.errorMsg.IncorrectCard')], Y);
                    else
                        showErrors(['formattedCardNumber'], [msg], Y);
                    } else {

                    if (incorrectCardNumber) {
                        showErrors(['formattedCardNumber'], [Resources('custom.js.content.errorMsg.IncorrectCard')], Y);
                    } else {
                        hideErrors(['formattedCardNumber'], Y);
                    }

                }
                e.stopPropagation();
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        creditCardSectionGeneratedBySSW = function(Y) {
        var sabreCCDiv = document.getElementById("multi-fop-details-0");
        return (sabreCCDiv.children.length > 0);
    },
        serverSideErrors = function(Y) {
        try {
            $(creditCardSelector).val('');

            $(cvvSelector).val('');

            manupulateCreditCardField();

            manupulateCVVField();
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }

        return Y.one('.flow-message-error:not(.hidden)');
    },
        showServerSideValidationErrors = function(node, Y) {
        try {
            if (serverSideErrors(Y)) {
                var context = debugTemplateData.rootElement.children[1].children[0].children[6];
                Y.translations = Y.translations || { lang: sabre.config.global.language };
                    Y.use('wl-lang-' + Y.translations.lang, function(A) {
                    Y.wlValidation.showServerSideValidationErrors(context, node);
                    if (context.validationMessages && context.validationMessages['selectedCards[0].cardNumber']) {
                        showErrors(['formattedCardNumber'], [context.validationMessages['selectedCards[0].cardNumber'][0].code], Y);
                    }
                });
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        setSelectionRangeGeneric = function(input, selectionStart, selectionEnd) {
        try {
            if (input.setSelectionRange) {
                input.setSelectionRange(selectionStart, selectionEnd);
            } else if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        attachTotal = function(Y) {
        var totalNode = cloneNode(Y.one('#totalEnabled'));
        if (Y.one('#totalEnabled_clone') !== null) {
            detachTotal(Y);
        }
        Y.one('.payment-details.credit-card-form.multi-fop-details').append(totalNode);
    },
        detachTotal = function(Y) {
        var totalClone = Y.one('#totalEnabled_clone');

        if (totalClone != null)
            Y.one('.payment-details.credit-card-form.multi-fop-details').removeChild(Y.one('#totalEnabled_clone'));
    },
        hideMultiFopDetails = function(Y) {
        var n = Y.one('.multi-fop-body .multi-fop-details');
        if (!n.hasClass('hidden')) {
            n.addClass('hidden');
        }
    },
        RemoveStyle = function(Control, Style, Y) {
        var controlFound = Y.all(Control);
            if (controlFound._nodes.length) {
                controlFound.removeClass(Style);
            }
    },
        ApplyStyle = function(Control, Style, Y) {
        var controlFound = Y.all(Control);
            if (controlFound._nodes.length) {
                controlFound.addClass(Style);
            }
    },
        ShowNonGreyOutStyle = function(controlName, st, styleName, Y) {
        try {
            // apply grey-out style on all cards then remove from the passed control
            ApplyStyle('#fop-item-creditCardTypes-0-vi-1 label', 'viGreyOut', Y);
            ApplyStyle('#fop-item-creditCardTypes-0-ca-0 label', 'caGreyOut', Y);
            ApplyStyle('#fop-item-creditCardTypes-0-tp-5 label', 'tpGreyOut', Y);
            ApplyStyle('#fop-item-creditCardTypes-0-ax-2 label', 'axGreyOut', Y);
            ApplyStyle('#fop-item-creditCardTypes-0-dc-3 label', 'dcGreyOut', Y);
            ApplyStyle('#fop-item-creditCardTypes-0-jb-4 label', 'jbGreyOut', Y);

            // Remove grey out from the passed control
            RemoveStyle(controlName, styleName, Y);


            var cvvSectionNode = Y.one('#cvcNumberEnabled_clone');
            if (st === 'tp') {
                //for tp CVV is not required
                cvvSectionNode.addClass('hidden');
                cvvSectionNode.one('input').set('disabled', true);
                reinitializeValidations('TP', Y);
                } else {
                // show CVV for other types of cards as it is required.
                cvvSectionNode.one('input').set('disabled', false);
                cvvSectionNode.removeClass('hidden');

                //ReinitializeValidation based on selection
                reinitializeValidations(st.toString().toUpperCase(), Y);
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        senseCard = function(st, Y) {

        hideMultiFopDetails(Y);
        RemoveStyle('#fop-item-creditCardTypes-0-vi-1 label', 'viGreyOut', Y);
        RemoveStyle('#fop-item-creditCardTypes-0-ca-0 label', 'caGreyOut', Y);
        RemoveStyle('#fop-item-creditCardTypes-0-tp-5 label', 'tpGreyOut', Y);
        RemoveStyle('#fop-item-creditCardTypes-0-ax-2 label', 'axGreyOut', Y);
        RemoveStyle('#fop-item-creditCardTypes-0-dc-3 label', 'dcGreyOut', Y);
        RemoveStyle('#fop-item-creditCardTypes-0-jb-4 label', 'jbGreyOut', Y);

        if (Y.one('.additionalContactInfo')) {
            Y.one('.additionalContactInfo').setStyle('display', 'none');
        }
        if (Y.one('.billing-address-header.contactDetails')) {
            Y.one('.billing-address-header.contactDetails').setStyle('display', 'none');
        }

        if (st === 'vi') {
            $('.cardType-vi').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-vi-1 label', st, 'viGreyOut', Y);


        } else if (st === 'ca') {
            $('.cardType-ca').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-ca-0 label', st, 'caGreyOut', Y);

        } else if (st === 'tp') {
            $('.cardType-tp').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-tp-5 label', st, 'tpGreyOut', Y);

        } else if (st === 'ax') {
            $('.cardType-ax').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-ax-2 label', st, 'axGreyOut', Y);

        } else if (st === 'dc') {
            $('.cardType-dc').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-dc-3 label', st, 'dcGreyOut', Y);

        } else if (st === 'jb') {
            $('.cardType-jb').click();
            ShowNonGreyOutStyle('#fop-item-creditCardTypes-0-jb-4 label', st, 'jbGreyOut', Y);
        }

            Y.later(50, Y, function() { attachTotal(Y); });
    },
        togglePaymentDetailsOnType = function(Y) {
            Y.one('.multi-fop-header').delegate('click', function(e) {
            var usDotMessage = new UsDotMessage();

            if (e.currentTarget.hasClass('fop-tab-creditCardTypes')) {
                RemoveStyle('.payment-details.credit-card-form.multi-fop-details', 'hidden', Y);
                RemoveStyle('#imgVi', 'hidden', Y);
                RemoveStyle('#imgMc', 'hidden', Y);

                usDotMessage.addCreditCardUsDotMessage();
            } else {
                ApplyStyle('.payment-details.credit-card-form.multi-fop-details', 'hidden', Y);

                usDotMessage.addOtherDotMessage();
                // Hide the credit card images               
                ApplyStyle('#imgVi', 'hidden', Y);
                ApplyStyle('#imgMc', 'hidden', Y);
            }
        }, 'li');
    },
        getMaskFormat = function(code) {
        if ('ax' === code) {
            return '____-______-_____';
        }
        if ('dc' === code) {
            return '____-______-____';
        }
        if ('tp' === code) {
            return '____-_____-______';
        }
        return '____-____-____-____';
    },
        dynamicCardSelection = function(Y) {
        var cardStr, cardSubStr, currentCardSubStr = '',
            cardCodeStr, currentCardCodeStr = '';
        cardInputNode = Y.one('#cardNumberEnabled_clone input'),
            cardInputDOMNode = Y.Node.getDOMNode(cardInputNode),
            currentformat = '____-____-____-____',
            maskedCard = MaskedInput({
                elm: cardInputDOMNode,
                format: currentformat,
                separator: '\-',
                typeon: '_1234567890'
            }),
            maskedCVV = MaskedInput({
                elm: Y.Node.getDOMNode(Y.one("#cvcNumberEnabled_clone input")),
                format: '___',
                typeon: '_'
            });
        //        if (serverSideErrors(Y)) {
        //            var cardTypeClass = Y.one('.payment-type.fop-creditCardTypes input:checked').get('className');
        //            cardTypeClass = cardTypeClass.split(' ')[0].split('-')[1];
        //            senseCard(cardTypeClass, Y);
        //            maskedCard.setFormat(getMaskFormat(cardTypeClass));
        //        }
            var setCardFormat = function(code) {
            try {
                var scope = $('#cvcNumberEnabled_clone');

                var cardMaskFormat = getMaskFormat(cardCodeStr);
                if (currentformat !== cardMaskFormat) {
                    maskedCard.setFormat(cardMaskFormat);
                    currentformat = cardMaskFormat;
                }
                if (code === 'ax') {
                    maskedCVV.setFormat('____');
                    currentFormatCVV = '____';
                    //jQuery(cvvSelector).val('');
                    $('#imgCVVinfo', scope).attr('src', sswAssetsUrl + 'images/amex_large.jpg');
                    return;
                }
                $('#imgCVVinfo', scope).attr('src', sswAssetsUrl + 'images/otherCards.png');
                currentFormatCVV = '___';
                maskedCVV.setFormat('___');
                //jQuery(cvvSelector).val('');
                } catch(err) {
            }
        }
            var setCard = function(code, value, position) {
            try {
                if (code !== currentCardCodeStr) {
                    manupulateCreditCardField();
                    manupulateCVVField();

                    setCardFormat(code);

                    // preventCCardErrorMessage = true; this line was in production but not in Main branch before afop release.

                    detachTotal(Y);

                    senseCard(code, Y);

                    managepostepay(code);
                    currentCardCodeStr = code;
                    cardInputNode.set('value', value);
                    setSelectionRangeGeneric(cardInputDOMNode, position, position);
                }
                } catch(e) {
                if (typeof exLogger != 'undefined' && exLogger)
                    exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }

        Y.on('keydown', function () {

                setTimeout(function() {
                if (preventCCardErrorMessage === false) {
                    try {
                        cardStr = cardInputNode.get('value');
                        cardSubStr = cardStr.substr(0, 2);

                        if (cardSubStr === '34' || cardSubStr === '37') {
                            cardCodeStr = 'ax';
                            setCard(cardCodeStr, cardSubStr + '__-______-_____', 2);
                            incorrectCardNumber = false;
                            return;
                        } else if (cardSubStr.charAt(0) === '4') {
                            cardCodeStr = 'vi';
                            setCard(cardCodeStr, cardSubStr.charAt(0) + '___-____-____-____', 1);
                            incorrectCardNumber = false;
                            return;
                        } else if (cardSubStr.charAt(0) === '5') {
                            cardCodeStr = 'ca';
                            setCard(cardCodeStr, cardSubStr.charAt(0) + '___-____-____-____', 1);
                            incorrectCardNumber = false;
                            return;
                        } else if (cardSubStr === '35') {
                            cardCodeStr = 'jb';
                            setCard(cardCodeStr, cardSubStr + '__-____-____-____', 2);
                            incorrectCardNumber = false;
                            return;
                        } else if (cardSubStr.charAt(0) === '1') {
                            cardCodeStr = 'tp';
                            setCard(cardCodeStr, cardSubStr.charAt(0) + '___-_____-______', 1);
                            incorrectCardNumber = false;
                            return;
                        } else if (cardSubStr === '30' || cardSubStr === '36' || cardSubStr === '38') {
                            //if (cardStr[2] > 5) {
                            //    Y.all('.multi-fop-section div').removeClass('hidden');
                            //    currentCardCodeStr = '';
                            //    incorrectCardNumber = false;
                            //    return;
                            //}
                            cardCodeStr = 'dc';
                            setCard(cardCodeStr, cardSubStr + '__-______-____', 2);
                            incorrectCardNumber = false;
                            return;
                        } else {
                            RemoveStyle('#fop-item-creditCardTypes-0-vi-1 label', 'viGreyOut', Y);
                            RemoveStyle('#fop-item-creditCardTypes-0-ca-0 label', 'caGreyOut', Y);
                            RemoveStyle('#fop-item-creditCardTypes-0-tp-5 label', 'tpGreyOut', Y);
                            RemoveStyle('#fop-item-creditCardTypes-0-ax-2 label', 'axGreyOut', Y);
                            RemoveStyle('#fop-item-creditCardTypes-0-dc-3 label', 'dcGreyOut', Y);
                            RemoveStyle('#fop-item-creditCardTypes-0-jb-4 label', 'jbGreyOut', Y);
                            managepostepay('');
                            var initialChars = cardStr.substr(0, cardStr.indexOf('_'));

                            if (initialChars != '')
                                jQuery(creditCardSelector).val(initialChars);

                            hideErrors(['formattedCardNumber'], Y);
                            if (cardStr.length == 0) {
                                showErrors(['formattedCardNumber'], ['validation.field.required'], Y);
                            } else if (cardSubStr == '3') {
                                showErrors(['formattedCardNumber'], ['validation.text.tooShort'], Y);
                            } else {
                                showErrors(['formattedCardNumber'], [Resources('custom.js.content.errorMsg.IncorrectCard')], Y);
                            }

                            incorrectCardNumber = true;
                            currentCardCodeStr = '';
                            return;
                        }
                        } catch(e) {
                        if (typeof exLogger != 'undefined' && exLogger) {
                            exLogger.log(e, exLogger.ErrorLevel.Error);
                        }
                        return;
                    }
                }
                preventCCardErrorMessage = false;
            }, 100);
        }, '#cardNumberEnabled_clone input');
    },
        managepostepay = function(code) {
        if (!$('#multi-fop-body-0 .multi-fop-section').hasClass('postepayactive'))
            return;

        if (code == 'vi' || code == '') {
            $("#multi-fop-body-0 .card-icon.card-postepay").removeClass("gray");
        } else {
            $("#multi-fop-body-0 .card-icon.card-postepay").addClass("gray");
        }
    },
        setCursorAtFirstPosition = function(e, Y) {
        try {
            var n = e.currentTarget;
            var v = n.get('value').replace(/(-|_)/g, '');
            if (v.length === 0) {
                setSelectionRangeGeneric(Y.Node.getDOMNode(n), 0, 0);
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        addCvcNumberEvents = function(Y) {
        try {
                Y.one('#cvcNumberEnabled_clone input').on('click', function(e) {
                setCursorAtFirstPosition(e, Y);
            });
            } catch(er) {
        }
    },
        addCardNumberEvents = function(cardNumber, Y) {
        try {
                cardNumber.on('blur', function(e) {
                cardNumberValidations(e, Y);
            });
                cardNumber.on('click', function(e) {
                setCursorAtFirstPosition(e, Y);
            });
                $(cardNumber).on("contextmenu", function(e) {
                return false;
            });
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
        showErrorByControl = function(elm, error, Y) {
        try {
            Y.wlValidation.errorRendering.showError(elm, error);
            } catch(e) {

        }
    },
        addSubmitButtonEvents = function(n, Y) {

            Y.on('click', function(e) {
            try {
                var scope = $('.payment-details.credit-card-form.multi-fop-details');

                if ($('.fop-tab-creditCardTypes').hasClass('tab-current')) {
                    var paymentForm = Y.one('.payment-details.credit-card-form.multi-fop-details');
                    var zipCode = jQuery(jQuery('input[name="selectedCards[0].billingData.zipCode"]')[1]),
                    street1 = jQuery(jQuery('input[name="selectedCards[0].billingData.street1"]')[1]),
                    city = jQuery(jQuery('input[name="selectedCards[0].billingData.city"]')[1]),
                    country = jQuery('select[name="selectedCards[0].billingData.country"]', scope),
                    avsCountries = ['GB', 'US', 'CA'],
                    stopSubmit = false,
                            isEmptyField = function(elm) {
                        if (elm.val().length < 1)
                            return true;
                        else
                            return false;
                    };

                    //if (!isIE7()) {
                    if ($.inArray(jQuery(country).val(), avsCountries) > -1) {
                        if (isEmptyField(zipCode)) {
                            showErrorByControl(zipCode, ['validation.field.required'], Y);
                            zipCode.focus();
                            stopSubmit = true;
                        }
                        if (isEmptyField(street1)) {
                            showErrorByControl(street1, ['validation.field.required'], Y);
                            street1.focus();
                            stopSubmit = true;
                        }
                        if (isEmptyField(city)) {
                            showErrorByControl(city, ['validation.field.required'], Y);
                            city.focus();
                            stopSubmit = true;
                        }
                    }
                    //}

                    if (!stopSubmit) {
                        jQuery("[name='selectedCards[0].cardNumber']").val(jQuery(creditCardSelector).val().replace(/(-|_)/g, ''));
                        //getNode('selectedCards[0].cardNumber', n).set('value', getNode('formattedCardNumber', Y).get('value').replace(/(-|_)/g, ''));
                            Y.one('.multi-fop-details.hidden').all('input[type=text],select').each(function(e) { e.set('disabled', true); });
                        } else {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                }

                var isCardValid = isCardInfoValid();

                if (!stopSubmit && isCardValid) {
                    jQuery("[name='selectedCards[0].cardNumber']").val(jQuery(creditCardSelector).val().replace(/(-|_)/g, ''));
                    //getNode('selectedCards[0].cardNumber', n).set('value', getNode('formattedCardNumber', Y).get('value').replace(/(-|_)/g, ''));
                        Y.one('.multi-fop-details.hidden').all('input[type=text],select').each(function(e) { e.set('disabled', true); });
                    } else {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }

                var code = cardCode(Y);
                var cookieManager = new EtihadCookie();
                cookieManager.AddValue("aFormOfPayment", code);


                    Y.use('cookie', function() {
                    var ibeData = WhiteLabel.getIbeData();
                    var isFFAvailable = 'F';
                    try {
                        var num_ADT = ibeData.passengers.ADT;
                        // The following block will iterate atleast once and maximum for the number of adult passengers
                        if (num_ADT !== null || num_ADT !== 'undefined') {
                            for (var i = 0; i < num_ADT; i++) {
                                // Retrieves the ffnumber of the current passenger
                                var ffAvailable = ibeData.passengersInfo[i].ffNumber;
                                if (ffAvailable == null || ffAvailable == 'undefined' || ffAvailable === '') {
                                    // If the passenger doesn't have a ffp number , it sets the variable as true and subsequently the ffp registration link appears
                                    isFFAvailable = "T";
                                }
                            }
                        }
                        } catch(e) {
                        // Sets the variable to be F if there are any problems accessing the json variable
                        isFFAvailable = 'F';
                    }
                    Y.Cookie.setSub("custom", "ffp", isFFAvailable);
                });

                } catch(err) {
                if (typeof exLogger != 'undefined' && exLogger)
                    exLogger.log(err, exLogger.ErrorLevel.Error);
            }

        }, Y.one('input[type=submit]'));
    },
        cloneCountries = function(Y) {
        try {
            if (!serverSideErrors(Y)) {
                var n = cloneNode(Y.one('.countriesOptions.wasTranslated'));
                var node = Y.one('.countriesOptions.translate:not(.wasTranslated)');
                if (node) {
                    node.replace(n);
                }
                } else {
                var $scope = $('.payment-details.credit-card-form.multi-fop-details');
                var $ddl = $('select[name="selectedCards[0].billingData.country"]', $scope);
                var $ddlOptions = $('option', $ddl);

                if ($($ddlOptions).length < 1) {
                    var n = cloneNode(Y.one('.countriesOptions.wasTranslated'));
                    Y.one('.countriesOptions.translate:not(.wasTranslated)').replace(n);
                }
            }
            } catch(e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
            } finally {
            addValidations(Y);
        }
    },
        bindCountriesEvents = function(Y) {

        var addressFields = ['selectedCards[0].billingData.zipCode', 'selectedCards[0].billingData.street1', 'selectedCards[0].billingData.street2', 'selectedCards[0].billingData.city'];

        var scope = $('.payment-details.credit-card-form.multi-fop-details');

            $('select[name="selectedCards[0].billingData.country"]', scope).bind('change', function(e) {
            applyCountryAddressStyle(scope);

            for (var i = 0; i < addressFields.length; i++) {
                var selector = '[name="' + addressFields[i] + '"]';

                jQuery(selector).val('');
            }
        });

        applyCountryAddressStyle(scope);
    },
        stopRightMouseButtonClick = function() {
            $("input[name='formattedCardNumber']").bind("cut copy paste", function(event) {
            event.preventDefault();
        });
            $("#cvcNumberEnabled_clone input").bind("cut copy paste", function(event) {
            event.preventDefault();
        });
    },
        BindCVVhelper = function() {
        var scope = $('#cvcNumberEnabled_clone');

        $('#divWhatIsThis', scope).bind({
                mouseenter: function(e) {
                // Hover event handler
                $('#divCVVCTip', scope).css('visibility', 'visible');
            },
                mouseleave: function(e) {
                // Hover event handler
                $('#divCVVCTip', scope).css('visibility', 'hidden');
            }
        });
    },
        getTranslation = function(key, Y) {
        Y.translations = Y.translations || { lang: sabre.config.global.language };
        if (Y.translations[Y.translations.lang]) {
            return Y.translations[Y.translations.lang][key];
        }
            Y.use('wl-lang-' + Y.translations.lang, function(A) {
        });
        return Y.translations[Y.translations.lang][key];
    },
        hasCvcNumberDiv = function(node) {
        return node.one('#cvcNumberEnabled_clone');
    },
        insertCvcNumberDiv = function(node, Y) {
        var cvcNumberDiv = Y.Node.create('<div id="cvcNumberEnabled_clone" class="field configurable">' +
                '<label for="creditCardTypes-0-ca-0_cvc_clone" class="translate wasTranslated field-required" data-wl-translate="label.payc.details.cvc"></label>' +
                '<input autocomplete="off" type="text" class="textfield smallest" id="creditCardTypes-0-ca-0_cvc_clone" name="selectedCards[0].cvcNumber">' +
            '</div>');
        cvcNumberDiv.addClass('hidden');
        cvcNumberDiv.one('input').set('disabled', true);
        cvcNumberDiv.one('label').set('innerHTML', getTranslation('label.payc.details.cvc', Y));
        node.one('.column.expiration-fields').append(cvcNumberDiv);
        }, isValidLuhn = function(input) {
        var sum = 0;
        var numdigits = input.length;
        var parity = numdigits % 2;
        for (var i = 0; i < numdigits; i++) {
            var digit = parseInt(input.charAt(i));
            if (i % 2 == parity) digit *= 2;
            if (digit > 9) digit -= 9;
            sum += digit;
        }
        return (sum % 10) == 0;
    },
        cloneCreditCardForm = function(Y) {
        try {
            var n = Y.one('.payment-details.credit-card-form');
            var n2 = cloneNode(n);
            if (!hasCvcNumberDiv(n2)) {
                insertCvcNumberDiv(n2, Y);
            }
            var fopDetails = Y.all('.multi-fop-details');
            fopDetails.addClass('hidden');
            Y.one('.payc .componentContentHolder').insert(n2, 'after');
            //n.insert(n2, fopDetails);
            n2.addClass('multi-fop-details payc_details_container_body');
            n2.append('<input name="cardType.code" type="hidden">');
            var cardNumber = n2.one('#cardNumberEnabled_clone input[type="text"]');
            cardNumber.set('name', 'formattedCardNumber');
            addCardNumberEvents(cardNumber, Y);
            addCvcNumberEvents(Y);
            showServerSideValidationErrors(n2, Y);
            n2.append('<input name="selectedCards[0].cardNumber" type="hidden">');
            addSubmitButtonEvents(n2, Y);
            dynamicCardSelection(Y);
            togglePaymentDetailsOnType(Y);
            attachTotal(Y);
            // Remove the population of the email address 
            var valuesSaved = new saveJourneyValues();
            valuesSaved.getEmailAddress();
            stopRightMouseButtonClick();

            //Below event handling to bound mouse over events for showing/hiding the CVV helper tip box
            BindCVVhelper();

                wrapExpiryDateFields(Y);
                
            window.__paymentPageAdded = true;
            } catch(err) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(err, exLogger.ErrorLevel.Error);
            }
        }

        },
        wrapExpiryDateFields = function(Y) {
            //Expiry dates need to be wrapped in a div, so that error messages will appear aligned.
            
            if ($("body").hasClass("LANGUAGE_ar_AE")) {
                $("[name*='expDate.']").wrap('<div style="float:right"></div>');
            }
    },
    instantiate = function () {
        YUI().use('node', 'component', 'profiler', 'wl-xregexp', 'wl-validation', 'event-focus', 'json-parse', function (Y) {
            var promoControl = new promotionControl();

            Y.on('contentready', function () {

                addExtraTcForResidanceFlights();

            }, '#tcc_1');

            Y.on('contentready', function () {
                serverSideErrors(Y);
                if (!creditCardSectionGeneratedBySSW(Y)) {
                    selectFirstCreditCard();
                }
            }, '.payc_sections');

            Y.on('contentready', function () {

                cloneCreditCardForm(Y);

                Y.on('contentready', function () {
                    if (promoControl.isValidPromo()) {
                        Y.use('event-focus', 'node-event-simulate', function (Y) { Y.get(".fop-tab.fop-tab-paypal a").simulate('click'); });

                        $("#payment-wrapper .fop-tab:not(.fop-tab-paypal)").hide();
                    }
                }, '#payment-wrapper .fop-tab');

            }, '.payment-details.credit-card-form');
            Y.on('contentready', function () {
                if (!promoControl.isValidPromo()) {
                    cloneCountries(Y);
                    bindCountriesEvents(Y);
                }
            }, '.countriesOptions.wasTranslated');


        });

    },
    reinstantiate = function () {
        YUI().use('node', 'component', 'profiler', 'wl-xregexp', 'wl-validation', 'event-focus', 'json-parse', function (Y) {
            var promoControl = new promotionControl();

            Y.on('contentready', function () {
                if (promoControl.isValidPromo()) {
                    promoControl.applyPromoFunctionality(Y);
                }
                else {
                    selectFirstCreditCard();
                }
            }, '.payc_sections');
            Y.on('contentready', function () {
                if (!promoControl.isValidPromo()) {
                    cloneCountries(Y);
                    bindCountriesEvents(Y);
                }
            }, '.countriesOptions.wasTranslated');

        });
    };
    rereinstantiate = function () {
        YUI().use('node', 'component', 'profiler', 'wl-xregexp', 'wl-validation', 'event-focus', 'json-parse', function (Y) {
            var promoControl = new promotionControl();
            if (promoControl.isValidPromo()) {
                promoControl.applyPromoFunctionality(Y);
            }
            else {
                selectFirstCreditCard();
            }
            if (!promoControl.isValidPromo()) {
                cloneCountries(Y);
                bindCountriesEvents(Y);
            }
        });
    };

    return {
        instantiate: instantiate,
        reinstantiate: reinstantiate,
        rereinstantiate: rereinstantiate
    };
}();


function PayPalSection() {

}

PayPalSection.prototype = function () {
    var instantiate = function (y) {
        var lastSelectedCardType;
        $('.fop-tab-paypal').click(function () {
            var $selectedCardTypeNode = $("#form_cnt_2 input[name='selectedCards[0].cardType.code']");
            if ($selectedCardTypeNode) {
                lastSelectedCardType = $selectedCardTypeNode.val().toLowerCase();
            } else {
                lastSelectedCardType = null;
            }

            y.on('contentready', function () {
                addPayPal();
            }, '.fop-paypal-item');
        });

        $('.fop-tab-creditCardTypes').click(function () {

            y.on('contentready', function () {
                checkAndAddPostePayOntabChange();
            }, '.credit-card-item');

            y.on('contentready', function () {
                $("#customhtmlPaymentRulesdisclaimer").children('#digiCertLogo').remove();

                $('#imgVi').show();
                $('#imgMc').show();

                if (!window.__paymentPageAdded) {
                    y.on('contentready', function () {
                        y.later(500, y, function () {
                            var creditCardsSection = new CreditCardsSection();
                            creditCardsSection.reinstantiate();
                        });
                    }, '.payc_sections');
                }
                y.on('contentready', function () {
                    if (lastSelectedCardType) {
                        // simulate click on card type. This will make sure that credit card inputs are generated by ssw.
                        $('input[name="payment_method"].cardType-' + lastSelectedCardType).click();
                    }
                }, '.fop-creditCardTypes');

            }, '.fop-paypal-item');

        });

        var $payPalTab = $('#fop-tab-paypal-0');

        if ($($payPalTab).size() > 0 && $payPalTab.hasClass('tab-current')) {
            y.on('contentready', function () {
                addPayPal();
            }, '.fop-paypal-item');
        }
    },
    checkAndAddPostePayOntabChange = function () {
        try {
            if ($("#afopContainer_CC .card-icon.card-postepay").length > 0 && $("#multi-fop-body-0 .multi-fop-section .card-icon.card-postepay").length == 0) {
                var visaBodyIcon = $("#multi-fop-body-0 .multi-fop-section .card-icon.card-vi").parent();

                if (visaBodyIcon && visaBodyIcon.find('.card-icon.card-vi')[0]) {
                    visaBodyIcon.after(visaBodyIcon.clone().find('.card-icon.card-vi')[0].outerHTML.replace("vi", "postepay"));
                    $('#multi-fop-body-0 .multi-fop-section').addClass('postepayactive');
                }
            }
        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
    addPayPal = function () {
        var $paypalDiv = $(".fop-paypal-item");
        $paypalDiv.children(".fop-paypal-links, .amount, .card-paypal-amount-charged").remove();
        $('#imgVi').hide();
        $('#imgMc').hide();

        if ($('table#tbPayPalLogo', $paypalDiv).size() < 1) {
            $paypalDiv.prepend('<!-- PayPal Logo -->' +
                    '<table id="tbPayPalLogo" border="0" cellpadding="10" cellspacing="0" align="">' +
                    '<tr><td align="center"></td></tr>' +
                    '<tr><td align="left">' +
                    '<a href="#" onclick="' + "javascript:window.open('https://www.paypal.com/uk/cgi-bin/webscr?cmd=xpt/Marketing/popup/OLCWhatIsPayPal-outside','olcwhatispaypal','toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, width=400, height=500');" + '">' +
                    '<img  src="https://www.paypal.com/en_GB/Marketing/i/logo/PayPal_logo_100x45.gif" border="0" alt="PayPal-Standard-Logo"></a></td></tr></table>' +
                    '<!-- PayPal Logo -->');
        }
        var $confirmCheckBox = $('#confirm');

        //  Check we have a handle of the checkbox
        if ($($confirmCheckBox).size() > 0) {
            // Add click event
            $confirmCheckBox.bind('click', function () {
                var isChecked = $($confirmCheckBox).is(':checked');

                var $payPalTab = $('#fop-tab-paypal-0');
                // Check if the paypal tab is visible and if it is the current tab
                if ($payPalTab.size() > 0 && $payPalTab.hasClass('tab-current')) {
                    var $checkBoxPayPal = $('input.fop-paypal-checkbox');

                    if ($($checkBoxPayPal).size() > 0) {
                        // if the checkbox is checked then uncheck it
                        if ($($checkBoxPayPal).is(':checked') && isChecked) {
                            // Deselect it
                            $($checkBoxPayPal).trigger('click');
                            $($checkBoxPayPal).trigger('click');
                        }
                        else if ($($checkBoxPayPal).not(':checked') && isChecked) {
                            // select checkbox
                            $($checkBoxPayPal).trigger('click');
                        }
                        else {
                            $($checkBoxPayPal).trigger('click');
                        }
                    }
                }
            });

            if ($($confirmCheckBox).is(':checked')) {
                var $payPalTab = $('#fop-tab-paypal-0');

                // Check if the paypal tab is visible and if it is the current tab
                if ($payPalTab.size() > 0 && $payPalTab.hasClass('tab-current')) {
                    var $checkBoxPayPal = $('input.fop-paypal-checkbox');

                    if ($($checkBoxPayPal).size()) {
                        $($checkBoxPayPal).trigger('click');
                    }
                }
            }
        }
    };
    return {
        instantiate: instantiate
    };
}();


function POLiSection() {

}

POLiSection.prototype = function () {
    var instantiate = function (y) {
        var lastSelectedCardType;
        $('.fop-tab-poli').click(function () {
            var $selectedCardTypeNode = $("#form_cnt_2 input[name='selectedCards[0].cardType.code']");
            if ($selectedCardTypeNode && typeof $selectedCardTypeNode.val() != 'undefined') {
                lastSelectedCardType = $selectedCardTypeNode.val().toLowerCase();
            } else {
                lastSelectedCardType = null;
            }

            y.on('contentready', function () {
                addPOLi();
            }, '.fop-poli-item');
        });

        $('.fop-tab-creditCardTypes').click(function () {

            y.on('contentready', function () {
                checkAndAddPostePayOntabChange();
            }, '.credit-card-item');

            y.on('contentready', function () {
                $("#customhtmlPaymentRulesdisclaimer").children('#digiCertLogo').remove();

                $('#imgVi').show();
                $('#imgMc').show();

                if (!window.__paymentPageAdded) {
                    y.on('contentready', function () {
                        y.later(500, y, function () {
                            var creditCardsSection = new CreditCardsSection();
                            creditCardsSection.reinstantiate();
                        });
                    }, '.payc_sections');
                }
                y.on('contentready', function () {
                    if (lastSelectedCardType) {
                        // simulate click on card type. This will make sure that credit card inputs are generated by ssw.
                        $('input[name="payment_method"].cardType-' + lastSelectedCardType).click();
                    }
                }, '.fop-creditCardTypes');

            }, '.fop-poli-item');

        });

        var $poliTab = $('#fop-tab-poli-0');

        if ($($poliTab).size() > 0 && $poliTab.hasClass('tab-current')) {
            y.on('contentready', function () {
                addPOLi();
            }, '.fop-poli-item');
        }
    },
    checkAndAddPostePayOntabChange = function () {
        try {
            if ($("#afopContainer_CC .card-icon.card-postepay").length > 0 && $("#multi-fop-body-0 .multi-fop-section .card-icon.card-postepay").length == 0) {
                var visaBodyIcon = $("#multi-fop-body-0 .multi-fop-section .card-icon.card-vi").parent();

                if (visaBodyIcon && visaBodyIcon.find('.card-icon.card-vi')[0]) {
                    visaBodyIcon.after(visaBodyIcon.clone().find('.card-icon.card-vi')[0].outerHTML.replace("vi", "postepay"));
                    $('#multi-fop-body-0 .multi-fop-section').addClass('postepayactive');
                }
            }
        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    },
    addPOLi = function () {
        var $poliDiv = $(".fop-poli-item");
        $poliDiv.children(".fop-poli-links, .amount, .card-poli-amount-charged, .fop-poli-instruction").remove();
        $poliDiv.find(".fop-poli-logo").remove();
        $('#imgVi').hide();
        $('#imgMc').hide();

        if ($('table#tbPOLi', $poliDiv).size() < 1) {
            $poliDiv.prepend('<div id ="tbPOLi" class="fop-poli-logo"></div>');
            $('#poli-0-po-0_poli_checkbox').parent().hide();
        }
        var $confirmCheckBox = $('#confirm');

        //  Check we have a handle of the checkbox
        if ($($confirmCheckBox).size() > 0) {
            // Add click event
            $confirmCheckBox.bind('click', function () {
                var isChecked = $($confirmCheckBox).is(':checked');

                var $poliTab = $('#fop-tab-poli-0');
                // Check if the paypal tab is visible and if it is the current tab
                if ($poliTab.size() > 0 && $poliTab.hasClass('tab-current')) {
                    var $checkBoxpoli = $('input.fop-poli-checkbox');

                    if ($($checkBoxpoli).size() > 0) {
                        // if the checkbox is checked then uncheck it
                        if ($($checkBoxpoli).is(':checked') && isChecked) {
                            // Deselect it
                            $($checkBoxpoli).trigger('click');
                            $($checkBoxpoli).trigger('click');
                        }
                        else if ($($checkBoxpoli).not(':checked') && isChecked) {
                            // select checkbox
                            $($checkBoxpoli).trigger('click');
                        }
                        else {
                            $($checkBoxpoli).trigger('click');
                        }
                    }
                }
            });

            if ($($confirmCheckBox).is(':checked')) {
                var $poliTab = $('#fop-tab-poli-0');

                // Check if the paypal tab is visible and if it is the current tab
                if ($poliTab.size() > 0 && $poliTab.hasClass('tab-current')) {
                    var $checkBoxpoli = $('input.fop-poli-checkbox');

                    if ($($checkBoxpoli).size()) {
                        $($checkBoxpoli).trigger('click');
                    }
                }
            }
        }
    };
    return {
        instantiate: instantiate
    };
}();


//***** Credit Card Validations/Restrictions   :    User_story_Credit_Card_Field_v0.2.docx
(function ($) {
    $.fn.getCursorPosition = function () {
        try {
            var input = this.get(0);
            if (!input) return; // No (input) element found

            if (input.createTextRange) {
                var r = document.selection.createRange().duplicate();
                r.moveEnd('character', input.value.length);
                if (r.text == '') return input.value.length;
                return input.value.lastIndexOf(r.text);
            } else return input.selectionStart;

        } catch (err) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(err, exLogger.ErrorLevel.Error);
            }
            return input.selectionStart;
        }
    };

    $.fn.setCursorPosition = function (index) {
        try {
            var input = this.get(0);
            if (!input) return; // No (input) element found
            if (input.setSelectionRange) {
                input.focus();
                input.setSelectionRange(index, index);
            } else if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(true);
                range.moveEnd('character', index);
                range.moveStart('character', index);
                range.select();
            }
        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger)
                exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    };
})(jQuery);


var currentFormatCVV = '';
var creditCardFieldName = "formattedCardNumber";
var creditCardSelector = '[name="' + creditCardFieldName + '"]';
var cvvFieldName = 'selectedCards[0].cvcNumber';
var cvvSelector = '[name="' + cvvFieldName + '"]';
var cvvDivSelector = '#cvcNumberEnabled_clone';
var preventCCardErrorMessage = false;
var avsServiceArray = [];
var autoAVSEnabled = Etihad.config.enableAVSBinLookup;

function getLastDigitIndex(field) {
    var text = jQuery(field).val();
    var currentIndex = jQuery(field).getCursorPosition();

    if (text.length < 1) return 0;

    for (var i = 0; i < text.length; i++) {
        var temp = text.substr(i, 1);

        if (temp == '_') {
            if (currentIndex < i)
                return currentIndex;
            return i;
        }
    }
    return -1;
}


function manupulateCreditCardField() {

    $(creditCardSelector).off('keydown');
    $(creditCardSelector).off('keyup');

    $(creditCardSelector).val('');

    $(creditCardSelector).keydown(function (e) {
        creditCardFieldKeyDown(e, this);
    });

    $(creditCardSelector).click(function () {
        var lastIndex = getLastDigitIndex(this);

        if (lastIndex > -1)
            jQuery(this).setCursorPosition(lastIndex);
    });

    $(creditCardSelector).keyup(function (e) {
        var cc = $(this).val();
        var cursor = jQuery(this).getCursorPosition();
        var key = e.charCode || e.keyCode || 0;

        if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105)) {
            //in case you need to add validation for numbers
            if (autoAVSEnabled) {
                var creditCardNumber = getUnMaskedText(cc);
                var autoAVSSwitchObj = new AVSSwitch();
                var CardType = autoAVSSwitchObj.getCardType(creditCardNumber);
                var firsrEightDigit = cc.replace('-', '').substring(0, 8);
                var isAVSCheckRequired = (creditCardNumber.length >= 8) && (firsrEightDigit.indexOf('_') < 0) && ((CardType == 'ax' && cursor <= 9) || ((CardType == 'ca' || CardType == 'vi') && cursor <= 10));
                if (isAVSCheckRequired) {
                    resetBillingAddressFields();
                    autoAVSSwitchObj.autoAVSFieldDisplay(creditCardNumber);
        }
            }
        }
        else if (key == 8) {
            var cursor = jQuery(this).getCursorPosition();
            if (cursor == 0) {
                jQuery(this).val('');
                resetCardFields(this);
            }
        }
        if (key == 46) { // delete
            if (cursor == 1) {
                if (jQuery(this).val().substr(0, 1) == '3')
                    jQuery(this).val(jQuery(this).val().substr(0, 1));
                else {
                    jQuery(this).val('');
                    resetCardFields(this);
                }
            }

        } else {
            e.stopPropagation();
            return false;
        }

        if (getUnMaskedText(cc) == '') {
            resetCardFields(this);
        }
    });


    $(creditCardSelector).focusout(function () {
        var text = jQuery(this).val();
        if (getUnMaskedText(text) == '') {
            $(creditCardSelector).val('');
        }
    });

}

function creditCardFieldKeyDown(e, field) {
    var cursor = jQuery(field).getCursorPosition();
    var text = jQuery(field).val();
    var remaningText = text.substr(cursor);

    remaningText = getUnMaskedText(remaningText);

    var key = e.charCode || e.keyCode || 0;

    if (key == 8) { // backspace
        if (field.name == creditCardFieldName && cursor == 0) {
            resetCardFields(field);
        }
    }

    if (key == 46) { // delete
        if (cursor == 1) {
            jQuery(field).val('');
            if (field.name == creditCardFieldName) {
                jQuery(cvvSelector).val('');
                jQuery(cvvDivSelector).removeClass('hidden');
                jQuery(cvvDivSelector + ' input').first().removeAttr('disabled');
            }
        }
        else {
            var remainingMaskedText = text.substr(cursor - 1);

            if (remaningText == "") {
                var lastDigit = getLastDigitIndex(field);

                if (lastDigit > -1)
                    jQuery(field).setCursorPosition(lastDigit);
            } else {
                if (cursor > 10 && remainingMaskedText.indexOf("_") < 0) {
                    jQuery(field).setCursorPosition(cursor);
                }
            }
        }
        return false;
    }

    if (field.name == creditCardFieldName) {
        if (text == currentformat) {
            jQuery(creditCardSelector).val('');
            jQuery(cvvSelector).val('');
        }
    }

    if (field.name == cvvFieldName) {
        if (jQuery(creditCardSelector).val() == '') {
            jQuery(field).val('');
        }
    }


    //48-57: 0 to 9       96-105: 0 to 9 (numpad)       8: backspace    9:tab      37:left      39:right  
    if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105) || key == 8 || key == 9 || key == 37 || key == 39) {
        var rightArrow = 39;
        var leftArrow = 37;

        if (key === leftArrow || key === rightArrow) { // right arrow
            if (remaningText == "") {
                e.preventDefault();
                e.stopPropagation();
                preventCCardErrorMessage = true;
            }
        }
    } else {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
}
//***** End of Credit Card Validations/Restrictions   :    User_story_Credit_Card_Field_v0.2.docx



//***** CVV Validations/Restrictions   :    User_story_CVV_Field_v0.2.docx
function manupulateCVVField() {
    $(cvvSelector).off('keydown');
    $(cvvSelector).off('keyup');
    $(cvvSelector).val('');

    $(cvvSelector).keydown(function (e) {
        creditCardFieldKeyDown(e, this);
    });

    $(cvvSelector).click(function () {
        var lastIndex = getLastDigitIndex(this);

        if (lastIndex > -1)
            jQuery(this).setCursorPosition(lastIndex);
    });

    $(cvvSelector).keyup(function (e) {
        var cursor = jQuery(this).getCursorPosition();
        var cc = $(this).val();
        var ccUnMarked = getUnMaskedText(cc);
        var ccRemaining = getUnMaskedText(cc.substr(cursor));
        var key = e.charCode || e.keyCode || 0;

        if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105)) {
            //in case you need to add validation for numbers
        }
        else if (key == 8) {
            if (cursor == 0)
                jQuery(this).val('');
        }
        else if (key == 46) {
            if (cursor == 1) {
                jQuery(this).val('');
            }
        }
        else {
            e.stopPropagation();
            return false;
        }

        if (cc === currentFormatCVV && jQuery(creditCardSelector).val() == '') {
            $(this).val('');
        }
    });


    $(cvvSelector).focusout(function () {
        var text = jQuery(this).val();

        if (isIE7()) {
            //IE Controls
            return;
        }
        else {
            if (text == currentFormatCVV || jQuery(creditCardSelector).val() == '')
                $(cvvSelector).val('');
        }
    });

}

function getUnMaskedText(text) {
    text = text.replace(/-/g, '');
    text = text.replace(/_/g, '');
    return text;
}

function isIE7() {
    if (jQuery('html').attr('class').indexOf('ie8') >= 0 || jQuery('html').attr('class').indexOf('ie7') >= 0) {
        return true;
    }

    return false;
}


function resetCardFields(field) {
    jQuery(field).val('');
    jQuery(cvvSelector).val('');
    jQuery(cvvDivSelector).removeClass('hidden');
    jQuery(cvvDivSelector + ' input').first().removeAttr('disabled');
    if (autoAVSEnabled) {
        resetBillingAddressFields();
    }
}

function resetBillingAddressFields() {
    var countryTextBox = $('input[name="CountryTextBox"]');

    if (countryTextBox && countryTextBox.length > 0) {
        $('input[name="CountryTextBox"]').remove();
    }
    var $paymentForm = $('.payment-details.credit-card-form.multi-fop-details');
    var $countryElm = $('[name="selectedCards[0].billingData.country"]', $paymentForm);
    $($countryElm).val("");
    $($countryElm).show();
    var address1 = $('input[name="selectedCards[0].billingData.street1"]', $paymentForm).parent().parent();
    var postcode = $('input[name="selectedCards[0].billingData.zipCode"]', $paymentForm).parent();
    $(address1).css({ display: 'none' }).children().css({ display: 'none' });
    $(postcode).css({ display: 'none' });
    var addressFields = ['selectedCards[0].billingData.zipCode', 'selectedCards[0].billingData.street1', 'selectedCards[0].billingData.street2', 'selectedCards[0].billingData.city'];
    $.each(addressFields, function (index, field) {
        var selector = '[name="' + field + '"]';
        $(selector).val('');
    });
}
//*******************************************

function addExtraTcForResidanceFlights() {

    if (isVipClass()) {

        var tcMessage = Resources('custom.js.all.vip.tc');

        if (tcMessage == undefined)
            tcMessage = 'Resource key is NOT defined for extra T&C message ( P Class refund process )';

        $("#tcc_1 .checkboxgroup").append('<li class="vipTermsAndConditions">' + tcMessage + '</li>');
    }

}

var isVipClass = function () {
    if (getCookieValue('a380') == "a380") {
        return true;
    }

    return false;
};

var getCookieValue = function (cname) {
    try {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        if (ca)
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i].trim();
                if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
            }
        return "";
    } catch (e) {
        if (typeof exLogger != 'undefined') {
            exLogger.log(e, exLogger.ErrorLevel.Error);
        }
        return "";
    }
};


//******* Submit Btn Validations ***************
function isCardInfoValid() {
    jQuery(jQuery('[name="selectedCards[0].expDate.month"]')[1]).focus();

    jQuery(jQuery('[name="selectedCards[0].nameOnCard"]')[1]).focus();

    jQuery(creditCardSelector).focus();

    if (jQuery(jQuery(cvvSelector)[1]).is(":visible"))
        jQuery(jQuery(cvvSelector)[1]).focus();

    jQuery(jQuery('[name="selectedCards[0].billingData.country"]')[1]).focus();

    if (jQuery(".validation-error:visible:not([class*=hidden])").length > 0)
        return false;

    return true;
}
//************************************


/// imported /// import SeatsPage.js
/*!
 * $Id: ModifySearchLink.js 12-06-2014
 * 
 * Functionality for Modify Search Link
 *
 * Author: Renees, rpayerioliyat@etihad.ae
 * Etihad Airways, Abu Dhabi
 */

function SeatsPageHandler() {
    this.currentLanguage = sabre.config.global.language;
}

SeatsPageHandler.prototype = function () {

    var isReturnSeatSelected;

    var bootstrapBusForSeatsPage = function () {
        bus.subscribe('seatChanged', updateSelectedSeat);
        EventBusAPI.registerHandler('seats:notify-about-change', function () {
            var msg = { name: 'seatChanged' };
            bus.publish(msg);
        });
    },

    addCloseButtonOnExitRowInfoPopup = function () {
        var closeButtonHtml = '<a class="closeExitRowInfoPopup" href="javascript:void(0)"></a>';

        jQuery(".seat-map-seat-selectable-exit").click(function () {
            setTimeout(function () {
                jQuery('.popup-header:last').append(closeButtonHtml);

                jQuery(".closeExitRowInfoPopup:last").click(function () {
                    jQuery("#btn-no").click();
                });
            }, 100);
        });
    },

    updateIndicatorToReflectSelectedSeat = function () {
        var currentSeatIsPremium = false;
        var previousSeatIsPremium = false;

        //Exit or premium
        $('.seat-map-legend.seat-map-exitrow.seat-map-prepay').click(function () {
            currentSeatIsPremium = true;
            toggleSelectgion();
        });

        //Standard and standard exit
        $('.seat-map-legend.seat-map-standard').click(function () {
            currentSeatIsPremium = false;
            toggleSelectgion();
            previousSeatIsPremium = currentSeatIsPremium;
        });

        $('.seatsOverlays').on("click", '.messagePopup.yui-module.yui-overlay.yui-panel .buttons #btn-accept', function () {
            previousSeatIsPremium = true;
        });

        $('.seatsOverlays').on("click", '.messagePopup.yui-module.yui-overlay.yui-panel .buttons #btn-no', function () {
            var element = $('.seat-map-flights-pax.selectable.seat-map-flights-selected strong');

            if (previousSeatIsPremium == false && currentSeatIsPremium) {
                element.removeClass('seat-map-exitrow');
            }
        });

        function toggleSelectgion() {
            var element = $('.seat-map-flights-pax.selectable.seat-map-flights-selected strong');

            if (currentSeatIsPremium) {
                element.addClass('seat-map-exitrow');
            } else {
                element.removeClass('seat-map-exitrow');
            }
        }
    },

    applySeatIndicatorColorAfterLoad = function (y) {
        var allSegments = $('#seat-map-map-container .seat-map-segment');
        var allInfoboxes = $('#flight-list-infobox .seat-map-infobox');

        var standardSubSelector = '.seat-map-standard';
        var premiumSubSelector = '.seat-map-prepay';

        allInfoboxes.each(function (i, v) {
            var $li = $(v).find('.seat-map-flights-pax');
            $li.each(function (j, v) {
                var seatNumber = $(v).find('span.seat-map-flights-place-no').text();
                var selectror = 'td[data-seat="' + seatNumber + '"]';

                var isStandardSeat = allSegments.eq(i).find(selectror + standardSubSelector).length > 0;
                var isPremiumSeat = allSegments.eq(i).find(selectror + premiumSubSelector).length > 0;

                if (isPremiumSeat) {
                    $(v).find('.seat-map-flights-pax-no strong').addClass('seat-map-exitrow');
                } else {
                    $(v).find('.seat-map-flights-pax-no strong').removeClass('seat-map-exitrow');
                }
            });
        });

        //Attach seat click handler
        isReturnSeatSelected = false;
        //Get Current interface language
        var currentLanguage = sabre.config.global.language;
        //Get all seat icon tags
        var selectedSeats = $('.seat-map-seat-selectable,.seat-map-seat-selectable-exit');
        if (selectedSeats != null) {
            $(selectedSeats).click(function () {
                seatClickHandler(currentLanguage);
            });
        }

        var returnFlight = $("#flight-info-1").find(".seat-map-flights-list");
        $(returnFlight).click(function () {
            Y.on('contentready', function () {
                $('.inboundSegment .seat-map-pax').addClass('returning');
                isReturnSeatSelected = true;
            }, '.inboundSegment .seat-map-pax');
        });
    },

    updateSelectedSeat = function(){
        //Set text for arabix language to left
        if (this.currentLanguage == 'ar_AE')
            $('.seat-map-flights-selected').find('.seat-map-flights-place-no').css('text-align', 'left');

        //Remove from previously selected seat
        var prevSelected = $('.returning');
        $(prevSelected).removeClass('returning');

        var seatMapInfo = $('.seat-map-flights-selected').closest('.seat-map-infobox').hasClass('seat-map-flights-returning');
        if (seatMapInfo) {
            $('.inboundSegment .seat-map-pax').addClass('returning');

            if (isReturnSeatSelected == true) {
                isReturnSeatSelected = false;
                var selectedSeats = $('.seat-map-seat-selectable,.seat-map-seat-selectable-exit');
                if (selectedSeats != null) {
                    $(selectedSeats).click(function () {
                        seatClickHandler(lang);
                    });
                }
            }
        }
    },

    attachRearFacingSeatToolTip = function (opts) {
        $('.seat-map-rfs.seat-map-seat-selectable').tooltip({ tipContainerId: 'rfsToolTip', tipText: Resources('custom.js.all.seatspage.rfstooltip') });
    },

    attachCssClassToBassinetAttachSeatRow = function () {
        $(".seat-map-planemap tr:has(td span.seat-map-bassinet)").each(function () {
            if ($(this).find('td span.seat-map-bassinet').is(':first-child') && !$(this).hasClass('seat-map-row-normalseat-bassinet')) {
                $(this).addClass('seat-map-row-normalseat-bassinet');
            }
            if ($(this).find('td span.seat-map-bassinet').is(':last-child') && !$(this).hasClass('seat-map-row-reatfacingseat-bassinet')) {
                $(this).addClass('seat-map-row-reatfacingseat-bassinet');
            }
        });
    },

    seatClickHandler = function (lang) {
        //Set text for arabix language to left
        if (lang == 'ar_AE')
            $('.seat-map-flights-selected').find('.seat-map-flights-place-no').css('text-align', 'left');

        //Remove from previously selected seat
        var prevSelected = $('.returning');
        $(prevSelected).removeClass('returning');

        var seatMapInfo = $('.seat-map-flights-selected').closest('.seat-map-infobox').hasClass('seat-map-flights-returning');
        if (seatMapInfo) {
            Y.on('contentready', function () {
                
                
                $('.inboundSegment .seat-map-pax').addClass('returning');

                if (isReturnSeatSelected == true) {
                    isReturnSeatSelected = false;
                    var selectedSeats = $('.seat-map-seat-selectable,.seat-map-seat-selectable-exit');
                    if (selectedSeats != null) {
                        $(selectedSeats).click(function () {
                            seatClickHandler(lang);
                        });
                    }
                }

            }, '.inboundSegment .seat-map-pax');
        }
    };

    return {
        bootstrapBusForSeatsPage: bootstrapBusForSeatsPage,
        updateIndicatorToReflectSelectedSeat: updateIndicatorToReflectSelectedSeat,
        applySeatIndicatorColorAfterLoad: applySeatIndicatorColorAfterLoad,
        attachRearFacingSeatToolTip: attachRearFacingSeatToolTip,
        attachCssClassToBassinetAttachSeatRow: attachCssClassToBassinetAttachSeatRow
    };
}();


/// imported /// import AdditionalTandCsMessages.js
/// <reference path="../jquery-1.8.1-vsdoc.js" />
function AdditionalTandcMessages() {

}

AdditionalTandcMessages.prototype = function () {
    var yahooInstance = null;
    var $scope = null,
       $countryDropDown = null;

    window.__countrySelected = null;
    // Bind event to country dropdown

    var instantiate = function (y) {
        // Grab the instance of yahoo
        yahooInstance = y;

        yahooInstance.add('event-focus', function (Y) {
            Y.on('contentready', function () {
                $scope = $('#payc_1');
                $countryDropDown = $('select.countriesOptions', $scope);

                $($countryDropDown).change(function (e) {
                    countrySelectEvent(this, Y, $scope, e);
                });

                // Check to see onload if there is a value in the country dropdown
                if ($($countryDropDown.val() !== '')) {
                    countrySelectEvent($countryDropDown, Y, $scope);
                };
            }, '.countriesOptions.wasTranslated');
        });
    },
   countrySelectEvent = function (countryDropDownList, yahooInstance, scope, e) {
       if (window.__countrySelected === null || window.__countrySelected !== $(countryDropDownList).val()) {
           window.__countrySelected = $(countryDropDownList).val();

           // find if content exist
           var resourceKey = 'custom.js.content.additionalTandCs.' + $("select.countriesOptions[id*='clone']").val();
           var message = Resources(resourceKey, yahooInstance);
           var $additionalTandCs = $('.additionalTandCs', scope);

           if (message !== undefined) {
               if ($($additionalTandCs).size() > 0) {
                   $($additionalTandCs).remove();
               }
               $('<div class="additionalTandCs">' + message + '</div>').appendTo('.field-required-legend', scope);

               var usDotMessage = new UsDotMessage();
               usDotMessage.addCreditCardUsDotMessage();
           }
           else {
               if (message === undefined)
                   $($additionalTandCs).remove();
           }
       }
   };

    return {
        instantiate: instantiate
    };
}();


/// imported /// import UsDotMessage.js


var UsDotMessage = function () {

};

UsDotMessage.prototype = function () {
    // Array of available US airports
    var airportCodes = ['SAT', 'ATL', 'AUS', 'BDL', 'BMI', 'BNA', 'BOS', 'BUF', 'BWI',
               'CLE', 'CLT', 'CMH', 'CMI', 'CVG', 'DBQ', 'DCA', 'DEN', 'DFW', 'DSM', 'DTW',
               'ELP', 'EVV', 'EWR', 'GRR', 'HPN', 'HSV', 'IAD', 'IAH', 'ILG', 'IND', 'JAX',
               'JFK', 'LAS', 'LAX', 'LEX', 'LGA', 'LIT', 'LSE', 'MCI', 'MCO', 'MDT', 'MEM',
               'MIA', 'MKE', 'MLI', 'MSN', 'MSP', 'MSY', 'NYC', 'OKC', 'OMA', 'ORD', 'PHL',
               'PHX', 'PIT', 'RDU', 'RST', 'RSW', 'SAN', 'SDF', 'SEA', 'SFO', 'SLC', 'SNA',
               'STL', 'SUX', 'SYR', 'TOL', 'TPA', 'TUL', 'TUS', 'TYS', 'XNA'];

    // Function containing the logic which decides if the message should be displayed.
    // YUI instance is passed into the function
    var dotMessageLogic = function (Y) {
        // Retrieve the segments from the whitelabel object
        var flightInfo = WhiteLabel.getIbeData().itineraryParts[0];

        //this holds the departure airport code
        var departureAirport = flightInfo.departureAirport,
            // Retreive the departure date
            departureDate = $("#cart_leg_0_departure_date_1 dd").attr("data-wl-date").split(',')[0], //flightInfo.date, : Sabre whitelabel doesn't have time info, it only stores date. 
            
            // Get todays date
            today = new Date(),
            dateToCompareWith = new Date();
        // The compare date is within 7 days of booking
        dateToCompareWith.setDate(today.getDate() + 7);
        // Parse the dates
        var parsedDepartureDate = Date.parse(departureDate),
            parsedCompareWithDate = Date.parse(dateToCompareWith),
            // Retrieve the message to display to the guest
            message = Resources('custom.js.all.content.usdotmessage', Y),
            // Retrieve the element if the us dot message is already being displayed
            divMessage = $('.us-dot-message');

        // Departure date where the difference between departure date and current date is equal to or more than 7. 
        if (parsedDepartureDate >= parsedCompareWithDate && isUsAirport(departureAirport)) {
            // If the message is being displayed then remove it
            if (divMessage.length > 0) {
                divMessage.remove();
            }
            // Check if the text returned from the resource function has returned undefined.
            if (message == undefined) {
                message = '';
            }
            // Append the message into an element
            var divUsDotMessage = '<div class="us-dot-message">' + message + '</div>';
            // return an object representing the below properties.
            return { showMsg: true, msg: message };
        }
        // otherwise remove the element and return the object
        else {
            if (divMessage.length > 0)
                divMessage.remove();

            return { showMsg: false, msg: '' };
        }
    },

    addCreditCardUsDotMessage = function () {
        YUI().use('node', 'event-focus', function (Y) {
            Y.on('contentready', function () {
                var dotMessage = dotMessageLogic(Y)

                if (dotMessage.showMsg) {
                    var divUsDotMessage = '<div class="us-dot-message">' + dotMessage.msg + '</div>';
                    $('#payc_1 .field-required-legend').append(divUsDotMessage);
                } 
            }, '#payc_1 .field-required-legend');
        });
    },
        addOtherDotMessage = function () {
            YUI().use('node', 'event-focus', function (Y) {
                Y.on('contentready', function () {
                    var dotMessage = dotMessageLogic(Y)

                    if (dotMessage.showMsg) {
                        var divUsDotMessage = '<div class="us-dot-message">' + dotMessage.msg + '</div>';
                        $('#secureImagesLine').prepend(divUsDotMessage);
                    }
                    
                }, '#secureImagesLine');
            });
        },

        isUsAirport = function (airportCode) {
            if ($.inArray(airportCode, airportCodes) > -1) {
                return true;
            } else {
                return false;
            }
        };
    return {
        addCreditCardUsDotMessage: addCreditCardUsDotMessage,
        addOtherDotMessage: addOtherDotMessage
    };
} ();



/// imported /// import FarePolicyNotice.js
var FarePolicyNotice = function () { };

FarePolicyNotice.prototype = function () {
    // Register functionality against changes in the whiteLabel object
    var registerCheckFareFamiliesEvent = function () {
        WhiteLabel.addEventHandler(function () {
            // On each change, call the checkFareFamilies function
            checkFareFamilies();
        });
    },
    checkFareFamilies = function () {
        // Retrieve instances of the 2 bounds
        var $inbound = $("input[name=sel_inbounds]:checked"),
            $outbound = $("input[name=sel_outbounds]:checked");

        // Check if both bounds have been retrieved
        if ($inbound.length > 0 && $outbound.length > 0) {

            if ($inbound.closest("td").attr("fare-family-key") != $outbound.closest("td").attr("fare-family-key"))
                buildFareNoticePanel();
        }

    },
    buildFareNoticePanel = function () {
        if ($(".familyFareInfoHeader").size() > 0)
            return;
        // Build up the HTML
        var heading = Resources('custom.js.all.content.fareNoticeHeading'),
            body = Resources('custom.js.all.content.fareNoticeBody'),
            noticePanel = $('<div  class="familyFareInfoHeader"><span>' + heading + '</span></div>' + '<div  class="familyFareInfoBody"><span>' + body + '</span></div>'),
            fareRulesDiv = $('div[class=fare-rules]');
        // Add the html to the cart
        fareRulesDiv.append(noticePanel);
    };
    // Expose functions
    return {
        registerCheckFareFamiliesEvent: registerCheckFareFamiliesEvent,
        checkFareFamilies: checkFareFamilies
    };
}();

/// imported /// import promoControl.js
function promotionControl() { }

promotionControl.prototype = function () {
    var isValid = false;

    var applyPromoFunctionality = function (yahooInstance) {

        if (isValid) {
            // It is a supported currency
            // Check to see if the paypal tab is visible
            var $paypalTab = $('#fop-tab-paypal-0');

            // .credit-card-form
            if ($($paypalTab).size() > 0) {
                // Hide the credit card tab
                $('#fop-tab-creditCardTypes-0').hide();

                //Trigger click. Done this way to force the sabre click event as well.
                $('#fop-tab-paypal-0 a')[0].click();
            }
        }
    },

    isValidPromo = function () {
        var ibeObj = WhiteLabel.getIbeData();

        var corporateID = ibeObj.corporateId,
            isRedemptionFlow = ibeObj.redemption,
            promoCodeArray = ['CUG03', 'GBR13', 'DEU13', 'FRA13'];

        var isBookingFlow = !isRedemptionFlow && sabre.config.global.flowType == 'BOOKING';
        var isPromoCodeMatch = $.inArray(corporateID, promoCodeArray) > -1;
        var isPayPalEnabled = Y.Array.indexOf(WhiteLabel.getComponentModel("payc_1").restrictedFOPs, "PP") === -1;

        isValid = isBookingFlow && isPromoCodeMatch && isPayPalEnabled;

        return isValid;        
    };

    return {
        applyPromoFunctionality: applyPromoFunctionality,
        isValidPromo: isValidPromo
    };
}();


/// imported /// import PaymentMethods.js
function PaymentMethods() {

}

PaymentMethods.prototype = function () {

    /*
    Error handling requirements for AFOP:
    -------------------------------------
    1. If there is an error while calling web module payment service :     
        Ignore the error. 
        Make sure that Sabre payment can proceed as is.
        Error logging will be handled later.
 
    2. If there is an error while making modifications to the payment form: 
        Set an error cookie to ignore further AFOP processing.
        Reload the page.        
        Check the error cookie on load. 
        Disable AFOP functionality on load.
 
    3. If there is an error during POST to confirmation page:
        set an error cookie to ignore further AFOP processing.
        Reload the page.        
        Check the error cookie on load. 
        Display a message
        Disable AFOP functionality.
 
    4. If There is an error while preparing IBM POST parameters before parsing PNR:
        Display an error message.
 
    5. If There is an error while preparing IBM POST parameters after parsing PNR:
        Display an error message.
 
    */


    var log = function (sMessage) {
        if (window.console) {
            console.log('[AFOP] ' + sMessage);
        } else {
            // console.log throws error in ie7.
            // alert(sMessage);
        }
    };

    var paymentTypes = [
            { code: 'CC', isAfop: false, isCreditCard: false, name: 'Credit Card', containerSelector: '#customhtmlPaymentRulesdisclaimer' },
            { code: 'CA', isAfop: true, isCreditCard: true, name: 'MasterCard', containerSelector: '' },
            { code: 'VI', isAfop: true, isCreditCard: true, name: 'Visa', containerSelector: '' },
            { code: 'AX', isAfop: true, isCreditCard: true, name: 'American Express ', containerSelector: '' },
            { code: 'SU', isAfop: true, isCreditCard: false, name: 'Sofort Uberweisumg', containerSelector: '#afopContainer_SU' },
            { code: 'GP', isAfop: true, isCreditCard: false, name: 'Giro Pay', containerSelector: '#afopContainer_GP' },
            { code: 'ID', isAfop: true, isCreditCard: false, name: 'IDEAL', containerSelector: '#afopContainer_ID' },
            { code: 'SB', isAfop: true, isCreditCard: false, name: 'Sofort Banking', containerSelector: '#afopContainer_SB' },
            { code: 'CB', isAfop: true, isCreditCard: false, name: 'Carte Bencaire', containerSelector: '#afopContainer_CB' },
            { code: 'EN', isAfop: true, isCreditCard: false, name: 'eNETS', containerSelector: '#afopContainer_EN' },
            { code: 'AP', isAfop: true, isCreditCard: false, name: 'Alipay', containerSelector: '#afopContainer_AP' },
            { code: 'UP', isAfop: true, isCreditCard: false, name: 'Union Pay', containerSelector: '#afopContainer_UP' },
            { code: 'NB', isAfop: true, isCreditCard: false, name: 'Net Banking', containerSelector: '#afopContainer_NB' },
            { code: 'YD', isAfop: true, isCreditCard: false, name: 'Yandex', containerSelector: '#afopContainer_YD' },
            { code: 'DC', isAfop: true, isCreditCard: false, name: 'Debit Card', containerSelector: '#afopContainer_DC' },
            { code: 'PP', isAfop: true, isCreditCard: false, name: 'PayPal', containerSelector: '#afopContainer_PP' }
    ];


    //On page load display loading icon and hide all credit card elements, so that during afop instantiation none of the will be displayed
    $(function () {
        switch (sabre.config.pageCode) {
            case etihad.pageCodes.PaymentPage:
                var elementsToBeAffected = "#payc_1,#multi-fop-body-0,#customhtmlPaymentRulesdisclaimer";

                $(elementsToBeAffected).hide();

                $('#ROOT').append('<div id="afopLoading" class="componentLoadingContainer loading componentLoadingContainerFullScreen"></div>');

                break;
            default:
                break;
        }
    });


    var instantiate = function () {
        // loading all YUI modules at once to reduce the complexity of this module.
        // YUI use() call is asynchronous. Therefore having use() calls in granular scope requires to build and test for async cases.
        YUI().use('node', 'wl-airport-list', 'cookie', 'json-stringify', 'json-parse', 'node-base', 'selector-css3', instantiateWithYUI);
    };

    var instantiateWithYUI = function (Y) {

        this.Y = Y;

        switch (sabre.config.pageCode) {
            case etihad.pageCodes.PaymentPage:
                if (isVipClass()) {

                    Y.on("contentready", function () {
                        Y.one("#fop-tab-paypal-0").addClass("hidden");
                    }, "#fop-tab-paypal-0", Y, "");

                    stopSpinner();

                    log('VIP Class not supported. Quitting AFOP.');
                    return;
                }
                break;
            default:
                break;
        }

        if (!isSupportedLanguage()) {
            stopSpinner();

            log('Language not supported. Quitting AFOP.');
            return;
        }

        if (isRedemptionBooking()) {
            stopSpinner();

            log('Redemption booking type not supported. Quitting AFOP.');
            return;
        }


        switch (sabre.config.pageCode) {
            case etihad.pageCodes.FlightsResultsPage:
                // remove the afop cookie.
                log('Removing cookies.');
                removeCookie();
                removeErrorCookie();
                log('Removed cookies.');
                break;
            case etihad.pageCodes.PassengerPage:
            case etihad.pageCodes.ExtrasPage:
            case etihad.pageCodes.SeatsPage:
                if (errorOccurredBefore()) {
                    return;
                }

                // call payment service if cookie is not set before.
                log('Getting cookie.');
                var afopCookie = getCookie();
                if (!afopCookie) {
                    log('No cookie. calling service async.');
                    callPaymentServiceAsync();
                }
                break;
            case etihad.pageCodes.PaymentPage:
                if (errorOccurredBefore()) {
                    return;
                }

                Y.on('contentready', function () {
                    var promoControl = new promotionControl();

                    if (promoControl.isValidPromo()) {

                        stopSpinner();

                        return;
                    }

                    log('Loading payment options.');
                    loadPaymentOptions();
                    log('Loaded payment options.');

                }, '#payment-wrapper .fop-tab');

                break;
            default:
                break;
        }
    };

    // todo : rename this function.
    var errorOccurredBefore = function () {

        // error cookie is set, prevent AFOP code running and get the sabre functionality running as is.
        var errorCookie = getErrorCookie();
        if (errorCookie) {

            stopSpinner();

            displayErrorFromCookie(errorCookie);

            return true;
        }

        return false;
    };

    var displayErrorFromCookie = function (errorCookie) {
        if (errorCookie.alreadyDisplayed)
            return;

        if (!errorCookie.titleKey)
            return;

        if (!errorCookie.messageKey)
            return;

        var title = Resources(errorCookie.titleKey);
        var message = Resources(errorCookie.messageKey);

        if (errorCookie.pnr) {
            message = message.replace("{{PNR}}", errorCookie.pnr);
        }

        displayErrorMessage(message, title, function () { });

        errorCookie.alreadyDisplayed = true;
        setErrorCookie(errorCookie);
    };

    var displayErrorMessage = function (message, title, continuation) {
        var continueText = Resources('custom.js.all.content.continue');

        // Build up the popup
        var dialog = new ConfirmationDialog({
            id: 'afopErrorMessage',
            header: title,
            content: message,
            continueText: continueText
        });
        // Display the popup
        dialog.showDialog(continuation);
    };


    var isVipClass = function () {
        if (getVipCookie('a380') == "a380") {
            return true;
        }

        return false;
    };

    var getVipCookie = function (cname) {
        try {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            if (ca)
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i].trim();
                    if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
                }
            return "";
        } catch (e) {
            if (typeof exLogger != 'undefined') {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
            return "";
        }

    };


    var isSupportedLanguage = function () {
        var availbleLanguageEditions = ['pt_BR', 'de_DE', 'fr_FR', 'nl_NL', 'it_IT', 'en_GB', 'zh_CN', 'ru_RU', 'tr_TR', 'th_TH'];
        var currentLanguage = sabre.config.global.language;
        return ($.inArray(currentLanguage, availbleLanguageEditions) > -1);
    };

    var isRedemptionBooking = function () {
        return sabre.config.global.flowType === 'REDEMPTION';
    };

    var loadPaymentOptions = function () {
        log('Getting cookie.');
        var fop = getCookie();
        log('Got cookie : ' + fop);
        if (fop) {
            // display AFoP, based on the value set in cookie
            loadPaymentOptionsInternal(fop);
        } else {
            // call the web service and get AFoP synchronously
            log('no cookie. calling web service.');
            displayLoadingDiv(false);
            callPaymentService(
                // on success
                function (paymentServiceResult) {
                    log('web service call successfull.');
                    try {
                        setPaymentResultCookie(paymentServiceResult);

                        loadPaymentOptionsInternal(paymentServiceResult);
                    }
                    finally {
                        hideLoadingDiv();
                    }
                },
                // on error
                function () {
                    handleErrorPaymentService();
                    hideLoadingDiv();
                });
        }
    };

    var loadPaymentOptionsInternal = function (paymentServiceResult) {
        try {

            log('Loading payment options internal.');

            if (!paymentServiceResult) {
                log('Payment service result is falsy.');

                stopSpinner();
                return;
            }

            if (paymentServiceResult.FormsOfPayment.length === 0) {
                log('Payment service result array is empty.');

                stopSpinner();
                return;
            }


            createAlternatePaymentSubmitButton();

            log('Created submit button.');


            this.Y.on('contentready', function () {
                try {
                    buildPaymentForm(paymentServiceResult.FormsOfPayment);
                    afopBankNotification(paymentServiceResult.CountryCode);

                    handleIBMPGCountry(paymentServiceResult);

                    log('Built payment form.');
                }
                catch (errorLoad) {
                    handleErrorLoadPaymentOptions(errorLoad);
                }
            }, '.fop-creditCardTypes');


            //in case credit card data is invalid, after submitting the form sabre returns error message but doesn't load credit card info input div. 
            //as div is not present in dom, buildPaymentForm function is not fired, because function initiation bound to one of the credit card form elements.
            //along with the error message sabre returns credit card icons and card icon click has "load credit card div" functionality, so if credit card element doesn't exist, fix manupulates icon click.
            this.Y.on('contentready', function () {
                try {
                    if ($(".countriesOptions.wasTranslated").length == 0) {
                        if ($('.fop-creditCardTypes .credit-card-item label').length > 0) {
                            $($('.fop-creditCardTypes .credit-card-item label')[0]).click();
                        }
                    }
                }
                catch (errorLoad) {
                    handleErrorLoadPaymentOptions(errorLoad);
                }
            }, '.fop-creditCardTypes');

            // if the page loads with paypal tab open first, stop spinner. 
            // this is the case when you click "cancel and return to etihad" link on paypal page
            this.Y.on('contentready', function () {
                stopSpinner();
            }, '.payment-type.fop-paypal');

            this.Y.on('contentready', function () {
                stopSpinner();                
                
            }, '.payment-type.fop-poli');

        } catch (error) {
            handleErrorLoadPaymentOptions(error);
        }
    };

    
    // Capture the event bus 'payc:fop-type-changed' and register the handler
    var bootstrapBusPoliPay = function () {
        bus.subscribe('replacePoliPayLogo', replacePoliPayLogo);
        EventBusAPI.registerHandler('payc:fop-type-changed', function () {
            var msg = { name: 'replacePoliPayLogo' };
            bus.publish(msg);
        });
    },

    // When the guest clicks on the "PoliPay" tab, replace the current PoliPay logo with the logo mapped to the source website
    replacePoliPayLogo = function () {
        this.Y.on('contentready', function () {
            $('.payment-type.fop-poli #tbPOLi').remove();
            $('.payment-type.fop-poli').prepend($('<a href="http://www.polipayments.com/consumer"><img src="https://resources.apac.paywithpoli.com/poli-logo-44.png" width="221" height="100" alt="POLi Logo"/></a>'));
        }, '.payment-type.fop-poli #tbPOLi');
    };

    var createAlternatePaymentSubmitButton = function () {

        this.Y.on('contentready', function () {

            try {

                var $form = $("form#form_cnt_2");
                var $submitBtn = $form.find("input[type='submit'], button[type='submit']");

                var submitText = Resources('custom.js.all.afop.submit');

                if (!submitText) {
                    submitText = $submitBtn.attr('value'); // copy the button text 
                }

                // create another submit button for AFOP
                var $altSubmitBtn = $("<input type='button' id='btnAfopSubmit' name='afopSubmit' class='button disabled' style='display:none' />");
                $altSubmitBtn.attr('value', submitText);
                $submitBtn.after($altSubmitBtn);
                $altSubmitBtn.wrap("<div />");
                $altSubmitBtn.click(afopSubmitClick);

            } catch (error) {
                handleErrorLoadPaymentOptions(error);
            }


        }, '#form_cnt_2');

    };

    var afopSubmitClick = function () {

        if ($("#btnAfopSubmit").hasClass("disabled"))
            return;

        submitToSSW();
    };

    /// submit the form. get the confirmation page. parse the PNR. and pass it all to IBM.
    var submitToSSW = function () {

        try {

            displayLoadingDiv(true);

            log('Preparing for SSW submit.');

            // We need to get values of payCode and payType here beofre the prepareFormForSSWSubmit() call.
            // Beacuse prepareFormForSSWSubmit() removes <input>s to get SSW work.
            var payCode = Y.all('input[name=afop]:checked')._nodes[0].value;  // one will always be checked at this stage.
            var payType = Y.all('#rdBtnPaymentMonthly:checked')._nodes.length > 0 ? "I" : "F";

            prepareFormForSSWSubmit();

            log('SSW submit prep complete. Waiting for SSW Confirmation Page...');
            var action = $("#form_cnt_2").attr("action");

            setConfirmationPageCookie('isAFOPPayment', 'true', 20);

            $.post(action, $("#form_cnt_2").serialize(), function (confPageHtml) {
                var pnr, confPageTransformed;

                try {
                    log('Confirmation page received.');

                    pnr = parsePNR(confPageHtml);

                    if (!pnr) {
                        throw { name: 'AFOP Error', message: 'Failed to parse pnr.' };
                    }

                    confPageTransformed = transformConfirmationPage(confPageHtml);
                }
                catch (e) {
                    handleErrorSubmitToSSW(e, pnr);
                    return;
                }
                try {
                    submitToIBM(confPageTransformed, pnr, payCode, payType);
                    // no need to hide the div. form will be submitted.
                }
                catch (ee) {
                    handleErrorSubmitToIBM(ee, pnr);
                }

            }).fail(function (xhr, textStatus, errorThrown) {
                handleErrorSubmitToSSW(errorThrown);
            });

        } catch (error) {
            handleErrorSubmitToSSW(error);
        }
    };

    var handleErrorSubmitToSSW = function (error, pnr) {
        var message;

        log('Error while submitting to Confirmation Page. ' + error);

        if (pnr) {
            // custom.js.all.afop.errPGWithPNR
            messageKey = 'custom.js.all.afop.errPGWithPNRBody';
            titleKey = 'custom.js.all.afop.errPGWithPNRTitle';
        }
        else {
            messageKey = 'custom.js.all.afop.errSSWBody';
            titleKey = 'custom.js.all.afop.errSSWTitle';
        }

        setErrorCookie({ messageKey: messageKey, titleKey: titleKey, pnr: pnr });
        reloadPage();
    };

    var handleErrorSubmitToIBM = function (error, pnr) {
        log('Error while submitting to IBM. ' + error);

        // custom.js.all.afop.errPGWithPNR
        var message;
        message = Resources('custom.js.all.afop.errPGWithPNRBody');
        message = message.replace('{{PNR}}', pnr);
        var title = Resources('custom.js.all.afop.errPGWithPNRTitle');

        hideLoadingDiv();
        displayErrorMessage(message, title, function () {
            // reload the page?
        });

    };

    var handleErrorLoadPaymentOptions = function (error) {
        stopSpinner();

        // reload the page. And do not run AFOP this time.
        // Put a cookie to not to run AFOP code
        log('Error while loading payment options. ' + error);
        setErrorCookie({ messageKey: null, titleKey: null, pnr: null });

        reloadPage();
    };

    var handleErrorPaymentService = function (xhr, txtStat, errThrown) {
        stopSpinner();

        // log error to console and ignore.
        log('Error while calling payment service: ' + xhr + ' ' + txtStat + ' ' + errThrown);
    };

    var reloadPage = function () {
        // Do not use window.location.reload(); as it re-posts the form data.
        window.location = window.location.href; // this will not re-post the form data
    };

    var prepareFormForSSWSubmit = function () {

        $("#form_cnt_2 input[name='confirm']").val(true);
        $("#form_cnt_2 input[name='confirm_cb']").val("on");
        $("#form_cnt_2 input[name='selectedCards[0].cardType.code']").val("BPC");
        $("#form_cnt_2 input[name='selectedCards[0].cardType.name']").val("BPC");
        $("#form_cnt_2 input[name='selectedCards[0].remote']").val(true);
        $("#form_cnt_2 input[name='selectedCards[0].sectionName']").remove();
        $("#form_cnt_2 input[name='confirm_cb']").remove();
        $("#form_cnt_2").append("<input type='hidden' name='confirm_cb' value='on' />");

        // Remove duplicate fields, otherwise submit won't work:
        var $inputs = $("#form_cnt_2 input, #form_cnt_2 select");
        var dict = {};
        var inputsToDelete = [];

        $inputs.each(function () {
            var name = $(this).attr("name");
            if (name !== "componentTypes") {
                var clone = dict[name];

                if (clone) {
                    if ($(clone).val() != "") {
                        inputsToDelete.push(this);
                    }
                    else {
                        inputsToDelete.push(clone);
                        dict[name] = this;
                    }
                }
                else {
                    dict[name] = this;
                }
            }
        });

        $(inputsToDelete).remove();
    };

    var submitToIBM = function (confPageHtml, pnr, payCode, payType) {

        var afopCookie = getCookie();

        // The following code is injected to the cart
        // kept un minified for future update (minified using http://jscompress.com/)
        //$( document ).ready(function() {
        //    var elmWithClstogglers=null;
        //    elmWithClstogglers=$("em[class='toggler']");
        //    $(elmWithClstogglers).each(function(){
        //        $(this).bind('click',function(){ShowHidePriceDetails(this);});
        //    });                               
        //});

        //function ShowHidePriceDetails(elm)
        //{               
        //    if(elm !=null)
        //    {
        //        var obj= $(elm).children("a:first-child");
        //        elmParent=$(elm).parent();
        //        var olElm=elmParent.children("ol");
        //        if(olElm != null)
        //        {
        //            if(olElm.css("display")=="block")
        //            {
        //                olElm.css("display","none");                            
        //                if(obj != null)
        //                {
        //                    obj.text(Resources('label.cart.priceSummary.view'));
        //                }
        //            }
        //            else
        //            {
        //                olElm.css("display","block");
        //                if(obj != null)
        //                {
        //                   obj.text(Resources('label.cart.priceSummary.hide'));
        //                }

        //            }
        //        }                    
        //    }                              
        //}


        //var scriptMarkup = "<script> \n"+            
        //    "function ShowHidePriceDetails(e){if(e!=null){var t=$(e).children(\"a:first-child\");elmParent=$(e).parent();var n=elmParent.children(\"ol\");if(n!=null){if(n.css(\"display\")==\"block\"){n.css(\"display\",\"none\");if(t!=null){t.text(\"view\")}}else{n.css(\"display\",\"block\");if(t!=null){t.text(\"hide\")}}}}}$(document).ready(function(){var e=null;e=$(\"em[class='toggler']\");$(e).each(function(){$(this).bind(\"click\",function(){ShowHidePriceDetails(this)})})})" +
        //    + "</script>";

        //var css = "<style>em.toggler{display:none;}  ol.price-element-details {display:block;} </style>";


        var hideViewlinkTranslation = "<div id=\"hideViewTranslation\" showvalue=\"{0}\" hidevalue=\"{1}\"> </div>";

        hideViewlinkTranslation = hideViewlinkTranslation.replace("{0}", Resources('label.cart.priceSummary.view'));

        hideViewlinkTranslation = hideViewlinkTranslation.replace("{1}", Resources('label.cart.priceSummary.hide'));

        var cartMarkup = document.getElementById('cart-component').innerHTML + hideViewlinkTranslation;

        var bankMessage = GetIBMBankMessage(afopCookie.CountryCode, payCode);
        var paymentOptionsInOrder = [];

        if (availablePaymentOrder) {
            var isCreditCardsorted = false;
            $(availablePaymentOrder).each(function () {
                if (this.Code == 'CC')
                    isCreditCardsorted = true;

                paymentOptionsInOrder.push(this.Code);
            });

            if (!isCreditCardsorted)
                paymentOptionsInOrder.unshift('CC');
        }

        var ibmObject = {
            ibeObject: WhiteLabel.getIbeData(),
            confirmationPage: confPageHtml,
            shoppingBasket: cartMarkup,
            pnr: pnr,
            paymentCode: payCode,
            sabreObject: sabre.config.global,
            pod: afopCookie.CountryCode,
            paymentType: payType,
            bankNotificationMessage: bankMessage,
            FOPOrder: paymentOptionsInOrder
        };

        log('Creating IBM form.');

        var ibmForm = createIBMForm(ibmObject);
        //remove Insurance cookie before submit
        var executionCodeInitial = getUrlExecutionCodeInitial();
        if (executionCodeInitial)
        {
            Y.Cookie.remove("passengerDOB_" + getUrlExecutionCodeInitial());
        }
   
        ibmForm.submit();

        log('IBM form submitted.');

    };

    var createIBMForm = function (ibmObject) {

        var ibmAddress = externalResourcesConfigUrls.IBMUrl;

        //"https://modules.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml";    // prod
        // var ibmAddress = "https://modules.ppe.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml";    // pre prod
        // var ibmAddress = "https://modules.test.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml";    // test
        // var ibmAddress = "https://modules.dev.etihad.com/Payment/AP/xhtml/AlternativePayment.xhtml";        // dev



        var ibmObjectstringified = this.Y.JSON.stringify(ibmObject);

        var newForm = $('<form />', { id: 'afopForm', method: 'POST', action: ibmAddress }).append(
                $('<input />', { type: 'hidden', name: 'EySSW', value: ibmObjectstringified })
            );

        $('body').append(newForm);

        return newForm;

    };

    var parsePNR = function (confPageHtml) {

        // Extract the booking reference from confirmation page's HTML (it's embedded in inline JavaScript):
        var match = confPageHtml.match(/"reservationNumber"\s*:\s*"[^"]*"/);

        if (!match) {
            log('PNR could not be parsed.');
            return undefined;
        }


        var bookingRef = match[0];

        bookingRef = bookingRef.slice(bookingRef.indexOf(":") + 1);
        bookingRef = bookingRef.slice(bookingRef.indexOf('"') + 1, bookingRef.lastIndexOf('"'));

        log('PNR Parsed. ' + bookingRef);
        return bookingRef;
    };

    var transformConfirmationPage = function (html) {
        var result;

        result = hideBankTransferSpecificElements(html);

        result = convertRelativeLinksToAbsolute(result);

        return result;
    };

    var hideBankTransferSpecificElements = function (html) {
        // Hiding "To complete the processing of booking..." text
        // Hiding the bottom row that starts with "Bank Transfer"
        var strStyle = "<style>#customhtmlremotepayment_BankTransfer{display:none;}	.payment-item.multiple-payments {display:none;}</style>";
        var transformed = html.replace("</body>", strStyle + "\r\n" + "</body>");
        return transformed;
    };

    var convertRelativeLinksToAbsolute = function (html) {
        var result;

        /// returns the folder of the current page i.e. 'https://wl20-int.sabre.com/SSW2010/EYEY'
        var confPageStaticBase = function () {
            var loc = window.location.pathname;
            var dir = loc.substring(0, loc.lastIndexOf('/'));
            return (window.location.protocol + '//' + window.location.host + dir);
        };

        // This method changes the sabre.config object after sabre.config.initModules(); call initializes the config with relative links
        // because the initModules() function is not implemented in the html page, it is not possible to replace the relative links within html.
        // This method is not directly executed in this context. It is injected to the confirmation page.
        var changeSabreConfigToAbsolute = function () {
            for (var grp in sabre.config.groups) {
                var theGroup = sabre.config.groups[grp];
                // if the group has a 'base' property
                if (theGroup['base']) {
                    // if base link starts with '.' or '.', it is considered relative
                    if (theGroup['base'].charAt(0) === '.' || theGroup['base'].charAt(0) === '/') {
                        theGroup['base'] = confPageStaticBase() + '/' + theGroup['base'];
                    }
                }
            }
        };

        // replacing all href and src targets starting with ".."
        result = html.replace(/ href=\"..\//g, ' href=\"' + confPageStaticBase() + '/../');
        result = result.replace(/ src=\"..\//g, ' src=\"' + confPageStaticBase() + '/../');


        result = result.replace(
            'sabre.config.initModules();',      // replacing this line of code
            'sabre.config.initModules(); '      // with itself and adding...
                + 'var confPageStaticBase = ' + confPageStaticBase.toString() + ';'
                + 'var changeSabreConfigToAbsolute = ' + changeSabreConfigToAbsolute.toString() + ';'
                + 'changeSabreConfigToAbsolute();'  // methods are defined. now call.
        );

        return result;
    };


    var displayLoadingDiv = function (isTextVisible) {
        this.Y.one('#ROOT').append('<div id="afopLoadingPayment" class="componentLoadingContainer loading componentLoadingContainerFullScreen"></div>');

        var message = Resources('custom.js.all.loadingSpinnerMessage');
        if (!message)
            message = 'We are processing your request. <br />Please do not click the browser back button or close your browser window.';

        if (isTextVisible)
            this.Y.one('#ROOT').append('<div id="loadingMessage">' + message + '</div>');
    };

    var hideLoadingDiv = function () {
        var loadingDiv = this.Y.one('#ROOT').one('#afopLoading');
        while (loadingDiv) {
            loadingDiv.remove();
            loadingDiv = this.Y.one('#ROOT').one('#afopLoading');
        }

        var loadingDivPayment = this.Y.one('#ROOT').one('#afopLoadingPayment');
        if (loadingDivPayment) {
            loadingDivPayment.remove();
        }

        var loadingMessage = this.Y.one('#ROOT').one('#loadingMessage');
        if (loadingMessage) {
            loadingMessage.remove();
        }
    };


    var callPaymentServiceAsync = function () {
        callPaymentService(function (paymentServiceResult) {
            setPaymentResultCookie(paymentServiceResult);
        }, handleErrorPaymentService);
    };

    var setPaymentResultCookie = function (paymentServiceResult) {
        setCookie(paymentServiceResult);
    };


    var callPaymentService = function (onSuccess, onError) {

        log('Preparing to make the payment service call.');

        var paymentServiceUrl = getPaymentServiceUrl();

        log('Payment service url: ' + paymentServiceUrl);

        var xDomainSupported = crossDomainAjaxSupported();

        var dataType = xDomainSupported ? 'json' : 'jsonp'; // using jsonp for only not supported browsers as per etihad policy.

        log('CORS is ' + (xDomainSupported ? '' : 'not ') + 'supported. Making ' + dataType + ' call.');

        $.ajax({
            type: 'GET',
            dataType: dataType,
            url: paymentServiceUrl,
            cache: false,                   // We do not want caching as response depends on current time.
            jsonp: 'callback',              // this will pass a ?callback= querystring parameter. 
            // payment service will check this and if the dataType is jsonp, response will be encapsulated in a js method.
            success: function (data) {
                onSuccess.apply(this, [data]);
            },
            error: function (xhr, txtStat, errThrown) {
                onError.apply(this, [xhr, txtStat, errThrown]);
            }
        });

        log('Payment service call completed.');

        //var mockResult = {
        //    CountryCode: 'US',
        //    FormsOfPayment: [
        //        { Code: 'VI', Installment: false },
        //        { Code: 'CA', Installment: true },
        //        { Code: 'AX', Installment: true },
        //        //{ Code: 'SU', Installment: true },
        //        { Code: 'GP', Installment: true },
        //        { Code: 'ID', Installment: true }
        //        //{ Code: 'SB', Installment: true },
        //        //{ Code: 'CB', Installment: true },
        //        //{ Code: 'EN', Installment: true },
        //        //{ Code: 'AP', Installment: true },
        //        //{ Code: 'UP', Installment: true }
        //    ]
        //};

        //onSuccess.apply(this, [mockResult]);
    };

    var getPaymentServiceUrl = function () {
        var ibeData = WhiteLabel.getIbeData();

        var currencyCode = ibeData.currency;
        var departureAirportCode = ibeData.itineraryParts[0].departureAirport;
        var deptDate = new Date(ibeData.selectedOffers[0].parts[0].segments[0].departure);
        var departureDateString = formatDateForPaymentService(deptDate);
        var languageCode = sabre.config.global.language; // web service will ignore this.


        var result = externalResourcesConfigUrls.WebModuleUrl;
        result += '/paymentmethods.svc';
        result += "/" + encodeURIComponent(departureAirportCode);
        result += "/" + encodeURIComponent(currencyCode);
        result += "/" + encodeURIComponent(departureDateString);
        result += "/" + encodeURIComponent(languageCode);
        // result += "?now=" + encodeURIComponent(sabre.config.global.currentTimeInMillis); 

        return result;
    };

    var formatDateForPaymentService = function (deptDate) {
        var yyyy = deptDate.getFullYear();
        var month = (deptDate.getMonth() + 1);   // month is zero based.
        var date = deptDate.getDate();
        var hours = deptDate.getHours();
        var mins = deptDate.getMinutes();

        return "" + yyyy
            + "-" + makeTwoDigits(month)
            + "-" + makeTwoDigits(date)
            + "-" + makeTwoDigits(hours)
            + "-" + makeTwoDigits(mins)
            + "-" + "00";
    };

    var makeTwoDigits = function (number) {
        // only works with positive integers up to 99;

        if (number < 10)
            return "0" + number.toString();
        else {
            return number.toString();
        }
    };


    /// all modern browsers support cross domain ajax calls.
    /// IE10+, Firefox 3.6+, Safari 4.0+, Chrome 6+, Opera 12.1+
    /// Reference: http://caniuse.com/#search=cors
    var crossDomainAjaxSupported = function () {

        return ($.support.cors);
    };



    //****** UI Related 
    var isAfopCreditCardEnabled = false;
    var isInstallmentEnabled = false;
    var availablePaymentOrder;
    var ccindex;
    var isDebitCardEnabled = false;

    var buildPaymentForm = function (availablePaymentMethods) {

        availablePaymentOrder = availablePaymentMethods;

        stopSpinner();

        isAfopCreditCardEnabled = isAfopCreditCardSupported(availablePaymentMethods);

        isInstallmentEnabled = isInstallmentSupported(availablePaymentMethods);

        isDebitCardEnabled = isDebitCardPaymentEnabled(availablePaymentMethods);

        addUpdateStaticTexts();

        rebuildCreditCardPaymentMethod(availablePaymentMethods);

        var paymentMethodHtml = '';

        for (var j = 0; j < availablePaymentMethods.length; j++) { //Compare available methods with entire list and find out payment methods those will be injected.
            for (var i = 0; i < paymentTypes.length; i++) {

                if (paymentTypes[i].isCreditCard)
                    continue;

                if (availablePaymentMethods[j].Code != paymentTypes[i].code)
                    continue;

                if (availablePaymentMethods[j].Code == 'CC') {
                    ccindex = j;
                    continue;
                }

                var payment = paymentTypes[i];

                var bufferHtml = buildPaymentMethodContent(payment);

                paymentMethodHtml = paymentMethodHtml + bufferHtml;
            }
        }

        $("#customhtmlPaymentRulesdisclaimer").after(paymentMethodHtml); //insert generated html after disclaimer section

        $(".afopBody:visible").slideUp(0);  //keep all payment methods collapsed as none of them will be selected by default

        sortPaymentOptions(availablePaymentMethods);

        $("[name=afop]").click(afopRadioButtonClick);

        hideCreditCardSectionOnPageLoad();

        manageTabs();

        addTermsAndConditionsCheckForSubmit();

        AdjustTermsAndConditions(availablePaymentMethods);

    };

    var afopRadioButtonClick = function () {

        if ($(".afopBody:visible").parent().find("input").attr("id") == $(this).attr("id")) //in case clicked radio button is the one already selected - do nothing
            return;

        $(".afopBody:visible").slideUp();

        changeMonthlyInstallmentBodyVisibility(false, false);

        changeSaberCreditCardIconsVisibility(false);

        $(this).closest(".afopOption").find(".afopBody").slideDown();

        var isCreditCardSelected = $(this).closest(".afopOption").attr("id") == "afopContainer_CC";

        manageAfopSubmitButtonVisibility();

        if (isCreditCardSelected) {
            $("#customhtmlPaymentRulesdisclaimer .componentContentHolder").slideDown();

            showRelatedCreditCardPaymentOption();

            $("#afopContainer_CC .afopIcon").hide();

            insertDebitCardNotification();

        } else {
            changeCreditCardInputVisibility(false, true);
            $("#debitCardPaymentText").hide();
            $("#customhtmlPaymentRulesdisclaimer .componentContentHolder").slideUp();

            $("#afopContainer_CC .afopIcon").show();
        }
    };

    var handleIBMPGCountry = function (cookie) {
        var IBMPaymentCountry = ['BR'];
        var modifyDisplay = function () {
            $('.payment-details.credit-card-form').addClass('hidden');
            changeAfopSubmitButtonVisibility(true);
            changeSaberCreditCardIconsVisibility(false);
            changeMonthlyInstallmentBodyVisibility(true);
        };
        if (!cookie) {
            if (window.console) {
                console.error('Cookie is empty cannot determine the origin country');
            }
            return;
        }

        if ($.inArray(cookie.CountryCode, IBMPaymentCountry) == -1) {
            return;
        }
        modifyDisplay();
        $("#rdBtnPaymentFull").unbind("click").click(function () {
            modifyDisplay();
        });

        Y.on('contentready', function () {
            modifyDisplay();
        }, '.countriesOptions.wasTranslated');

    };

    var addTermsAndConditionsCheckForSubmit = function () {

        $("#confirm, [name=afop]").click(function () {

            if (Y.all('#confirm:checked')._nodes.length > 0 && Y.all('[name=afop]:checked')._nodes.length > 0) {
                $("#btnAfopSubmit").removeClass("disabled");
            } else {
                $("#btnAfopSubmit").addClass("disabled");
            }
        });
    };

    var manageAfopSubmitButtonVisibility = function () {

        if ($(".component-tabs li.tab-current").attr("id") == "fop-tab-creditCardTypes-0") { //credit card tab 
            changeSaberCreditCardIconsVisibility(false); //once the tab is loaded icon set shows by default, so we need to hide it

            if (Y.all('[name=afop]:checked')._nodes.length > 0 && Y.all('[name=afop]:checked')._nodes[0].id == "rdBtnCC") { //CC payment option is selected

                if (isAfopCreditCardEnabled) { //in case credit card options are returned from afop service

                    if (isInstallmentEnabled) {
                        changeAfopSubmitButtonVisibility(true);

                        changeSaberCreditCardIconsVisibility(true);

                        var afopCookie = getCookie();

                        handleIBMPGCountry(afopCookie);
                    }
                    else {
                        changeAfopSubmitButtonVisibility(false);
                    }

                } else { //means default (sabre) credit card is the only credit card option, so afop has to be hidden
                    changeSaberCreditCardIconsVisibility(true);

                    changeAfopSubmitButtonVisibility(false);
                }

            } else { //means one of the afop methods other than CC is selected, so button shown has to be afop
                changeAfopSubmitButtonVisibility(true);
            }
        } else { //means it's either paypall or bank transfer, so we should not show afop submit
            changeAfopSubmitButtonVisibility(false);

        }

    };

    var changeAfopSubmitButtonVisibility = function (isVisible) {

        if (isVisible) {
            $("#btn-search").hide();
            $("#btnAfopSubmit").show();
        } else {
            $("#btn-search").show();
            $("#btnAfopSubmit").hide();
        }
    };

    var showRelatedCreditCardPaymentOption = function () {

        if (isAfopCreditCardEnabled) {
            if (isFullPaymentSelected()) {
                switchCreditCardPaymentOptions(true, true);
            } else {
                switchCreditCardPaymentOptions(false, true);
            }
        } else {
            switchCreditCardPaymentOptions(true, true);

            changeSaberCreditCardIconsVisibility(true);
        }
    };

    var hideCreditCardSectionOnPageLoad = function () {

        changeSaberCreditCardIconsVisibility(false);

        $("#customhtmlPaymentRulesdisclaimer .componentContentHolder").slideUp(0);

        this.Y.on('contentready', function () {
            try {
                if (!document.getElementById("rdBtnCC").checked)
                    changeCreditCardInputVisibility(false, false);

                //if ($("[name=afop]").length == 1) //Expand the option if it's the only available one
                //    $("[name=afop]")[0].click();
            }
            catch (error) {
                handleErrorLoadPaymentOptions(error);
            }

        }, '.countriesOptions.wasTranslated');

        changeCreditCardInputVisibility(false, false);

        if ($("[name=afop]").length == 1) //Expand the option if it's the only available one
            $("[name=afop]")[0].click();

    };

    var addUpdateStaticTexts = function () {
        $("#fop-tab-creditCardTypes-0 a").text(Resources('custom.js.all.afop.tab.CC.title'));

        $("#multi-fop-body-0 h5").text('');

        //$("#tcc_1").before('<div id="afopTerms"><p>The credit card section of the payment page should be able to show legal text based on selected billing county (e.g.: the billing country is Brazil show one message, if the country is UK show another message)</p></div>');
    };

    var rebuildCreditCardPaymentMethod = function (availablePaymentMethods) {
        var creditCardOption = { code: "CC", name: 'Credit Card' };

        var creditCardPaymentHtml = buildPaymentMethodContent(creditCardOption);

        $("#multi-fop-header-0").after(creditCardPaymentHtml);

        if (isInstallmentEnabled) {
            enableInstallment(availablePaymentMethods);
        } else {
            $("#afopContainer_CC .afopBody").remove();
        }

        cloneCreditCardIcons();
        checkAndAddPostePay(Y);
    };

    var isInstallmentSupported = function (availablePaymentMethods) {

        for (var j = 0; j < availablePaymentMethods.length; j++) {
            for (var i = 0; i < paymentTypes.length; i++) {
                if (paymentTypes[i].code == availablePaymentMethods[j].Code && paymentTypes[i].isCreditCard && availablePaymentMethods[j].Installment) {
                    return true;
                }
            }
        }

        return false;
    };

    var enableInstallment = function (availablePaymentMethods) {
        $("#afopContainer_CC .afopTitleText").append("<br/><span class='afopTitleTextInstallment'>" + Resources('custom.js.all.afop.Installment.title') + "</span>");

        var installmentBody = '<div id="afopBodyMonthly" class="afopLeft">' + Resources('custom.js.all.afop.Installment.body') + '</div>';;

        $("#afopContainer_CC .afopBody").after(installmentBody);


        $("[name=creditCardPayment]").click(function () {
            manageAfopSubmitButtonVisibility();
        });

        $("#rdBtnPaymentFull").click(function () {
            switchCreditCardPaymentOptions(true, true);
        });

        $("#rdBtnPaymentMonthly").click(function () {
            switchCreditCardPaymentOptions(false, true);
        });

        $("#rdBtnPaymentFull").click();

        changeMonthlyInstallmentBodyVisibility(false, false);

        showInstallmentCardImages(availablePaymentMethods);
    };

    var showInstallmentCardImages = function (availablePaymentMethods) {

        var transparentGif = sswAssetsUrl + "images/transparent.gif";


        $("#afopContainer_CC .afopIcon").html('');

        var imgHtml = '';

        for (var j = 0; j < paymentTypes.length; j++) {
            for (var i = 0; i < availablePaymentMethods.length; i++) {
                var method = availablePaymentMethods[i];

                if (paymentTypes[j].code != method.Code)
                    continue;

                if (!paymentTypes[j].isCreditCard)
                    continue;

                if (!method.Installment)
                    continue;

                var imgClass = "card-icon card-" + method.Code.toLowerCase();

                //imgClass = imgClass + (method.Installment ? "" : " grayedOut");

                imgHtml = imgHtml + '<img class="' + imgClass + '" src="' + transparentGif + '" />';
            }
        }

        imgHtml = "<div class='monthlyInstallmentIcons'>" + imgHtml + "</div>";

        $("#afopContainer_CC #afopBodyMonthly").prepend(imgHtml);
    };

    var buildPaymentMethodContent = function (paymentMethod) {
        var title = Resources('custom.js.all.afop.' + paymentMethod.code + '.title');
        var body = Resources('custom.js.all.afop.' + paymentMethod.code + '.body');

        if (title == undefined)
            title = 'Title resource is not defined for ' + paymentMethod.code;

        if (paymentMethod.code == 'CC' && isDebitCardEnabled) //if debit card option is enabled , credit card payment section should display 'I want to pay with credit card' and not 'I want to pay with credit/debit card'
            title = Resources('custom.js.all.afop.CConly.title');

        if (body == undefined)
            body = 'Body resource is not defined for ' + paymentMethod.code;

        //Different text should be displayed for Poland flights - for Sofort Banking option
        if (paymentMethod.code == "SB" && Y.airports[WhiteLabel.getIbeData().itineraryParts[0].departureAirport].country == "PL") {
            body = getResource('custom.js.all.afop.SB.Poland.body');
        }

        var template = '<div id="afopContainer_{{code}}" class="afopLeft afopOption"><div class="afopLeft afopTitle"><div class="afopLeft afopTitleContent"><input type="radio" name="afop" id="rdBtn{{code}}" value="{{code}}" /><span class="afopTitleText">{{title}}</span></div><span class="afopIcon"></span></div><div class="afopLeft afopBody">{{body}}</div></div>';

        template = template.replace('{{title}}', title);
        template = template.replace('{{body}}', body);
        template = template.replace(/{{code}}/g, paymentMethod.code);

        return template;
    };


    var manageTabs = function () {
        manageAfopSubmitButtonVisibility();

        $(".component-tabs li a").click(function () {
            $('.multi-fop-section').addClass('afopTabChange');

            Y.on('contentready', function () {

                try {
                    log('Tabs reloaded #tbPayPalLogo');

                    manageAfopSubmitButtonVisibility();
                } catch (error) {
                    handleErrorLoadPaymentOptions(error);
                }

            }, '.multi-fop-section:not(.afopTabChange)');

            if ($(this).parent().attr("id") == "fop-tab-creditCardTypes-0") {
                $(".afopOption").show();
            } else {
                $(".afopOption").hide();
            }
        });
    };


    var isDebitCardPaymentEnabled = function (availablePaymentMethods) {
        for (var i = 0; i < availablePaymentMethods.length; i++) {
            if (availablePaymentMethods[i].Code == 'DC')
                return true;
        }

        return false;
    };


    var isAfopCreditCardSupported = function (availablePaymentMethods) {
        for (var j = 0; j < availablePaymentMethods.length; j++) {
            for (var i = 0; i < paymentTypes.length; i++) {

                if (paymentTypes[i].code == availablePaymentMethods[j].Code && paymentTypes[i].isCreditCard)
                    return true;
            }
        }

        return false;
    };

    var isFullPaymentSelected = function () {
        var selectedOpt = Y.all("[name=creditCardPayment]:checked")._nodes[0];

        if (selectedOpt && selectedOpt.id == "rdBtnPaymentFull")
            return true;

        return false;
    };

    var changeSaberCreditCardIconsVisibility = function (isVisible) {
        if (isVisible) {
            $(".fop-creditCardTypes").show();
        } else {
            $(".fop-creditCardTypes").hide();
        }
    };

    var changeCreditCardInputVisibility = function (isVisible, animationEnabled) {
        var speed = animationEnabled ? 400 : 0;

        if (isVisible) {
            $(".payment-details.credit-card-form").slideDown(speed);
        } else {
            $(".payment-details.credit-card-form").slideUp(speed);
        }
    };

    var changeMonthlyInstallmentBodyVisibility = function (isVisible, animationEnabled) {
        var speed = animationEnabled ? 400 : 0;

        if (isVisible) {
            $("#afopBodyMonthly").slideDown(speed);
        } else {
            $("#afopBodyMonthly").slideUp(speed);
        }
    };

    var switchCreditCardPaymentOptions = function (isFullPayment, animationEnabled) {
        changeCreditCardInputVisibility(isFullPayment, animationEnabled);

        changeMonthlyInstallmentBodyVisibility(!isFullPayment, animationEnabled);

        changeSaberCreditCardIconsVisibility(isFullPayment);
    };

    var cloneCreditCardIcons = function () {
        var cardIcons = $(".multi-fop-section label.card-icon").clone();

        $(cardIcons).find('span').remove(); //spans are not needed

        $("#afopContainer_CC .afopIcon").append(cardIcons);
    };

    var afopBankNotification = function (country) {

        $('div.afopOption').filter('div[id != afopContainer_CC]').each(function (i, afopitem) {
            var $cardCode = $(afopitem).find('input[name=afop]').attr('value');
            var $notification = Resources('custom.js.all.afop.banknotification.' + country + '.' + $cardCode);

            if ($notification) {
                $(afopitem).find('.afopBody').children('p:first').before('<p class="afopbanknotification">' + $notification + '</p> ');
            }
        });
    };
    var GetIBMBankMessage = function (country, cardCode) {
        var bankNotificationMessage = Resources('custom.js.all.afop.banknotification.' + country + '.' + cardCode);
        return bankNotificationMessage;
    };
    var stopSpinner = function () {
        if (sabre.config.pageCode != etihad.pageCodes.PaymentPage)
            return;

        var elementsToBeAffected = "#payc_1,#multi-fop-body-0,#customhtmlPaymentRulesdisclaimer";

        $(elementsToBeAffected).show();

        hideLoadingDiv();
    };

    var checkAndAddPostePay = function (Y) {

        if (Y.airports[WhiteLabel.getIbeData().itineraryParts[0].departureAirport].country != "IT") return;

        var visaIcon = $("#afopContainer_CC .card-icon.card-vi");
        var visaBodyIcon = $("#multi-fop-body-0 .multi-fop-section .card-icon.card-vi").parent();

        if (visaIcon && visaIcon[0])
            visaIcon.after(visaIcon[0].outerHTML.replace("vi", "postepay"));

        if (visaBodyIcon && visaBodyIcon.find('.card-icon.card-vi')[0]) {
            var self = this;
            visaBodyIcon.after(visaBodyIcon.clone().find('.card-icon.card-vi')[0].outerHTML.replace("vi", "postepay"));
            $('.multi-fop-section').addClass('postepayactive');
        }
    };

    var sortPaymentOptions = function (availablePaymentOptions) {
        try {
            if (typeof availablePaymentOptions == 'undefined')
                return;

            for (var j = 0; j < availablePaymentOptions.length - 1 ; j++) {

                var prev = getPaymentMethodByCode(availablePaymentOptions[j].Code);

                var next = getPaymentMethodByCode(availablePaymentOptions[j + 1].Code);

                if (prev == null || next == null)
                    continue;

                if (next.containerSelector == '' || prev.containerSelector == '')
                    continue;

                var nextinserted = next.containerSelector;
                var previnserted = prev.containerSelector;

                if (ccindex >= 0 && j < ccindex) {
                    $(previnserted).insertBefore($('#afopContainer_CC'));
                } else {
                    $(nextinserted).insertAfter($(previnserted));
                }
            }
        } catch (e) {
            if (typeof exLogger != 'undefined') {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }
    };

    var getPaymentMethodByCode = function (code) {

        for (var i = 0; i < paymentTypes.length; i++) {
            if (paymentTypes[i].code == code)
                return paymentTypes[i];
        }

        return null;
    };

    var insertDebitCardNotification = function () {
        var text = Resources("custom.js.all.payc.payWithDebitCard.title");

        if (text == undefined)
            return;

        if ($("#afopContainer_CC .afopTitle").length > 0) {
            if ($("#debitCardPaymentText").length == 0)
                $("#afopContainer_CC .afopTitle").append('<br/> <div id="debitCardPaymentText">' + text + '<div>');
            else
                $("#debitCardPaymentText").show();
        } else {
            $("#debitCardPaymentText").hide();
        }
    };

    var AdjustTermsAndConditions = function (availablePaymentMethods) {
        try {
            if (typeof availablePaymentMethods == 'undefined' || availablePaymentMethods.length <= 0)
                return;

            var lastPaymentOption = availablePaymentMethods[availablePaymentMethods.length - 1];

            if (lastPaymentOption && lastPaymentOption.Code == 'CC') {
                $('#terms_and_conditions').addClass('adjustTAndC');
            }
        } catch (e) {
            if (typeof exLogger != 'undefined') {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }
    };
    //**********************


    var errorCookieName = 'afoperror';

    var getCookieName = function () {
        var ibeData = WhiteLabel.getIbeData();

        var departureAirportCode = ibeData.itineraryParts[0].departureAirport;

        // adding departure airport to cookie name. So that two or more sabre sessions can work in different tabs.
        // i.e. sabre can have multiple sessions using ?execution=e1s1 , ?execution=e2s1 etc.
        return 'afop_' + departureAirportCode;
    };

    var getCookie = function () {
        var cookieName = getCookieName();
        if (!this.Y.Cookie.exists(cookieName)) {
            return undefined;
        }
        log('Cookie exists');

        var cookieString = this.Y.Cookie.get(cookieName);

        if (!cookieString)
            return undefined;

        var result = this.Y.JSON.parse(cookieString);
        log('Cookie parsed');
        return result;
    };

    var setCookie = function (value) {
        log('Setting cookie ' + value);

        var cookieName = getCookieName();
        var stringified = this.Y.JSON.stringify(value);
        this.Y.Cookie.set(cookieName, stringified);  // setting as a session cookie.
        log('Cookie set.');
    };

    var setConfirmationPageCookie = function (cname, cvalue, minutesToExpire) {

        try {
            var d = new Date();
            d.setTime(d.getTime() + (minutesToExpire * 60 * 1000));
            var expires = "expires=" + d.toGMTString();
            document.cookie = cname + "=" + cvalue + "; " + expires;
        } catch (e) {
            if (typeof exLogger != 'undefined') {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }

    };

    var removeCookie = function () {
        this.Y.Cookie.remove(getCookieName());
    };

    var removeErrorCookie = function () {
        this.Y.Cookie.remove(errorCookieName);
    };

    var setErrorCookie = function (value) {
        var stringified = this.Y.JSON.stringify(value);
        this.Y.Cookie.set(errorCookieName, stringified);  // setting as a session cookie.
    };


    var getErrorCookie = function () {

        if (!this.Y.Cookie.exists(errorCookieName)) {
            return undefined;
        }

        var cookieString = this.Y.Cookie.get(errorCookieName);

        if (!cookieString)
            return undefined;

        var result = this.Y.JSON.parse(cookieString);

        log('Error cookie exists.');
        return result;
    };

    var getResource = function (key) {

        var value = Resources(key);

        if (value == undefined)
            return "Key value is not defined for [" + key + "]";

        return value;
    };

    return {
        instantiate: instantiate,
        bootstrapBusPoliPay: bootstrapBusPoliPay
    };
}();


/// imported /// import BusinessRules/BusinessRuleEngine.js
function BusinessRuleEngine() {
    this.Rules = '';
}

BusinessRuleEngine.prototype = function () {

    var initialize = function () {
        switch (sabre.config.pageCode) {
            case etihad.pageCodes.FlightsSearchPage:
                clearLocalStorage();

                return;

            case etihad.pageCodes.FlightsResultsPage:
                clearLocalStorage();

                break;

            default:
                break;
        }

        getRules();
    };

    var getRules = function () {
        if (typeof (Storage) !== "undefined") {
            if (localStorage.BusinessRules) {
                this.Rules = JSON.parse(localStorage.BusinessRules);

                importRules();
            } else {
                callWebService();
            }
        }
        else {// Sorry! No web storage support..
            callWebService();
        }
    };



    /// all modern browsers support cross domain ajax calls.
    /// IE10+, Firefox 3.6+, Safari 4.0+, Chrome 6+, Opera 12.1+
    /// Reference: http://caniuse.com/#search=cors
    var crossDomainAjaxSupported = function () {

        return ($.support.cors);
    };


    var callWebService = function () {
        var xDomainSupported = crossDomainAjaxSupported();

        var dataType = xDomainSupported ? 'json' : 'jsonp'; // using jsonp for only not supported browsers as per etihad policy.

        var serviceUrl = buildServiceUrl();
        $.ajax({
            async: false,
            type: 'GET',
            dataType: dataType,
            url: serviceUrl,
            cache: false,                   // We do not want caching as response depends on current time.
            jsonp: 'callback',              // this will pass a ?callback= querystring parameter. 
            // payment service will check this and if the dataType is jsonp, response will be encapsulated in a js method.
            success: function (data) {
                onSuccessCall(data);
            },
            error: function (xhr, txtStat, errThrown) {

                if (window.console)
                    console.log("==== Business Rules Web Service Call Failed ===== " + xhr);
            }
        });
    };

    var buildServiceUrl = function () {
        var serviceUrl = externalResourcesConfigUrls.WebModuleUrl + '/airportrules.svc';

        var ibeData = WhiteLabel.getIbeData();

        if (ibeData.itineraryParts.length < 1) return null;

        var airportCodes = ibeData.itineraryParts[0].departureAirport;
        serviceUrl += "/" + encodeURIComponent(airportCodes);

        return serviceUrl;
    };

    var onSuccessCall = function (rules) {

        if (rules.ErrorMessage != null) {
            if (window.console)
                console.log("==== Business Rules Web Service Call Response ===== " + rules.ErrorMessage);

            return null;
        }

        if (rules.AirportRules != null && rules.AirportRules.length > 0) {
            var businessRules = new Array();

            for (var i = 0; i < rules.AirportRules.length; i++) {
                businessRules.push(rules.AirportRules[i].RuleCode);
            }

            this.Rules = businessRules;

            try {
                localStorage.BusinessRules = JSON.stringify(this.Rules);
            } catch (e) {
                if (typeof exLogger != 'undefined' && exLogger) {
                    exLogger.log(e, exLogger.ErrorLevel.Error);
                }

            }

            importRules();
        }

        return null;
    };

    var clearLocalStorage = function () {
        if (typeof (Storage) !== "undefined") {
            localStorage.removeItem("BusinessRules");
        }
    };

    var importRules = function () {
        if (this.Rules.length < 1) return;

        for (var i = 0; i < this.Rules.length; i++) {
            var rule = this.Rules[i];

            if (window.console)
                console.log("==== Business Rules [" + rule + "] =====");

            switch (rule) {
                case "CanadaLegal":
                    var canadaLegal = new RuleCanadaLegal();

                    canadaLegal.execute();

                    break;
                default:
            }
        }
    };

    return {
        initialize: initialize
    };
}();




/// imported /// import BusinessRules/RuleCanadaLegal.js
function RuleCanadaLegal() {
}

RuleCanadaLegal.prototype = function () {

    var execute = function () {
        YUI().use('node', 'cookie', 'json-stringify', 'json-parse', 'node-base', 'selector-css3', bindTrigger);
    };

    var bindTrigger = function (Y) {
        switch (sabre.config.pageCode) {
            case etihad.pageCodes.ConfirmationPage:
                updateConfirmationPage();

                break;
            default:
                Y.on('contentready', function () {
                    executeBusinessRule();
                }, '.cartPrices .prices-amount');

                setInterval(function () {

                    if (!$($("#cart-total-price .prices-amount")[1]).hasClass("ruleExecuted")) {
                        executeBusinessRule();

                        checkCartUpdates();
                    }
                }, 500);
                break;
        }
    };

    var intervalIdCartLoading;

    var checkCartUpdates = function () {

        Y.on('contentready', function () {

            if (intervalIdCartLoading > 0)
                return;

            intervalIdCartLoading = setInterval(function () {
                Y.on('contentready', function () {
                    executeBusinessRule();

                    clearInterval(intervalIdCartLoading);

                    intervalIdCartLoading = null;

                    checkCartUpdates();

                }, '#cart-component:not(.loading)');

            }, 1000);

        }, '#cart-component.loading');
    };

    var executeBusinessRule = function () {

        updateSectionTitle();

        switch (sabre.config.global.flowType) {
            case "BOOKING":
                updateCart();
                break;

            case "EXCHANGE": //MYB - Change flight
                updateCartForManageYourBooking();
                break;

            case "REDEMPTION":
                updateCart();
                break;
            default:
        }

        $($("#cart-total-price .prices-amount")[1]).addClass("ruleExecuted");
    };

    var updateCart = function () {
        $(".price-type.li-element-fare ol").append($(".price-element-details span[data-wl-translate='Tax.YQ']").closest("li"));

        $(".price-type").each(function () {

            if ($(this).hasClass("li-element-ancillaries"))
                return;

            calculateTotalAndSet($(this).find("ol li span.prices-amount"), $(this).find("span.price-value span.prices-amount"));
        });

        var fuelTotal = 0;
        $(".price-element-details span[data-wl-translate='Tax.YQ']").parent().prev().find("span.prices-amount").each(function () {
            fuelTotal = fuelTotal + parseFloat($(this).text());
        });

        var fuelItems = $(".price-element-details span[data-wl-translate='Tax.YQ']").parent().parent();

        if (fuelItems.length > 1) {
            for (var i = 1; i < fuelItems.length ; i++) {
                $(fuelItems[i]).remove();
            }

            $(fuelItems[0]).find("span.prices-amount").text(fuelTotal.toFixed(2));
        }
    };

    var updateCartForManageYourBooking = function () {

        var fuelTitle = Resources("Tax.YQ") + " (YQ)";

        var fuelGroup = $(".price-element-details span[data-wl-translate='Tax.Group.YQ']");

        $("#price-info-exchange .details-ol-element-exchangeFare ul").first().before(fuelGroup.closest("li"));

        if ($(".updateTaxYQTitle").length < 1) {
            fuelGroup.after('<span class="updateTaxYQTitle">' + fuelTitle + '</span>');
        }

        fuelGroup.hide();

        calculateTotalAndSet($("#price-info-exchange .details-ol-element-exchangeFare ul").first().prevAll().find(".prices-amount"), "#price-value-exchangeFare .prices-amount");

        calculateTotalAndSet("#price-info-exchange .details-ol-element-taxes li .prices-amount", "#price-value-taxes .prices-amount");
    };

    var calculateTotalAndSet = function (array, itemToSet) {

        if (array.length < 1)
            return;

        var a = 0;

        var isRedeption = false;

        $(array).each(function () {
            if ($(this).prev().attr("data-wl-translate") == "MILES") {
                isRedeption = true;
            }

            a = a + parseFloat($(this).text());
        });

        if (isRedeption)
            return;

        $(itemToSet).text(a.toFixed(2));
    };

    var updateSectionTitle = function () {

        var currentTitle = $("span[data-wl-translate='label.cart.priceSummary.taxes']");

        if (currentTitle.length < 1)
            return;

        var titleResourceKey = "label.cart.priceSummary.taxes.CanadaLegal";

        var title = Resources(titleResourceKey);

        if (title == undefined)
            title = "Title resource is missing";

        currentTitle.after('<span>' + title + '</span>');

        currentTitle.remove();
    };

    var updateConfirmationPage = function () {
        $("dt span[data-wl-translate='Tax.YQ']").each(function () {

            var fuelText = $(this).parent();
            var fuelAmount = $(this).parent().next();

            var rootdt = $(this).parent().prevAll().closest("dt:not(.expanded):not(.total)").last();

            var taxPassType = $(rootdt).find("span[data-wl-translate*=passengerType]").attr("data-wl-translate");

            $(".details-content dt[data-wl-translate='label.paymentsummary.fare']").parent().find("dt:not(.expanded):not(.total)").each(function () {
                var farePassType = $(this).find("span[data-wl-translate*=passengerType]").attr("data-wl-translate");

                if (taxPassType == farePassType) {
                    $(this).next().after(fuelAmount);
                    $(this).next().after(fuelText);
                }
            });
        });

        var fareTotal = 0;

        $(".details-content dt[data-wl-translate='label.paymentsummary.fare']").parent().find("dd:not(.total) span.prices-amount").each(function () {
            if ($(this).prev().attr("data-wl-translate") == "MILES")
                return;

            fareTotal = fareTotal + parseFloat($(this).text());
        });

        fareTotal = Math.round(fareTotal * 100) / 100;

        $(".details-content dt[data-wl-translate='label.paymentsummary.fare']").next().find("span.prices-amount").each(function () {
            if ($(this).prev().attr("data-wl-translate") == "MILES")
                return;

            $(this).text(fareTotal.toFixed(2));
        });


        $(".payment-summary-fare-amount span.prices-amount").each(function () {
            if ($(this).prev().attr("data-wl-translate") == "MILES")
                return;

            $(this).text(fareTotal.toFixed(2));
        });

        var taxTotal = 0;

        var taxGrandTotalElement;

        var subTotal = 0;

        var subTotalElement;

        $(".details-content dt[data-wl-translate='label.paymentsummary.taxes']").parent().find("dd").each(function () {

            if ($(this).hasClass("total")) {
                taxGrandTotalElement = this;

                return true;
            }

            if (!$(this).hasClass("expanded")) {
                if (subTotalElement != null) {
                    $(subTotalElement).find("span.prices-amount").text(subTotal.toFixed(2));

                    taxTotal = taxTotal + subTotal;

                    subTotal = 0;
                }

                subTotalElement = this;

                return true;
            }

            if ($(this).hasClass("expanded")) {

                subTotal = subTotal + parseFloat($(this).find("span.prices-amount").text());

                subTotal = Math.round(subTotal * 100) / 100;
            }

            if ($(this).next().length < 1) {
                $(subTotalElement).find("span.prices-amount").text(subTotal.toFixed(2));

                taxTotal = taxTotal + subTotal;
            }
        });

        $(taxGrandTotalElement).find("span.prices-amount").text(taxTotal.toFixed(2));

        $(".payment-summary-taxes-amount span.prices-amount").text(taxTotal.toFixed(2));
    };

    var log = function (message) {
        if (window.console)
            console.log("==== Canada Legal Rule ===== : " + message);
    };

    return {
        execute: execute
    };
}();








/// imported /// import MybExtrasPage.js
function mybExtrasPage() {
}

mybExtrasPage.prototype = function () {

    var UpdateExtraPage = function (Y) {
        if (sabre.config.pageCode != etihad.pageCodes.ExchangeExtrasPage)
            return;

        try {
            var $country = null;
            var ibeData = WhiteLabel.getIbeData();
            var $baggageTypePanels = $.map($('.ancillary-component div.ancillary-item'), function (item) { return $(item).attr('id'); });

            if (ibeData.originalBookingData.itineraryParts.length <= 0)
                return;

            var allowPieces = CheckRoutes(ibeData.originalBookingData.itineraryParts,Y);
                        

            if ($.inArray("BG_WGT", $baggageTypePanels) >= 0 && $.inArray("BG_PCS", $baggageTypePanels) >= 0) {
                HandleBaggageOptions(allowPieces);
            }
        } finally {
            StopSpinner();
        }
    },
    HandleBaggageOptions = function (allowPieces) {
            if (allowPieces)
                $('div.ancillary-item-BG_WGT').hide();
            else
                $('div.ancillary-item-BG_PCS').hide();
        
    },
    CheckRoutes = function (BookingData,Y) {
        var northAmerica = false;
        
        $.each(BookingData, function (i, item) {
            var departureCountry = null;
            var arrivalCountry = null;
            Y.use('wl-airport-list', function (Y) { departureCountry = Y.airports[item.departureAirport].country; arrivalCountry = Y.airports[item.arrivalAirport].country; });
            if (isNorthAmerica(departureCountry) || isNorthAmerica(arrivalCountry)) {
                northAmerica = true;
                return false;
            }
        });
        return northAmerica;
    },
    isNorthAmerica = function (country) {
        if(country == "")
            throw 'Empty MYB Station in Extra Page.' ;

        if ($.inArray(country.toLowerCase(), ['us', 'ca']) >= 0) {
            return true;
        }

        return false;
    },
    StopSpinner = function () {
        $('.ancillary-component').css('background', "transparent");
        $('.ancillary-component').css('opacity', '1');
        $('.ancillary-component').css('pointer-events', 'auto');
    };
    return {
        UpdateExtraPage: UpdateExtraPage
    };
}();



/// imported /// import PassengerPage.js
function VipPassengerPage() {

}
VipPassengerPage.prototype = function () {
    var instantiate = function (Y) {
        $(window).ready(function () {
            if (sabre.config.pageCode == etihad.pageCodes.PassengerPage) {
                //setting vip email for vip flow  
                if (document.body.className.contains('VIP')) {
                    getSecondEmailAddress("P");
                }

                $('#btn-search').on('click', function () {
                    createPassengerJson();
                });
            }
        });
    };

   
    createPassengerJson = function () {
        var passengerDivList = $("li[id^=passenger-item-]");

        var passengerJSON = [];
        $.each(passengerDivList, function (index, value) {
            var passengerType = $(value).data('wl-value');
            if (passengerType == "ADT"
                || passengerType == "INF") {
                var item = {};
                var dobDate = $("#dob-" + index + "_0").val();
                var dobMonth = $("#dob-" + index + "_1").val();
                var dobYear = $("#dob-" + index + "_2").val();
                if (dobDate && dobMonth && dobYear) {
                    item['PassengerType'] = passengerType;
                    item['Age'] = calculateAge(Date.UTC(dobYear, parseInt(dobMonth) - 1, dobDate, 0, 0, 0), "M");
                    item['PassengerIndex'] = index;
                    passengerJSON.push(item)
                }
            }
        });

       //set the json string to cookie        
       Y.Cookie.set("passengerDOB_" + getUrlExecutionCodeInitial(), JSON.stringify(passengerJSON));
    }


    var getSecondEmailAddress = function (RDB) {

        var request = $.ajax({
            url: externalResourcesConfigUrls.WebModuleUrl + "/vipemail.svc/" + sabre.config.global.language + "/" + RDB,
            type: "Get",
            dataType: "jsonp"
        });

        request.done(function (data) {
            if (data.EmailAddress)
                $('#email-0').val(data.EmailAddress);
        });

        request.fail(function (jqXHR, textStatus) {
            console.log("Request failed: couldn't get email address from web module. Error: " + textStatus);
        });
    };

    return {
        instantiate: instantiate
    };
}();


function FormatPassengerPage() {
}

FormatPassengerPage.prototype = function () {

    var instantiate = function (Y) {
        $(window).ready(function () {
            var isSecureInfoMandatory = false;
            var itineraryParts = WhiteLabel.getIbeData().itineraryParts;
            if (itineraryParts != null && itineraryParts != undefined && itineraryParts.length > 0) {
                $.each(itineraryParts, function () {
                    var airportCountry = null;
                    var airportCode = this.departureAirport;
                    Y.use('wl-airport-list', function (Y) {
                        airportCountry = Y.airports[airportCode].country;
                    });
                    if (airportCountry == "US") {
                        isSecureInfoMandatory = true;
                    }
                });
                $.each(itineraryParts, function () {
                    var airportCountry = null;
                    var airportCode = this.arrivalAirport;
                    Y.use('wl-airport-list', function (Y) {
                        airportCountry = Y.airports[airportCode].country;
                    });
                    if (airportCountry == "US") {
                        isSecureInfoMandatory = true;
                    }
                });

            }            

            if (sabre.config.pageCode !== etihad.pageCodes.EditPaxDetailsPage && !isSecureInfoMandatory)
            {
                $(".psngCommonDetails", $('.passenger-type-ADT')).css("display", "none");
            }
                      
            var currentSiteLanguage = sabre.config.global.language;
            if (currentSiteLanguage.toLowerCase().indexOf('en') < 0) {
                implementWaterMarkText();
            }
            viewMealDescription();
            preventNonEnglishCharacters();
            toolTipImplement();
            contactInformationAsterrixMarkAdjustment();

            
        });

        wheelchairAndBassinetDisclaimer();

        //to expand the details for the first passenger
        Y.use('node-event-simulate', function () {
            Y.one('body.CHANGE_PAX_DETAILS_PAGE li#passenger-item-0 a.toggle-passenger, body.EXCHANGE_PASSENGERS_PAGE li#passenger-item-0 a.toggle-passenger').simulate('click');
        });
    };

    var previousNameTextFieldValue = '';
    implementWaterMarkText = function () {


        var useEnglishMessage = Resources('custom.js.content.errorMsg.UseEnglish').trim();

        $.each($("input[id^='first_name-'],input[id^='last_name-']"), function () {
            if ($(this).val() == '') {
                $(this).addClass('waterMark');
                $(this).val(useEnglishMessage);
            }
        });

        $("input[id^='first_name-'],input[id^='last_name-']").on('focus', function () {
            $(this).removeClass('waterMark');
            if ($("#" + this.id).val() == useEnglishMessage)
                $("#" + this.id).val('');
            else
                previousNameTextFieldValue = $("#" + this.id).val();
        });
        $("input[id^='first_name-'],input[id^='last_name-']").on('blur', function () {
            if ($("#" + this.id).val() == '') {
                $(this).addClass('waterMark');
                $("#" + this.id).val(useEnglishMessage);
            }
            previousNameTextFieldValue = '';
        });

    };

    toolTipImplement = function () {
        var emailToolTip = Resources('custom.js.content.toolTip.emailText');
        var mobileToolTip = Resources('custom.js.content.toolTip.mobileText');

        var emailDivLabel = $("#contactInfo-email-1");
        var phoneDiv = $('[name="contactInfo.phoneNumbers[0].number.raw"]');

        var internalIconDiv = $("<div></div>").addClass('help-icon');
        var toolTipIconDiv = $("<div></div>").attr('id', 'toolTipIcon').html(internalIconDiv);

        var toolTipInfoDiv = $("<div></div>").attr('id', 'toolTipText').css({ 'display': 'none', 'width': '180px' }).addClass("tooltipPassenger").html(emailToolTip);


        var internalIconDivPhone = $("<div></div>").addClass('help-icon');
        var toolTipIconPhoneDiv = $("<div></div>").attr('id', 'toolTipIconPhone').html(internalIconDivPhone);;


        var toolTipPhoneInfoDiv = $("<div></div>").attr('id', 'toolTipTextPhone').css({ 'display': 'none', 'width': '180px' }).addClass("tooltipPassenger").html(mobileToolTip);



        if (sabre.config.global.language.toLowerCase().indexOf('ar') >= 0) {
            toolTipIconDiv.css({ 'position': 'relative', 'float': 'left' });
            toolTipIconPhoneDiv.css({ 'position': 'relative', 'float': 'left' });
        }
        else {
            toolTipIconDiv.css({ 'position': 'relative', 'float': 'right' });
            toolTipIconPhoneDiv.css({ 'position': 'relative', 'float': 'right' });
        }

        emailDivLabel.after(toolTipInfoDiv).after(toolTipIconDiv);

        phoneDiv.after(toolTipPhoneInfoDiv).after(toolTipIconPhoneDiv);

        $("#toolTipIcon").mouseover(function () {

            if (sabre.config.global.language.toLowerCase().indexOf('ar') >= 0) {
                $("#toolTipText").css({
                    position: 'absolute',
                    left: emailDivLabel.width() - 25,
                    top: $("#toolTipIcon").position().top - 55
                });
            }
            else {
                $("#toolTipText").css({
                    position: 'absolute',
                    left: emailDivLabel.width() + 52,
                    top: $("#toolTipIcon").position().top - 55
                });
            }


            $("#toolTipText").show();
        });
        $('#toolTipIcon').on("mouseout", function () { $("#toolTipText").hide(); });

        $("#toolTipIconPhone").mouseover(function () {

            if (sabre.config.global.language.toLowerCase().indexOf('ar') >= 0) {
                $("#toolTipTextPhone").css({
                    position: 'absolute',
                    left: phoneDiv.position().left - 232,
                    top: $("#toolTipIconPhone").position().top - 55
                });
            }
            else {
                $("#toolTipTextPhone").css({
                    position: 'absolute',
                    left: phoneDiv.parent().width() + 20,
                    top: $("#toolTipIconPhone").position().top - 55
                });
            }
            $("#toolTipTextPhone").show();
        });
        $('#toolTipIconPhone').on("mouseout", function () { $("#toolTipTextPhone").hide(); });
    };

    preventNonEnglishCharacters = function () {
        $("input[id^='first_name-'],input[id^='middle_name-'],input[id^='last_name-']").on('keypress', function (e) {
            if (!(parseInt(e.which) >= 0 && parseInt(e.which) <= 127)) {
                e.preventDefault();
                if (!($('div[id^=opacityScreen]').length)) {
                    displayAlertMessagePopup();
                }
            }
        });
        $("input[id^='first_name-'],input[id^='middle_name-'],input[id^='last_name-']").on('paste', function () {
            var element = this;
            setTimeout(function () {
                var text = $(element).val();
                var regEx = /^[a-zA-Z0-9]*$/;
                for (count = 0; count < text.length; count++) {
                    if (!(regEx.test(text[count]))) {
                        var text = $(element).val('');
                        if (!($('div[id^=opacityScreen]').length)) {
                            displayAlertMessagePopup();
                            break;
                        }
                    }

                }
            }, 100);
        });
    };

    displayAlertMessagePopup = function () {

        var bodyText = Resources('custom.js.all.popup.passengerpage.nonEnglish');

        var dialog = new PassengerMessageDialog({
            id: "divPassengerAlertMessageWindow",
            content: '<div>' + bodyText + '</div>'
        });

        dialog.showPassengerMessageDialog();

    }


    /* Start Alert confirmation dialog 
    options:
    id          the id for the popup
    left        number specifying the left position
    top         number specifying the top position
    content     the content
    */

    function PassengerMessageDialog(options) {
        this.content = options.content;
        this.id = options.id;
        this.extraClass = options.className;
    }

    PassengerMessageDialog.prototype = function () {

        var close = function (id) {
            $("#" + id).remove();
            $("#opacityScreen" + id).remove();
        };

        var center = function (id) {

            var modal = $('#' + id);
            var window_width = $(window).width();
            var window_height = $(window).height();
            var modal_height = modal.height();
            var modal_width = modal.width();
            var top = (window_height - modal_height) / 2;
            var left = (window_width - modal_width) / 2;

            modal.css({ 'top': top, 'left': left });
        };

        var showPassengerMessageDialog = function (okClickFn) {
            var dialogId = this.id;

            var html =
                '<div id="opacityScreen' + this.id + '" class="opacityScreen">&nbsp;</div>' +
                '<div class="confirmation-dialog ' + this.extraClass + '" id="' + this.id + '" style="display:none; background:white;">' +
                    '<div class="container">' +
                    '<a class="container-close" href="#" id="an_' + this.id + '_Close">Close</a>' +
                        '<div>&nbsp</div> ' +
                        '<div class="content"><p>' + this.content + '</p></div>' +
                    '</div> ' +
               '</div>';
            var $body = $('body');
            $body.append(html);

            center(this.id);

            $(window).resize(function () {
                center(dialogId);
            });

            $('#' + this.id).show();

            $('#opacityScreen' + this.id + ',#an_' + this.id + '_Close').bind('click', function () {
                close(dialogId);
                if (okClickFn != null && typeof okClickFn == "function") {
                    okClickFn();
                }
            });
        };

        var closePassengerMessageDialog = function () {
            close(this.id);
        };

        return {
            showPassengerMessageDialog: showPassengerMessageDialog,
            closePassengerMessageDialog: closePassengerMessageDialog
        };

    }();


    contactInformationAsterrixMarkAdjustment = function () {
        var currentSiteLanguage = sabre.config.global.language;
        var asterixMarkLabelParent = $("#phoneType1").parent();
        $($('.phone-fields>.phone-number>.phone-input>label.requiredIndicatorLabel.field-required')[0]).remove()

        if (currentSiteLanguage.toLowerCase().indexOf('ar') >= 0)
            asterixMarkLabelParent.prepend("<label></label>");
        else
            asterixMarkLabelParent.prepend("<label style=\"padding-right:14px;\"></label>");
        asterixMarkLabelParent.find("#toolTipIconPhone").before("<label class=\"requiredIndicatorLabel field-required\">&nbsp;</label>");
    };




    viewMealDescription = function () {
        var mealPreferenceDDLCollection =  $("select[id^=meal_pref-]");
        $.each(mealPreferenceDDLCollection, function (index, mealPreferenceDDL) {
            $(mealPreferenceDDL).after(
                '<span id="link-ViewMealDescription-' + index +
                '" data-wl-translate="label.psng.travelPreferences.viewMealDescription" onclick="openMealDescriptionDialog();" class="mealDescriptionLink">' +
                        Resources('label.psng.travelPreferences.viewMealDescription') +
                '</span>' +
                '<span class="mealDescriptionImage" onclick="openMealDescriptionDialog();">&nbsp;</span>');
        });
    };

    wheelchairAndBassinetDisclaimer = function () {
        var specialRequestDDLCollection = $("select[id^=special_req-]");
        $.each(specialRequestDDLCollection, function (index, specialRequestDDL) {
            $(specialRequestDDL).on('change', function () {

                var passengerSectionDetailsWrapper = $('#passenger-section-details-' + index + ' .ssr'),
                selectedText = $(specialRequestDDL).val();

                passengerSectionDetailsWrapper.find('.wheelchairText span').remove();

                if (selectedText == 'WCHR') {
                    passengerSectionDetailsWrapper.append(
                        '<div class="wheelchairText">' +
                            '<span>' +
                                Resources('label.psng.travelPreferences.wheelchairDisclaimerText') +
                            '</span>' +
                        '</div>');
                }
                else if (selectedText == 'BSCT') {
                    bassinetDropdown = specialRequestDDL;
                    openBassinetDisclaimer();
                }
            });
            
        });
    };


    openMealDescriptionDialog = function () {
        var mealDescriptionLink = Resources('label.psng.travelPreferences.mealDescriptionLink'),
            html = '<iframe src="' + mealDescriptionLink + '" scrolling="yes" class="mealDescriptionFrame"></iframe>';

        var dialog = new PassengerMessageDialog({
                id: "divPassengerAlertMessageWindow",
                className: "mealDescriptionDialog",
                content: html
            });

        dialog.showPassengerMessageDialog();
    };

    //Global variable for tracking which special request dropdownlist used for bassinet
    var bassinetDropdown;

    openBassinetDisclaimer = function () {

        $(bassinetDropdown).val('');

        var dialog = new PassengerMessageDialog({
            id: "divBassinetDisclaimerWindow",
            className: "bassinetDisclaimerDialog",
            content: '<div>' +
                        '<div class="bd">' + Resources('label.psng.travelPreferences.bassinetDisclaimerDialog.freetext') + '</div>' +
                        '<div class="button-group center">' + 
                            '<button type="button" onclick="bassinetDisclaimerDialogAccept()">' +
                                Resources('label.psng.travelPreferences.bassinetDisclaimerDialog.accept') +
                            '</button>' +
                            '<button type="button" onclick="bassinetDisclaimerDialogDecline()">' +
                                Resources('label.psng.travelPreferences.bassinetDisclaimerDialog.decline') +
                            '</button>' +
                        '</div>' +
                      '</div>'
        });
        dialog.showPassengerMessageDialog();
    };

    closeBassinetDisclaimer = function () {
        var dialog = new PassengerMessageDialog({
            id: "divBassinetDisclaimerWindow"
        });
        dialog.closePassengerMessageDialog();
    };

    bassinetDisclaimerDialogAccept = function () {
        $(bassinetDropdown).val('BSCT');
        closeBassinetDisclaimer();
    };

    bassinetDisclaimerDialogDecline = function () {
        closeBassinetDisclaimer();
    };

    return {
        instantiate: instantiate
    };
}();


/// imported /// import IFramePopup.js

function IFramePopup(options) {
    
    this.id = options.id;
    this.src = options.src;
    this.width = options.width;
    this.height = options.height;
    this.extraClass = options.className;
}

IFramePopup.prototype = function () {

    var close = function (id) {
        $("#" + id).remove();
        $("#opacityScreen" + id).remove();
    };

    var center = function (id) {
        var modal = $('#' + id);
        var windowWidth = $(window).width();
        var windowHeight = $(window).height();
        var modalHeight = modal.height();
        var modalWidth = modal.width();
        var top = (windowHeight - modalHeight) / 2;
        var left = (windowWidth - modalWidth) / 2;

        modal.css({ 'top': top, 'left': left });
    };

    var showDialog = function (okClickFn) {
        var dialogId = this.id, extClass = this.extraClass != undefined ? ' ' + this.extraClass : '';

        var html =
            '<div class="iframe-popup-dialog' + extClass + '" id="' + this.id + '" style="display:none;">' +
                '<a id="closeBtn' + this.id + '" href="#" class="close">Close X</a>' +
                '<iframe id="iframe' + this.id + '" src="' + this.src + '" width="' + this.width + 'px" height="' + this.height + 'px" scrolling="no">' +
                    '<p>your browser does not support iframes.</p>' +
                '</iframe>' +
            '</div>' +
            '<div id="opacityScreen' + this.id + '" class="opacityScreen">&nbsp;</div>';

        var $body = $('body');
        $body.append(html);

        center(this.id);

        $(window).resize(function () {
            center(dialogId);
        });

        // document.getElementById('iframe' + this.id).contentWindow.location.reload(true);


        $('#' + this.id).show();
        
        $('#opacityScreen' + this.id + ',#closeBtn' + this.id).bind('click', function () {
            close(dialogId);

            if (okClickFn != null && typeof okClickFn == "function") {
                okClickFn();
            }
        });
    };

    return {
        showDialog: showDialog
    };
}();

/// imported /// import ConfirmationPage.js
function ConfirmationPage() {}
ConfirmationPage.prototype = function () {
    var succesccMessageKey = "custom.js.all.confirmationPage.vipSuccessMessage";
    var errorMessageKey = "custom.js.all.confirmationPage.vipErrorMessage";

    var createMessageElements = function () {
        try {
            var confirmationMsg = $('#flow-message-confirmationsuccess .flow-message-title');
            if(confirmationMsg.length > 0) {
                var successMsg = Resources(succesccMessageKey);
                if(successMsg != undefined && successMsg != "") {
                    $(confirmationMsg).html(successMsg);
                }
            }
        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }
    };

    var replaceTicketingErrorMessage = function () {
        try {
            var errorCodes = WhiteLabel.getIbeData().errorCodes;
            var hasTicketingError = false;
            $.each(errorCodes, function (i, elm) {
                if (elm == "unticketedWarning") {
                    hasTicketingError = true;
                }
            });
            if (hasTicketingError == true) {
                $('#flow-message-unticketedWarning').hide();
            }
        }
        catch (e) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }

    };

    var setVIPCabinText = function () {
        var brandId = WhiteLabel.getComponentModel('flightsdetails_1').itineraryParts;
        $.each(brandId, function (i, elemenet) {
            var itineraryPart = $('.itinerary-part-' + i);
            var segments = elemenet.segments;
            $.each(segments, function (i, element) {
                if (element.bookingClass.bookingClass === "P" && element.bookingClass.cabinClass === "FIRST") {
                    $(itineraryPart).find('.segment-' + 0 + ' dl dd [data-wl-translate="Cabin.FIRST"]').html("The Residence");
                }
            });
        });
    };

    var instantiate = function (Y) {
        
        var isVIP = false;
        var brandId = WhiteLabel.getComponentModel('flightsdetails_1').itineraryParts;
        $.each(brandId, function () {
            if (this.firstSegment.brandId == "TR" || this.lastSegment.brandId == "TR") {
                isVIP = true;
            }
        });
        if (isVIP) {

            createMessageElements();
            replaceTicketingErrorMessage();
            setVIPCabinText();
        }
    };
    return {
        instantiate: instantiate
    };

}();







/// imported /// import VipBreadcrumb.js
function VipBreadcrumb() { }

VipBreadcrumb.prototype = function () {

    //initialize 
    var instantiate = function() {
        try {
            updateUIForVIP();
            registerConfirmation();

        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }
    };

    //adjust tabs css according to the current page
    var updateUIForVIP = function () {

        $(function () {

            try {
                //display breadcrumb 
                document.getElementById("booking-process").setAttribute('style', 'display:block !important');
                // update css for next step and previous page 
                if (document.body.className.contains('VIP')) {
                    //adjust tab classes 

                    //commented out as Sabre is adjusting breadcrumbs
                    //switch (sabre.config.pageCode) {
                    //    case etihad.pageCodes.PassengerPage:
                    //        // $("#step-7").addClass($("#step-5").attr('class'));
                    //        $("#step-7").attr('class', ($("#step-5").attr('class')));
                    //        break;
                    //    case etihad.pageCodes.PaymentPage:
                    //        // $("#step-4").addClass($("#step-6").attr('class'));
                    //        $("#step-4").attr('class', ($("#step-6").attr('class')));
                    //        break;
                    //    case etihad.pageCodes.FlightsResultsPage:
                    //        //  $("#step-7").addClass($("#step-5").attr('class'));
                    //        $("#step-7").attr('class', ($("#step-5").attr('class')));
                    //        break;
                    //    default:
                    //        break;
                    //}
                }
                //set second email for vip services
                //if (document.body.className.contains('VIP') ) {
                //    var vipBookingClass = 'p';
                //    $('#contactInfo-email-2').val(getSecondEmailAddress(vipBookingClass));

                //}
            } catch (e) {
                if (typeof exLogger != 'undefined' && exLogger) {
                    exLogger.log(e, exLogger.ErrorLevel.Error);
                }
            }

        }

        );

    };

    // set VIP cookie for a380
    var setVIPBookingClass = function () {

        try {

            if (getCookie('a380') == 'a380') return;
            var ibeDataObj = WhiteLabel.getIbeData();

            if (ibeDataObj.selectedOffers &&
                ibeDataObj.selectedOffers.length > 0)
                for (var i = 0; i < ibeDataObj.selectedOffers.length; i++) {
                    if (ibeDataObj.selectedOffers[i].parts && ibeDataObj.selectedOffers[i].parts.length > 0)
                        for (var j = 0; j < ibeDataObj.selectedOffers[i].parts.length; j++) {
                            if (ibeDataObj.selectedOffers[i].parts[j].segments && ibeDataObj.selectedOffers[i].parts[j].segments.length > 0)
                                for (var k = 0; k < ibeDataObj.selectedOffers[i].parts[j].segments.length; k++) {
                                    if (ibeDataObj.selectedOffers[i].parts[j].segments[k] &&
                                        ibeDataObj.selectedOffers[i].parts[j].segments[k].bookingClass != 'undefined' &&
                                        ibeDataObj.selectedOffers[i].parts[j].segments[k].bookingClass.toLowerCase() == 'p') {

                                        setCookie('a380', 'a380', 20);
                                        return;
                                    }
                                }
                        }

                }

            //todo: remove this after testing - P class is not there anymore
           // setCookie('a380', 'a380', 20);


        } catch (e) {
            if (typeof exLogger != 'undefined' && exLogger) {
                exLogger.log(e, exLogger.ErrorLevel.Error);
            }
        }

    };

    
    //reset cookies
    var resetVIPClass = function () {
        setCookie('a380', '', 0);
    };

    //remove a380 cookie on confirmation page unload 
    var registerConfirmation = function () {

        $(function () {

            //reset VIP class on confirmation unload
            if (sabre.config.pageCode == etihad.pageCodes.ConfirmationPage) {
                $(window).unload(function () {
                    resetVIPClass();
                });
            }
        
        });


    };


    return {
        instantiate: instantiate,
        registerConfirmation: registerConfirmation,
        setVIPBookingClass: setVIPBookingClass,
        resetVIPClass: resetVIPClass,
        updateUIForVIP: updateUIForVIP
    };
}();

//String trim function
if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    }
}
// contains - refactor to common
if (!String.prototype.contains) {
    String.prototype.contains = function () {
        return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
}

//pure javascript cookies get & set required even before Y or document ready 
var setCookie = function (cname, cvalue, minutesToExpire) {

    try {
        var d = new Date();
        d.setTime(d.getTime() + (minutesToExpire * 60 * 1000));
        var expires = "expires=" + d.toGMTString();
        document.cookie = cname + "=" + cvalue;// + "; " + expires;
    } catch (e) {
        if (typeof exLogger != 'undefined' && exLogger) {
            exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    }

};

var getCookie = function (cname) {

    try {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        if (ca)
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i].trim();
                if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
            }
        return "";
    } catch (e) {
        if (typeof exLogger != 'undefined' && exLogger) {
            exLogger.log(e, exLogger.ErrorLevel.Error);
        }
        return "";
    }

};

// check if VIP cookie is there
var isA380 = function () {
    var isA380Cookie = getCookie('a380');
    return isA380Cookie == 'a380';
};

//add VIP class based on cookie
if (isA380()) {
    if (!document.body.className.contains('VIP')) {
        document.body.className += ' VIP ';
    }
}



/// imported /// import saveJourneyValues.js
function saveJourneyValues(page) {
    this.pageName = page;
    this.cookieObj = new EtihadCookie();
    this.journeyType = null;
}

saveJourneyValues.prototype.instantiate = function () {
    switch (this.pageName) {
        case etihad.pageCodes.PassengerPage:
        case etihad.pageCodes.EditPaxDetailsPage:
        case etihad.pageCodes.ExchangePassengerPage:
            this.saveEmailAddress();
            break;
    }
};

saveJourneyValues.prototype.saveEmailAddress = function () {
    var email = $('#contactInfo-email-1').val();

    $('#btn-search').bind('click', $.proxy(function () {
        var email = $('#contactInfo-email-1').val();
        this.cookieObj.AddValue('emailAddress', email);
    }, this));
};

saveJourneyValues.prototype.getEmailAddress = function () {
    $("input[name='selectedCards[0].purchaserContactInfo.email']").val(this.cookieObj.RetrieveValue('emailAddress'));
};

/// imported /// import VipHideCabinInfo.js
function updateVIPCabinClass() {
    try {
        var cart = WhiteLabel.getComponentModel('cart_1');
        var vipBrandlabel = cart.fareFamilyDataMap.TR.localizedData.en_GB.label;

        if ($('#cart_leg_0_fare-family-name').length > 0) {
            if ($('#cart_leg_0_fare-family-name').text() === vipBrandlabel) {
                if ($('#cart_leg_0_class-of-service').length > 0) {
                    $('#cart_leg_0_class-of-service').hide();
                }
            }
        }
        
        if ($('#cart_leg_1_fare-family-name').length > 0) {
            if ($('#cart_leg_1_fare-family-name').text() === vipBrandlabel) {
                if ($('#cart_leg_1_class-of-service').length > 0) {
                    $('#cart_leg_1_class-of-service').hide();
                }
            }
        }

        if ($('#cart_leg__fare-family-name').length > 0 && $('#cart_leg__fare-family-name').text() === vipBrandlabel) {
            $('#cart_leg__class-of-service').hide();
        }

    } catch (e) {
        if (typeof exLogger != 'undefined' && exLogger) {
            exLogger.log(e, exLogger.ErrorLevel.Error);
        }
    }
}

/// imported /// import ModifySearchLink.js
/*!
 * $Id: ModifySearchLink.js 12-06-2014
 * 
 * Functionality for Modify Search Link
 *
 * Author: Renees, rpayerioliyat@etihad.ae
 * Etihad Airways, Abu Dhabi
 */

function ModifySearchLink() { }

ModifySearchLink.prototype = function() {
    var bootstrapBusForUpdateCartWithSeatsPrice = function() {
        bus.subscribe('handleUpdateCartWithSeatsPrice', updateModifySearchLink);
        EventBusAPI.registerHandler('cart:cart-updated-with-seats-price', function () {
            var msg = { name: 'handleUpdateCartWithSeatsPrice', element: '#modify-search-trigger' };
            bus.publish(msg);
        });
    },
    /*
        updateModifySearchLink - Overrides the default modify search link click behaviour to redirect to the flight search landing page.
        To accomplish this, we need to attach click handler in page load as well as when 'cart:cart-updated-with-seats-price' event bus is captured. 
        So, this function is called twice; first call is in registerModify() fn in EtihadRouter.js and the other one is for the event bus.
    */
    updateModifySearchLink = function (data) {
        $(data.element).on('click', function (e) {
            e.preventDefault();
            window.location = Etihad.config.etihadLandingPage + "?type=modify&" + GetType();
        });
    };
    return {
        bootstrapBusForUpdateCartWithSeatsPrice: bootstrapBusForUpdateCartWithSeatsPrice,
        updateModifySearchLink: updateModifySearchLink
    };
}();

/// imported /// import USBaggageAllowanceLink.js
function addUSBaggageAllowanceLinkForInboundFlights(msg) {
    addUSBaggageAllowanceLink(msg, '#inbounds-header-container .flight-info');
}

function addUSBaggageAllowanceLinkForOutboundFlights(msg) {
    addUSBaggageAllowanceLink(msg, '#outbounds-header-container .flight-info');
}

function addUSBaggageAllowanceLinkForMulticityBooking(msg) {
    addUSBaggageAllowanceLink(msg, '#multicity-header-container');
}

function addUSBaggageAllowanceLink(msg, appendSelector) {
    function isFlightWithUSAirport(flights) {
        function airportIsInUS(airportCode) {
            var usAirport = false;
            try {
                usAirport = __yFromEtihadPageObject.airports[airportCode].country.toLowerCase() === 'US'.toLowerCase();
            } catch (e) {

            }
            return usAirport;
        }

        function segmentContainsUSFlight(segment) {
            for (var i = 0; i < segment.length; i++) {
                var airportCode = segment[i];
                var isUSAirport = airportIsInUS(airportCode);
                if (isUSAirport) {
                    return true;
                }
            }
            return false;
        }

        for (var i = 0; i < flights.length; i++) {

            var segmentsForFlight = flights[i].segments;
            for (var j = 0; j < segmentsForFlight.length; j++) {

                var arrivalAirportCodesInSegment = segmentsForFlight[j].arrivalCodes;
                var departureAirportCodesInSegment = segmentsForFlight[j].departureCodes;

                var arrivalContainsUSAirportCode = segmentContainsUSFlight(arrivalAirportCodesInSegment);
                var departureContainsUSAirport = segmentContainsUSFlight(departureAirportCodesInSegment);
                if (arrivalContainsUSAirportCode || departureContainsUSAirport) {
                    return true;
                }
            }
        }

        return false;
    }

    var flightsContainUSAirport = isFlightWithUSAirport(msg.componentModel);

    if (flightsContainUSAirport) {
        var messageText = getTranslationForKey('label.flc.usBaggageAllowanceLinkText');
        var url = getTranslationForKey('label.flc.usBaggageAllowanceLinkUrl');
        var htmlTemplate = '<div class="us-baggage-allowance-wrapper"><a href ="' + url + '" class="link" target="_blank"><span class="text">' + messageText + '</span><span class="logo"></span></a><div>';
        $(appendSelector).append(htmlTemplate);
    }
}

/// imported /// import ViewItineraryPage.js

/* View Itinerary Page */

function ViewItineraryPage() { }

ViewItineraryPage.prototype = function () {

    var manageMealBookingOption = function () {

        var MANAGE_MEAL_RESOURCE_KEY = 'label.pnrinfo.ANCILLARIES_MTO.MANAGE_MEAL',
            manageMealResource = Resources(MANAGE_MEAL_RESOURCE_KEY),
            manageMealPage = 'changePassengerDetails.html?viewReloc={0}&sourcePage={1}',
            bookingReference = $('.view-itinerary-code span').text();

        manageMealPage = manageMealPage.replace('{0}', bookingReference).replace('{1}', etihad.pageCodes.ViewItineraryPage);

        var mealOption = $('<li>' + manageMealResource + '</li>').addClass('makeChangesOverlayItem makeChangesOverlayItem-ANCILLARIES_MTO translate');
        mealOption.attr('data-wl-translate', MANAGE_MEAL_RESOURCE_KEY);
        mealOption.attr('rel', manageMealPage);

        $('div.makeChangesOverlayDiv ul div#ANCILLARIES_MTOContainer').append(mealOption);
    };
    return {
        manageMealBookingOption: manageMealBookingOption
    };
}();

// Bus.bootstrap.js should be the last file !
/// imported /// import Bus/Bus.Bootstrap.js
function busBootstrap() {
    //context setup for page and flow 
    if (sabre.config.pageCode === etihad.pageCodes.FlightsResultsPage
    || sabre.config.pageCode === etihad.pageCodes.ExchangeFlightSelectPage) {
        bootstrapBusForFlightsResultsPage(bus);
        bootstrapReceptorsForFlightsResultsPage(bus);
    }
    bootstrapReceptorsForAllPages();
    bootstrapEventBusForAllPages();

    // Capture the event bus 'cart:cart-updated-with-seats-price' and register the handler
    // We need to attach a click event handler for Modify Search Link which gets re-created every time when an ajax call is made.
    // This event handler will redirect the browser to Etihad.com flight search page
    var modifySearchLink = new ModifySearchLink();        
    modifySearchLink.bootstrapBusForUpdateCartWithSeatsPrice();

    var seatsPageHandler = new SeatsPageHandler();
    seatsPageHandler.bootstrapBusForSeatsPage();
    // When the guest clicks on the "PoliPay" tab, replace the current PoliPay logo with the logo mapped to the source website
    // To do this, capture the event bus 'payc:fop-type-changed' and register the handler
    var paymentMethods = new PaymentMethods();
    paymentMethods.bootstrapBusPoliPay();
      
    function bootstrapReceptorsForAllPages() {
        EventBusAPI.registerHandler('cart:cart-updated-with-seats-price', function () {
            var msg = { name: 'cartUpdated' };
            bus.publish(msg);
        });
    }
    
    function bootstrapEventBusForAllPages() {
        bus.subscribe('cartUpdated', updateVIPCabinClass);
    }

    function bootstrapBusForFlightsResultsPage(b) {
        var outboundAndInboundCommonHandlers = [addSelectedClassOnInputSelected, modifySearchResults, addFamillyFareMatrix, adjustColumnsIfVIPSold, setVipFlag, updateBookingSummary, addBrasilPopUpEvent, updateVIPCabinClass];
        var outboundHandlers = outboundAndInboundCommonHandlers.slice(0);
        outboundHandlers.push(addUSBaggageAllowanceLinkForOutboundFlights);

        var inbpoundHandlers = outboundAndInboundCommonHandlers.slice(0);
        inbpoundHandlers.push(addUSBaggageAllowanceLinkForInboundFlights);
        
        b.subscribe('outboundsFareMatrixReloaded', outboundHandlers);
        b.subscribe('inboundsFareMatrixReloaded', inbpoundHandlers);
        b.subscribe('multicityFareMatrixReloaded', [addBrasilPopUpEvent, addUSBaggageAllowanceLinkForMulticityBooking]);

        b.subscribe('onewayFareMatrixReloaded', [addSelectedClassOnInputSelected, addFamillyFareMatrix, adjustColumnsIfVIPSold, setVipFlag, updateBookingSummary,addBrasilPopUpEvent, updateVIPCabinClass]);
    }

    function bootstrapReceptorsForFlightsResultsPage(b) {
        b.publish({ name: 'flightResultsPageLoaded' });

        EventBusAPI.registerHandler('ajax-finished-flc-itineraryPartSelected', function () { handleMatrixChange('ajax-finished-flc-itineraryPartSelected'); });
        EventBusAPI.registerHandler('ajax-finished-flc-dateChanged', function () { handleMatrixChange('ajax-finished-flc-dateChanged'); });
        EventBusAPI.registerHandler('ajax-finished-flc-sortFlights', function () { handleMatrixChange('ajax-finished-flc-sortFlights'); });
        EventBusAPI.registerHandler('ajax-finished-flc-filterChanged', function () { handleMatrixChange('ajax-finished-flc-filterChanged'); });
        EventBusAPI.registerHandler('ajax-finished-flc-updateRedemptionFares', function () { handleMatrixChange('ajax-finished-flc-updateRedemptionFares'); });
        EventBusAPI.registerHandler('cart:refresh_flc', function() { handleOneWayMatrixUpdate('cart:refresh_flc'); });

        handleMatrixChange('manual trogger on page load'); // Sabres page load event is triggered before etihadPageObject.js is loaded
        handleOneWayMatrixUpdate('manual trogger on page load');
        function handleMatrixChange(eventName) {
            var $modifiedOneWayFlightTable = $('#dtcontainer-both:not(.ey-processed)');
            if ($modifiedOneWayFlightTable.length > 0) {
                $modifiedOneWayFlightTable.addClass('ey-processed');

                var msg = {
                    name: 'outboundsFareMatrixReloaded',
                    $table: $('#dtcontainer-both'),
                    popupName: 'both-dataTable',
                    componentModel: WhiteLabel.getComponentModel("flc_1").outbounds
                };
                bus.publish(msg);
            }

            var $modifiedOutboundsTable = $('#dtcontainer-outbounds:not(.ey-processed)');
            if ($modifiedOutboundsTable.length > 0) {
                $modifiedOutboundsTable.addClass('ey-processed');

                var msg = {
                    name: 'outboundsFareMatrixReloaded',
                    $table: $('#dtcontainer-outbounds'),
                    popupName: 'outbounds-dataTable',
                    componentModel: WhiteLabel.getComponentModel("flc_1").outbounds
                };
                bus.publish(msg);
            }

            var $modifiedInboundsTable = $('#dtcontainer-inbounds:not(.ey-processed)');
            if ($modifiedInboundsTable.length > 0) {
                $modifiedInboundsTable.addClass('ey-processed');

                var msg = {
                    name: 'inboundsFareMatrixReloaded',
                    $table: $('#dtcontainer-inbounds'),
                    popupName: 'inbounds-dataTable',
                    componentModel: WhiteLabel.getComponentModel("flc_1").inbounds
                };
                bus.publish(msg);
            }

            var $modifiedMultiCityTable = $('#dtcontainer-multicity:not(.ey-processed)');
            if ($modifiedMultiCityTable.length > 0) {
                var msg = {
                    name: 'multicityFareMatrixReloaded',
                    $table: $('#dtcontainer-multicity'),
                    popupName: 'multicity-dataTable',
                    componentModel: WhiteLabel.getComponentModel("flc_1").offers
                };
                bus.publish(msg);
            }
        }

        function handleOneWayMatrixUpdate(eventName) {
            var msg = {
                name: 'onewayFareMatrixReloaded',
                $table: $('#dtcontainer-both'),
                popupName: 'both-dataTable',
                componentModel: WhiteLabel.getComponentModel("flc_1").outbounds
            };
            bus.publish(msg);
        }
    }

    updateVIPCabinClass();
    
    function setVipFlag(msg) {
        //reset cookie each time
        var vipBreadcrmb = new VipBreadcrumb();
        vipBreadcrmb.instantiate();
        vipBreadcrmb.resetVIPClass();
        vipBreadcrmb.setVIPBookingClass();
    }
}






