Core OS

------------------------------------------------------------------------------------------------------------------------
1. Introduction
------------------------------------------------------------------------------------------------------------------------
> (Base OS) Powerful linux distribution made on top of Chrome OS.
> (Use) Manily useful for large scalable deployments on varied infrastructure.
> (Containerization) Maintains lightweight host system and uses "docker" containers for all its applications.
> (Clusters) Provides process isolation and allows applications to move throughout a cluster easily.
> (Uses ETCD for cluster management and Service discovery) To manage these clusters, Core Os uses globally 
  distributed key-value store - "ETCD" to pass configuration data between nodes. This component is also 
  responsible for "SERVICE DISCOVERY", allowing applications to be dyanamically configured based on the 
  information available from the shared resources.
> (Orchestration) - Core Os uses Fleet for scheduling and managing applications across all the nodes of the cluster. 
                    It servers as a cluster-wide "INIT" system that manages the processes across the cluster.
                    It helps in manage/configure the whole cluster from a single point in a muli-service, multi hosts env.
                    It does this by tying with the each node's "SYSTEMD" init system.
  
  Why do you need a cluster?
  > greater computing power.
  > To avoid single point of failure.
  > To distribute the load.
                    
System Design
----------------
CoreOS design is geared towards Clustering and Containerization.

The main host system is relatively very simple, it does not even have a package manager. It has least no 
of applications and services installed by default. The idea is to run each and everything as a docker
container allowing isolation, portability and external management of services.

What does CoreOS does on booting?
The main ability of core os lies here. It has the capability of joining a cluster on boot.
Core os on boot reads a user-supplied configuration file called "CLOUD-CONFIG".
CLOUD-CONFIG file does - 
  > basic inital configuration.
  > startup essential services.
  > reconfigure important parameters.
  > makes the current CoreOS host to join other memebers of the cluster. 
    (This is how CoreOS is able to immediately join a cluster as a working unit upon creation.)
Usually at minimum, (requirements for bootstrap CoreOS node to a cluster:)
 Core os does below 3 on boot up:
 > joins a existing defined cluster.
 > starts etcd service.
 > starts fleet service.

-------------------------------------------------------------------------------------------------------------------------
etcd

etcd is a daemon which stores and distribute data to each of the hosts in a cluster.
- (inter node communication) - it helps the nodes to know the status/and other info about other nodes in cluster.
- (configuration) it enables consistent configuration across a cluster.
- (service discovery) platform with which services announces themselves.
  This service discovery mechanism allows other services to query for information to adjust their own configuration.
  example - load balancer queries etcd to get the IP addresses of all the web hosts when it starts up.

-format:detailed  
basically it does:
a. get the configuration data.
b. query information about running services.
c. publish information that should be known to the other memebers of the cluster.

each node has a etcd running.
So if a cluster needs a particular information. It just contacts the etcd in the current machine and gets it.
All the data are available to each of the etcd regardleses of where actually the data is stored.
leader elections are also handled automatically.
To interact with the etcd data you can either use the below 2 to manipulate/retrieve/read data:
> HTTP/JSON API ( http://127.0.0.1:4001/v2/keys/, by default )
> or, etcdctl utility
Note: the HTTP API is also available to the applications running docker containers( which means configuration 
of individual containers can take into account the value stored in etcd.

-------------------------------------------------------------------------------------------------------------------------
fleet

fleet daemon basically is a distributed init system.
- It works by hooking into the systemd init system of each host in a cluster.
- handles service scheduling.
- constraining the deployment targets based on user defined criteria.
- it helps in making the whole cluster act as one and manages each node inside it.

systemd init is used to start and manage services on the local machine.
each node in a cluster operates its own local systemd init system.
what fleet does is it provides a interface to control each nodes's systemd.
so what u can do with fleet is:
> u can start and stop a service in a node in a cluster.
> get state information of the running processes across your cluster.
> It follows a process distribution mechanism, so it can start services on less busy similar hosts.
> You can specify placement conditions, means you can choose the particular service should run on this geographical
  localtion machines only, on the machines with particular things runnings etc...
> fleet leverages on systemd for starting the local processes, each of the files which define services are
  systemd unit files, you can pass these config files to fleet and manage them on the entire cluster.
  "HIGHLY AVAILABLE CONFIGURATIONS"  
  
  So with these you can deploy each of your web server containers on different nodes.
  Any of the member node can use the "fleetctl" utility to manage the cluster.
  Fleetctl will be your main interface with your cluster.

---------------------------------------------------------------------------------------------------------------
2.  Setup coreOS
---------------------------------------------------------------------------------------------------------------
First thing what we need here is to setup a coreOS cluster and for that we need to conenct etcd instances of each node.
Pre-requistes:
  ssh keys: each new node should have one ssh public key created. This will be put in the authorized_keys file of 
            the core user. Also you will need this private key for loggin into your coreOS server.

Generate a New "Discovery URL"
------------------------------
The first step to setup up a new CoreOS cluster is generating new discovery URL.
Discovery URL is the unique address that stores peer CoreOS addresses and metadata.
CoreOS has provided a free discovery service - https://discovery.etcd.io (open the link to read about it)
A new URL can be generated by visting https://discovery.etcd.io/new or in linux using the below cmd -
curl -w "\n" https://discovery.etcd.io/new 
(output is like  https://discovery.etcd.io/d9d107225c6946f4ff3bf86f6f04e122 with a new line)
We will have to put this Discovery URL in the etcd section of the cloud-config file of each node that 
is to be included in this URL cluster.

Write a Cloud-Config File
--------------------------
This file allows you to declaratively customize:
> network configuration.
> systemd units.
> OS-level items.

The file is written in YAML format. It is processed when machine boots and provides a way to 
configure you machine with etcd settings that tells them which cluster to join.

Minimal Cloud-Config file: ( for detailed visit - http://goo.gl/MEQcIq )
etcd section inside cloud-config:-
Peer address of each node in a cluster is stored with the discovery URL.
Therefore, each node in a cluster will have the same discovery URL and will pass its own IP address where 
its etcd can be reached.( this is specified under etcd section of cloud-config )

units section inside cloud-config:-
this sections specifies the services which you need to start as part of boot. By default CorOS must have 
etcd and fleet services.
  
################### cloud - config file begins
#cloud-config
coreos:
  etcd:
    discovery: <your own cluster discovery URL>
    addr: $public_ipv4:4001
    peer-addr: $public_ipv4:7001
  fleet:
    public-ip: $public_ipv4 #used for fleetctl ssh command
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
################### cloud - config file ends

Note: $private_ipv4 and $public_ipv4 are automatically interpolated to actual IP addresses of your new VPS(virtual
private server). It is supported in Digital Ocean, not sure of other systems. Also fleet section is not required 
if you are not going to use fleetclt ssh command.

Create a CoreOS Cluster
------------------------
Recommended to setup at least 3 machines. We will create machines core-1, core-2, core-3 for learning.
you can create coreos droplets using the method of your choice.

Create a vagrant enabled cluster following - http://goo.gl/YEuJ2w
From the host machine run to check the status of the cluster - 
[root@centdev01 coreos-vagrant]# vagrant status
Current machine states:

core-01                   running (virtualbox)
core-02                   running (virtualbox)
core-03                   running (virtualbox)
core-04                   running (virtualbox)
This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.

Login to the core-01 using below 
[root@centdev01 coreos-vagrant]# vagrant ssh core-01 -- -A
Last login: Sun Nov  9 12:57:55 2014 from 10.0.2.2
CoreOS (stable)
core@core-01 ~ $ 











complete ref: http://goo.gl/7otyID
