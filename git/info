---------------------------------------------------------------------------- local repo work >
Basic opeartion modes:
config
init
commit
status
resest
log
help

git config --global user.name "Alok Kumar Singh"
git config --global user.email "mail.alok87@gmail.com"
git config -l
git init # Initializing the rep
.gitignore # for ignorning the changes that need not be part of Repo
git reset <file> # for resetting the file to untraced files.
git commit -m "My first check in
"
git status # Currrent status of your repo
git log # View history for a repostitory
git checkout <commitchecksumid> - it checks out the snapshot of that commitid and creates a new head brach for working on it.
so if you move out of this branch to master again by using git checkout master. All the
head branch change is lost.
git log
git reset --hard 8b4fe # Removes all the change in the repository which was done after commit 8b4fe
git log
git help

---------------------------------------------------------------------------- share over internet >
git fetch # fetch changes from source to destination
git merge # comibine two branches
git push # push our contents from source to destination
git remote # manage one's source and destination, where and how you can share your work
git clone # clone a repo into local

git remote add origin https://bitbucket.org/alok87/learn_git.git
git push -u origin master # -u defines the remote repo to push to by default, so that next
time git push and git pull works without specifing remote repo
git remote add # adds a git repo identified by its path to your current local repo ( origin
is nothing but an alias for the path representing the remote repo )

Now comes the main purpose of sharing
>Clone your work from anywhere to local
>Work on it
>Check it in back to the remote hub. PSB
git clone https://github.com/alok87/learn.git <local-path>
vi <local files> :wq #make your changes
git add .
git commit -m "new changes done
git pull
git push # mark we did not provide -u as we did earlier for the first push.
# note: we can use git fetch & git merge instead of git pull.

----------------------------------------------------------------------------- share over intranet >
1. Gitolite server
2. Bare repository
Bare repository # repository with no working dir.
Working dir # directory containing your source.
So a bare directory will only have contents of .git and nothing else.
git clone --bare /path/myrepo /path/myrepo_bare # this creates a bare clone of your "myrepo" repository
cd /path/myrepo_bare;ls -ltra # you will find it has all the contents of /path/myrepo/.git/

----------------------------------------------------------------------------- git fancy features >
shortlog
log search
clean
tag

git shortlog # for the better output of the repository log, arranged with user names in alphbetical order.
git shortlog -n # arranged with no. of commits by a user. --numbered
git shortlog -e # same as git shortlog but with additional email info attached. --email
git shortlog -s # to get only the names and no of commits --summary

git log --skip=2 # gives the output skipping last 2 recent commits
git log --since=2014-08-20 --untill=2014-10-14 # if you know what since and untill means it should be clear
git log -since=2.days
git log -since=2.months
git log --grep="Q3R2" # it looks for keyword "Q3R2" in your commit msgs and shows such commits

gt clean -f -e*.txt # to remove untracked *.txt files
git clean -f # to remove all the untracked files
git clean -f # forceful delete
git clean -d # removes untracked directories
git clean -n # dry-run, does not remove anything but shows what needs to de done.
git clean -e<pattern> #excludes the cleanup of patterned specified files along with .gitignore

Tagging #specify a point in your history with some metadata and refer to it henceforth with the same tag.

Lightweight tag: Tracks the tag name not depending on whom or when the tag was created. < Single user env >
		 Simple referrence of different phases that your project files in repo have gone through.
git checkout <commitchecksumid> # creates a head branch and takes you there, head branch with that checksum checkin snapshot
git checkout <tag_id> # takes us back to our tagged id 

Annotated tag:   Tracks the author name, time of tag creation and the tag name with a description. < Multi user env >
git tag -a <tag_name> -m <tagged message>

git tag -d <tag_name> # Deletion of any type of tag

------------------------------------------------------------------------------- unleash the beast features git offers >
----------------------------------------------------------------------------------------- multiplayer mode ------------
merge
resolve conflicts

Files ( top to bottom i.e. how a user sees it to how a computer seees it )
text data/binary data
binary files
file system
hard disk

Text data - any file/data which can be read in any simple editor.
Binary data - any file/data which can only be read through specif programs such as microsoft word, picture viewer, etc..

Multiplayer mode
divide the work into files with each file for a particular task.
So if we have more no of files divided with functionality it becomes easier to manage and maintain when compared to a single file with everybody working on.

user1 makes changes 
clone it into shared bare repo # git clone --bare 
user2 clones bare, works on it
user3 clones bare, works on it
user2 does > git pull 
	   > git push # no issues
user3 does > git pull # user 2 changes missing ERR
	   > Open editor include user2 changes it should be in b/w >>>HEAD ===
	   > check in the changes (commit with message "included user2 changes"
	   > git push
	   > git log --graph
	 
----------------------------------------------------------------------------------killer branching in git >
Why is a branch needed
1. Feature development branch eg. DEV_2 DEV_3 ... here you develop a feature and then release it.
2. Active branch - this branch is the current production branch.

git branch <branch_name>
git checkout -b <new branch name>
git checkout <branch name> # to switch to the <branch name>
git merge <app_development> # this merges the changes in the branch app_development to the branch u are in.
git branch -d <branch_name_of_the_branch_you_want_to_delete> # delete a branch
git branch # shows list of branch in your system

git config --local alias.c clear # it will make c as an alias for clear by updating in .config file
				 # note it will work only with git means git c
wrtie the below alias under [alias] in file config for add a file and seeing the status
ast = !git add . && git status # git ast 
write the below alias under [alias] for commiting the code 
ct = "!f() { git commit -m \"${1}\";};f" # git ct "checkin comment"
Note: Changes or aliases we put are in your local git config file. To make it usable across a user level/global access make 
      changes in ~/.gitconfig

----------------------------------------------------------------------------------mechanisms behind git magical speed and functionality >
Following operational modes are explained:
init add commit status clone fetch merge remote pull push tag branch checkout 

Plumbing commands  - lower level operations which forms the base of git.
Porcelain commands - cover the underlying plumbing tasks at high level with easy-handling names for end users.

Contents of .git:
1. Hooks -	 Customization scripts injected into various git commands. ### git help hooks
	   	 # git init creates sample hooks-scripts with can be renamed (remove .sample) for using them
2. Info - 	 Additional info about the repo is kept here. By default only 1 files is there exclude. It is a master list of files to be excluded by git.
	  	 Any file written in exclude file is only ignored in your local repository and not in clones
	  	 while in .gitignore which gets checked in, so on clone it is ignored in the new repo also.
3. Config -	 Every configuration of the repository is kept in this file. 
4. Description - gitweb is used for GUI git. This file contains user-defined description for gitweb.
5. Objects     - Git repo is nothing but a database containing all the data that is needed to retain,reproduce and manage the revisions and history of files.
		 Git considers everything that goes inside it as objects.. MAIN REASON FOR FASTER PERFORMANCE.
		 4 types of objects: 	BLOBS
					TREES
					COMMITS
					TAGS

		BLOBS:   binary large objects : collection of large binary data stored inside a box as a single entity for later use. 
		TREES:   Git's internal representation of directories and structure of your content. 
		         Git Tree object refers to Git Blobs and other Git tree objects.
		COMMITS: Commit objects hold all the metadata for changes introduced to the repo content.
			  It includes, author of change, commiter of change, date time etc..
		TAGS: 	 It carries a human readable name which can be attached to other objects, usually a commit obj for easy retrieval, and other reasons.
		HEAD: 	 It is a pointer which points the Git engine to the active branch.
			 so if you are in master branch it will show>		 ref: refs/heads/master
			    if you are in test_release branch it will show>	 ref: refs/heads/test_release
		REFS: it stores the SHA1-IDs of imp points in the repo ( tags and branches )
		      metadata of tags are stored in refs/tags		
		      metadata of branches are stored in refs/heads
		      each branch name is a file inside the head directory ( refs/heads/master ) and the content is the commit SHA-ID of parent branch.
		      same for tag
		      each tag is a file inside refs/tags which has single sha-id for reference.
		      <directories can also be there under refs/tags and refs/heads for hierarchical struct>

	       INDEX: It is a file where Git stores your staging area information to be commited.
		      This is a place where you keep your files that you want to be commited.
		-------------------------------------------------------------------------------------------------------------------------------------------
GIT CONTENT TRACKING SYSTEM: 

git sees relation between files through their hashes.
so a file1 having helloworld and file2 having same content will have same hash.
It distinguishes on basis of content and not localtion/size.

GIT ADD 
1. Computing hash is the first task of git before storing any data.
2. Git puts the content under one single BLOB object. 
3. When aksed to reproduce content it will bring out the content with the exact storage pattern with the use of metadata stored in TREE object.
4. When a file is changed a little bit, its hash completely changes.
5. When add is executed, Git updates the index using the current content found in the working tree(stages your changes) and prepares the 
   content staged for next commit:
	a. Computes the hash of the content.
	b. Decides to create a new content or link to an existing blob object.
	   { if a file is not changed the hash remains same and git links it to the old file only }
	c. Actual creation or linking of BLOB takes place.
 	d. Creation of tree object to track localtion of content.

GIT COMMIT
When a commit is done
1. a commit object gets created with the metadata of content/changes that were added using git add ( metadata contains info of author, commiter, date time)
2. created commit obj gets linked with the tree object which is alread linked with blob.
	commit obj > tree obj > blob obj

GIT STATUS
When a git status is executed:
File path present in index VS recent commit          >>> Changes to be commited.
File path present in index VS working tree 	     >>> Changes not staged for commit. Untracked.
Paths in the working tree and not tracked by git     >>> Changes not staged for commit. Untracked.

GIT CLONE
1. create dest dir, and initate repo git init
2. set up remote branches in the dest dir for each branch present in source repo ( git remote )
3. fetch objs, refs 
4. checkout 

GIT REMOTE



#GIT PARTIAL CHECKOUT 
git init 
git remote add -f tprov https://github.com/jamtur01/dockerbook-code
git config core.sparsecheckout true
vi .git/info/spar-checkout and add subdirs path in new lines
git pull trprov
