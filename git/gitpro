------------------------------------------------------------------------------------------ 1. Getting Started

Why use a version control ?

Types of version control? How it evolved.

Local Version control  
	rcs - stores difference b.w versions and when you want a version, joins all of them and give you the file
Central Version control 
	When a lot of developers started working on the same code and started contributing to the same project, 
	the need of central vcs was visioned. 
	Advantage it brought was everyone in the project knew to certain degree what ever1 else in the project was doing.
	The big issue with it was SINGLE POINT OF FAILURE. You risk everything, as all your main project is at single place.
Distributed Version control
	This is where the distributed vcs stepped in. 
	In a DVCS, clients don't just checkout the latest snapshot of the files but they fully mirror/clone the repository.
	Thus if any server dies then any of the client server can be restored there. Every checkout is a full backup of all data.

History of Git - 
Linux Kernel, an open source soft project was manitained by software patches and archived files till 2002.
After 2002, a linux kernel project BitProject(DVCS) begain to support Linux Kernel source code.
On 2005, some split happened b.w linux kernel and BitProject which led the founder of Linux Kernel Linus Torvalds to 
develop a new DVCS with below things in mind - 
	> Speed
	> Simple Design
	> Strong Support for non-linear development i.e. thousands of parallel branches
	> Fully Distributed
	> Ability to handle large projects like Linux Kernel (in which the world is running its software/apps) efficiently
So folks!! this is how Git was born. 
Easy and yet humangously efficient.

Git basics 
It is suggested to "CLEAR your mind with all the things you many know about VCS, and then start learning GIT"
Use command line of Git, coz command line provides all functionality of git, while GUI's mostly provides some sub sets of functionlity.
coz the user interface and what it does may look similar like other VCS but how it does is completely different way.

	> Snapshots, Not differences:
	  Other VCS - Treat the data as a set of files and track differences b.w. them.
	  v1	v2		v3		v4		v5
	  a	delta1		-		delta2		-	
	  b	-		delta1		-		delta2	  

	  Git - Treats the data as a set of snapshots of a minature filesystem.
		So,
		    When you commit in Git(checkin), it basically takes a picture of what all your files like at that
		    moment and stores the referrence to that snapshot. And if the file has not changed, then git does 
		    not store that file again. It just makes a link to that old versioned file it had once stored on change.
	  v1	v2		v3		v4		v5
	  a	a1		a1		a2		a2
	  b	b		b		b1		b2

	> Nearly Every Operational is Local(no central dependency), You can work offline
	  You are not dependent on external network, external central server. Everything that you need to about your souce, from 
	  history of changes to who checked in and what is there in your local. You do not need to login to a particular instance
	  or gui to check what is the history and all the stuffs, you have everything at your local. You do not need a internet 
	  connection or network or server availability to know about your project. 
	  For eg in some older VCS, you made your changes offline but you can not commit them since you are offline not connected 
	  to network. But in GIT, you can do this. 

	> Git has integrity - You can loose info in git. Your file cannot get corrupted. Everything in git is checksumed and 
			      then taken inside. No-one can manually change those checksums.
			      Mechanishm for checksuming in git is known as SHA-1 hash. 40 character string composed of 
			      hexadecimal characters(0-9, a-f). It is calculated based on contents of a file and directory struct
			      -ure in git. Git's database has data stored with these SHA-1 hash names instead of regular file names.

	> Git's three states - basic usage of local repo 
	  This is the main thing about git you need to know if you are using git.
	
	  Commited, modified and staged.
	  Commited - Your data is safely stored in your "local" database.
	  Modified - You have changed the file you have not commited to your database yet.
	  Staged   - Files in the staged states are the modified files which you have marked  which needs to go into your next commit.

	  So, we can come down to the below three now - 
	  working dir, .git directory and staging area.

	  .git directory - gits area. This place git keeps all the information it needs about your source code. 
                           When you clone a repository, this is what is created. Complete compressed git database.
          working dir    - When you pull out a version of a project. Git pulls that version from the compressed git db, .git.
	  	           So that you have a particular version of that project in your local working dir.
	  staging        - it is simply a file containing information about your modified files in your working dir which needs to
		 	   be commited. Good thing about staging is, you can check them in and discard completely also.
	  
	  1. modify files in working dir
	  2. stage the files, adding snapshot of the set of files in staging area
	  3. commit files, so that those changes are permanently made to git repo.

Installation
Linux - yum install git /apt-get install git
Windows/Mac - Installers are present
Or, you can build the git using make from scratch.

Basic Customizations
git config files are stored at 3 diff places: 
	/etc/gitconfig: config for every user on the system and their repos. (git config --system)
	~/.gitconfig or ~/.config/git/config: config specific to your user. (git config --global)
	.git/config: config specific to your git repo.

	Each level above overrides the above level. So .git/config will overwrite the values in /etc/gitconfig

	$ git config --global user.name "Alok Kumar Singh"        #your identity
	$ git config --global user.email mail.alok87@gmail.com    #your email 
	$ git config -l						  #see config list
or	$ git config --list
	$ git config user.name 					  #to see a single specific value    
	$ git help <verb>


------------------------------------------------------------------------------------------ 2. Git Basics

Here i will show you all the basics which you need for daily usage in git, all the basic commands. Thats all.

#Getting a git repository
	a. git init  - start tracking your existing project in git
	$ git init #initializes your current dir with git and creates a git db .git
	$ git add *.c #adds all the modified *.c files to the staging area
	$ git commit -m "Initial commit" #commits the staged files in git repository
	
	b. git clone - clones an repository from other server
	   Please take a key note here, the command is clone and not checkout. This commands completely gets the whole 
           project into your local with all the history and information it has. It is not only brining the source files 
           as it used to happen in CVCS. So you can do whatever with network dependecny with this repo now.
	$ git clone [URL]
        $ git clone https://github.com/alok87/learn.git
	$ git clone https://github.com/alok87/learn.git anynameyouwant
	  #Note: Here we have used a https:// protocol , you can use git:// or user@server:path/to/repo.git later explained.
	
#Lifecycle of the status of the files:
As you edit files, Git seems them as modified.
Untracked > Unmodified > Modified > Staged > Commited
	$ git status #Check the status of the files in your current repository.
	$ echo "Git tuts 15mis" > readme
	$ git status # you will see untracked file
        $ git add readme # this adds the read me to tracked and then staging area.
        $ echo "more" >> readme
	$ git status # you will see a modified file saying readme
	$ git add readme # this again adds the modifed file in the staging area.	
	$ cat .gitignore #the files which you put here wont be staged and commited, you can use RE to define files in it.
	  *.[oa] # do no track *.o and *.a files
	  !lib.a # do track lib.a even if *.a are said no
          README.test # ignore README.test

#Diff
	Difference you commited/staged.
	$ git diff 	    # It tells the difference in the files in your working area to the files which are staged.
	$ git diff --staged # It tells the difference in the files in your staging aread to the commited files.
	$ git commit -m "Commit comments"

#Commit	
	Commiting a new file.
	$ git add newfile
	$ git commit -m "commit 1" newfile
or,	$ git commit -a -m "commit 1" newfile # this is a shortcut to skip git add

#Remove
	Say if you want to remove a file which you staged.
	$ rm newfile
	$ git status #it will still show as Deleted in staging area
	$ git add --all #this will finally remove the newfile from the staging area
or,     $ git rm newfile #this is a shortcut for above 3 commands, it directly removes the files from working and staging area.
	$ git rm --cached README #Suppose you want to keep README in your working dir but not in staging area.

#Move
	Moving files around git.
	$ mv newfile newfileR
	$ git rm newfile
	$ git add newfileR      # Running these commands puts your renamed file in staging 
				# as git was not aware renmaing happened.
				# see the or, alternative for this below:	
or,	$ git mv newfile newfileR
	$ git status #you will see that git shows a renamed file in your staging area.
      
#Log
	$ git log		# To view your commit history, latest changeset first
	$ git log -p -2		# Introduce changes introduced to 2 commits
	$ git log --stat	# It shows the commit history telling how many lines were inserted and deleted.
	$ git log --pretty=oneline # Shows the pretty log history in one line, other options are also there.
	$ git log --pretty=format:"%h -> %an, %ar :%s" # show the history in your own format ##WowGitFeature
	$ git log --pretty=format:"%h -> %s" --graph 	# Shows graph of merging and branching history
		format options below:
		%H Commit hash
		%h Abbreviated commit hash
		%T Tree hash
		%t Abbreviated tree hash
		%P Parent hashes
		%p Abbreviated parent hashes
		%an Author name
		%ae Author e-mail
		%ad Author date (format respects the –date= option)
		%ar Author date, relative
		%cn Committer name
		%ce Committer email
		%cd Committer date
		%cr Committer date, relative
		%s Subject
	$ git log -<n> 	# Shows the last n commits.
	$ git log --since=2.weeks
	$ git log --untill=2014-01-14
	$ git log --author="Alok Kumar Singh"
	$ git log --grep="some keyword"

#Undo
	$ git commit -m "Changes i commited"
	$ git add forgottenfile
	$ git commit --amend #This will add the forgottenfile and check in the last commit again by allowing you to edit msg.

#Unstaging a mistakenly staged file
	$ ls
	a b
	$ git add *
	$ git status # shows that both a and b are ready to be commited, but you wanted only a to be commited and not b.
	$ git reset HEAD b # This removes the file b from the staging area.


#Unmodifying a modified file
	$ git status --s
	M a.file
	$ git status # gives you info how to unmodify the changed file to the state of the file in the last commit.
	$ git checkout -- a.file #This discards your modified changes and checkout the latest file from repo.

#Remotes
  show remote, add remote, remove remotes, manage remote branches, define them as being tracked or not.
	
  show remotes
	$ git remote
	origin			#This is the default name of the 
	$ git remote -v         #This gives you the URLs with which your remote is connected to.
	If a repository is connected to multiple remote repos then it will show the mutiple URLs here.
	eg:
	alok_remote 		https://guthub.com/alok87/learn.git
	vicky_remote	https://github.com/alok87/backup.git
	So we can pull contributions from multiple people, make changes and may be if access we can push it back to them.
  add, fetch, clone
        $ git remote add [shortname] [URL]
        $ git remote add alok87/learn https://github.com/alok87/learn.git
        $ git pull 	# This fetches the remote branch and merge it in your current branch.                                               
	$ git fetch 	# This fetches the remote branch and do not merge it in your current branch.
			# You have to manually merge it in current branch if needed.
        $ git clone https://github.com/alok87/learn.git 
			# This adds this remote repo to origin and fetches it to your current 
                        # branch if not present.
  push
	$ git push [remote-shortname] [branch-name]
	$ git push origin master       # If you want to push your master branch to your origin remote server.
	$ git push alok87/learn master # If you want to push your master branch to your alok87/origin server.

  rename, remove remotes 
	$ git remote rename alok87/learn alok87/newlearn
	$ git remote rm alok87/learn

#Tagging
	Tags are like labels in TFS.
	Tagging is a good feature in git which let you mark specific important times in history.
	Typically people use this feature to mark the release points of the projects.
	$ git tag #lists all the tags 
	$ git tag -l 'v23*' #it lists all the v23* tags only.
	
	There are two types of git tags:
		Lightweight: It is just a pointer to commit. Like a branch that does not change.
		Annonated:   It is full info tag which contains all the info about it like email, date, pointer-commit everything.
		Recommended to use annonated.

	$ git tag -a v2.0 -m "Chapter 2 read" # It creates a annonated tag with an associated message.
	$ git show v2.0 		      # It shows all the information about the tag v2.0
	$ git tag v3.0 			      # This is a lightweight tag, no other info apart from checksum commit is kept.
					      # Lightweight is light but not recommended.
	$ git tag -a v1.0 -m "Chap 1" 9edia   # This will help in tagging the repo for the old commit also.
        $ git push origin <tagname>	      # This pushes your tag to the remote server which is mapped with origin name.

	$ git push origin --tags	      # This pushes all your tags to the remote server.
					      # So now if someone else pulls your repo, he will have all the tags.
	$ git checkout -b Git_ProBook_v1.0 Git_ProBook_v1.0
					     # The above command checks out your tag in a new branch with the same name.
#Aliases
	$ git config --global alias.c commit # This is an alias for "git commit" to act as "git c"
	$ git config --global alias.unstage 'reset HEAD--'
					     # This sets the alias for unstaging
	$ git config --global alias.last 'log -1 HEAD' # This gives the last commit log
	$ git config --global alias.visual "!gitk"     # This runs the gitk own program that runs with git repo. 

------------------------------------------------------------------------------------------ 3. Git Branching
What is Branching? 
	Branching means you diverge from the main line of development and continue to do work without disturbing with that main line.
	Almost every VCS has some kind of branching support. But Git's branching model is a killer feature. 

Why is Git Branching model so special?
	Git branches in a very lightweight manner. 
	Branching operations are instantaneous. 
	Branching operations like switching b/w branches back and forth are super fast.
	Git encourages workflows(to be explained later) that branch and merge often, several times a day.
	Knowing branching in Git will change the way you develop software.

Branching in Git in a nutshell
	When you make a commit. Git stores a commit object that stores the pointer to the snapshot the staged content && it also
	contains the author, email and commit msg && it also contains pointers to the parent commits(if present)
		git_commit_obj  = pointer_to_snapshot_staged_content
		git_commit_obj += email, commitmsg, author'sname, 
		git_commit_obj += pointers to the parent/parents commit
	-------------------------------------------------------------------------------------------------------
	eg, we have three files in our repo
	a
	b
	c
	$ git add . 
		When you stage these files(a, b c)
		Git makes the SHA-1 hash checksums of each of the files and stores the versions of 
		the files in Git repo(git calls them BLOBS), and adds the checksums to the staging area.
	$ git commit -m "whatever" .
		When you commit. Git checksums each subdir and stores those tree objects in Git repo.
		Git then creates a commit object that has metadata and pointer to the root project tree.
		This helps re-creating the snapshot again if needed.
	
	Git repo has 5 objects now:
	Blob - Contents of each of your files.
	Tree - List the contents of the dir, and specifies which file names are stored as which blobs.
	Commit - One commit object that stores the pointer to that root tree and all the commit metadata.

	Commit:98ca9	-->	Tree:92ec2          ----->	blob 5dl12, all contents of file
	tree	 92ec2		blob 5dl12 a    ----|---->	blob 5dl13, all contents of file      
	author	 alok           blob 5dl13 b	    ----->      blob 5dl14, all contents of file
	parent			blob 5dl14 c	
	commiter alok           		
	type     initial-commit
		
	So now, if you make some changes to some files and commit again. Suppose you changed file a and c.
	In Git, Each commit is a snapshot.
	You can see in the new commit, the parent is kept as a pointer to the old commit. New commit points to new tree
	which in turn will have new blob values.

						HEAD 		
						|
					        -----
					            V
					     v1.0   master
		------------------------------       ---  
		|				     |
		V				     V
											
	Commit:98ca9			Commit:98ca10	
	tree	 92ec2			tree 	 92ec3
	author   alok		<---    author   alok
	parent  			parent   98ca9 	
	commiter alok			commiter alok
	type     initial-commit         type 	 some-changes
		|				|
		|				|
		V				V
	  Snapshot A			  Snapshot B

	A branch in Git is a simple lightweight pointer to one of these commits.
	Default branch name is Master. As you commits, each commit object starts getting attached to the previous one.
	master <- commit1 <- commit2 and so on....
	
	Here branch v1.0 is behind of master branch by 1 commit.
	A new branch creates a new pointer for you to move around.
	Here head points to the master branch. So master is the current branch. 
	
	------------------------------------------------------------------------------------------------------------------
	
     #Creating a new branch
	Well creating a new branch creates a new pointer for you to move around.

	$ git status	  # Showed your current branch was "master" which is by default on doing git init.
			  # Git knows about your current branch by seeing where HEAD points to.
	$ git branch test # This created a branch test at the same commit you are currently on your current branch(master)
			  # Note this command only created a new branch, you are still in your HEAD pointer pointing branch.
	
	98ca7  <--- 98ca8  <-- 98ca9
		        	master   <-- HEAD
				test
	$ git log --oneline --decorate # this give the above diagram which you see here.
	98ca9 (HEAD, master, test) commit info
	98ca8 commit info
	98ca7 commit info
      
     #Switching to an existing branch 
	$ git checkout test # This switches your current branch to test and HEAD pointer is now pointing to test.
	98ca7  <--- 98ca8  <-- 98ca9
                                master  
                                test      <-- HEAD
		
	Now make a change to a file and commit(commit id say 98ca10)
	98ca7  <--- 98ca8  <-- 98ca9   <--  98ca10
                                master      
                                             test      <-- HEAD
		 
 	Now let's switch back to master branch.
	$ git checkout master
	98ca7  <--- 98ca8  <-- 98ca9   <--  98ca10
                                master                 <-- HEAD             
                                             test      		
        # This latest checkout of master, did two things:
		a. Moved the pointer of HEAD to point to master.
		b. Reverted back your 98ca10 changes, by checking out the snapshot 98ca9 points to.		
	
	Now again if you make a change and commit(say commit id 98ca11)
				------------98ca11
				V	    master    <--- HEAD
	98ca7  <--- 98ca8  <-- 98ca9   <--  98ca10
                                             test
	So now your branches(master and test) have diverged from each other and have their own development path.
eg:	[root@centdev01 tmp]# git log --oneline --decorate
	746e8cf (HEAD, master) Checked in e in branch master
	2d28b57 commit 1
	[root@centdev01 tmp]# git checkout slave
	Switched to branch 'slave'
	[root@centdev01 tmp]# git log --oneline --decorate
	199134a (HEAD, slave) Checked in d in slave branch
	2d28b57 commit 1	

	$ git log --oneline --decorate --graph --all #shows where your branch pointers are and how your history has diverged.

	SUMMARY:	
	SO BRANCH IN A GIT IS A SIMPLE FILE THAT CONTAINS THE 40 char SHA-1 checksum of the commit it points to.
	SO BRANCHES ARE CHEAP TO DESTROY AND CREATE AND MOVE AROUND. 
	CREATING A BRANCH IS AS QUICK AS WRITING THAT 40char and a newline in a file. 
	THIS FEATURE OF GIT IS IN SHARP CONTRAST TO OTHERS WHERE FOR CREATING A NEW BRANCH THE COMPLETE DATA WAS COPIED
	TO ANOTHER DIRECTORY AND THEN IT WAS CHECKED IN, MAKING IT HEAVY.
	FINDING A MERGE POINT AND WORKING ON IT ALL BECOMES EASY BECAUSE OF GIT STORES THE POINTERS TO THEIR PARENT COMMITS.

Basic Merging and Branching     
	
	$ git status
	# On branch master
	$ git checkout -b "iss53"	# You created a branch iss53 to work on the issue-53.
				 	# You created and switched to that branch using this command.
					# Shorthand for: git branch iss53; git checkout iss53
	$ git status
	# On branch iss53
	$ touch bb53 cc53 dd53		# You created new files to try fixing the issue53.
	$ git checkout master		# You got a call suddenly to fix an issue in master production branch. 
					# So you checked out master branch to do a hotfix for prod.
	$ git checkout -b hotfix 	# So you create a new branch to work on the hotfix from the current master.
	$ git status
	# On branch hotfix
	$ touch hotfix_prod_52		# You make your production fix in the hotfix branch. 
	$ git commit -a -m "Urgent production fix" 
					# You checked in your changes.
					# Now do your tests in hotifix branch to verify all is good.
					# If all looks good, merge your changes to the master production branch to deploy to prod 
					  after build.
#merge
 #fast-forward
        $ git checkout master
       	$ git merge hotfix
	'Fast-forward' strategy.	# Fast-forward means Git simplified the merge operations as it found that the master was
					  only 1 commit behind and rest everything was same. So it just moved the pointer to new
					  commit.
		
	c1	c2 < master
			c3	c4 < iss53
	*fast-forward merge was performed as the iss53 was only 2 commits ahead after c2. So git just moved
	*the master branch pointer to c4 for performing the merge operation. Thats it, so fast-forward

	$ git branch -d hotfix		# You delete the hotfix branch as it is no longer needed.
	$ git checkout issue-53  
	$ git add . && git commit -m "checked in issue 53 fix"
                                        # You fixed and checked in your changes in this branch.
                                        # Now the iss53 branch has moved ahead of master branch remember.
	$ git checkout master           # Now you have decided that iss53 is fixed and should be merged to master
					# Checkout the branch you want to merge into

 #recursive - 3way merge
	$ git merge iss53		# Merge the branch you want to merge
	Merge made by the 'recursive' strategy.
	Note: The merge was made by recursive strategy now.
	# Since the main branch had also moved ahead.	
	# In this commit one thing you might observe is the c6 is having 2 parents.			
	# one more good feature you might see in git here is that it automatically determines the best common ancestor
	  to use for its merge base(here c2), while in other VCS like CVS or Subversion the user have to decide this.
	  This makes merge quick and easy in GIT.
			
	c1	c2	c3 < master
			c4	c5 < iss53
			
	
	c1	c2	c3		    <---c6 < master
			c4	c5 < iss53  <---^

	Now that you have merged your development branch iss53 to master.
	We can delete this branch using below 
	$ git branch -d iss53

 #Automatic merge failed
	If you change the same part of the same file differently in 2 branches you are merging together, git wont merge
	it in a clean way.

	So when you try to merge in this kind of situation -, your merge will fail.
	And git status will msg like below
	# Unmerged paths:
	#   (use "git add <file>..." to mark resolution)
	#
	#	both modified:      neworder.java

	
	And when you open the file, git would have included both the changes like
	<<<<<<< HEAD
	echo "changed by master = yesyesyesabsolutely right"
	=======
	echo "changed by devbranch yesyesyesabsolutely right"
	>>>>>>> devbranch
	You can edit this file and change <<<< HEAD,==== and >>>>>> devbranch and make your final change.

 #mergetool
	$ git mergetool
	# tool to resolve the merge-conflicts between files.

Branch Management
	$ git branch 		 # lists the branches in the repository
				 # * indicates your current branch
	$ git branch -v 	 # lists the branches with last commits info for each branch
	$ git branch --merged	 # gives the list of branches merged to the current branch
	$ git branch --no-merged # gives the list of branches not merged to the current branch
	  testing
	$ git branch -d testing	 # since the testing branch is not merged
				   trying to delete it will not allow to delete, since the branch is not merged to current branch.
	$ git branch -D testing  # will forcibly delete testing branch

Branching Workflows
	Since merging branches is an easy and efficient task in Git. You can maintain different branches for the complete
	software development cycle. You can regularly merge one branch with the other.
	Many Git developers have a workflow that embraces this approach.

 Long Running branches:

	c1	c2	c3	c4	c5	c6
	^		^			^
	master		^			^
			stable-1		^
						stable-2
	
	Your branches are various level of stability ( most > least in the above figure)
	You have a stablest branch which goes to prodcution at the loweset level.
	You do your development at branches stable-1 and stable-2. stable-1 is more stable than stable-2.
	so some feature is developed in stable-2 and it is tested well. It is merged to stable-1 where again it is tested. 
	If it is tested well there it is released to the main production master branch.
	This approach is important when you are dealing with very large projects. Developing software with this long branch 
	approach is good in dealing with big complex projects.

 Topic branches:

	c1	c2	 		c3
	^	^			^
	master	feature1 < master       feature2 < master

	Topic branch is feature1, you develop your feature do your tests and merge it to master.
	Later when a new feature requirement came, you branch out a new feature2 branch, develop and test it and on 
	success again merge it to master.

	This approach was not possible in earlier VCS, where branching for each change and merging was not an easy task as it is
	in Git.

  VVI
  Remote Branches: clone, fetch and push explained with good examples below
	They are the bookmarks to remind you where your remote branches were when you last communicated to them.
	So for say-
     
    #clone	
	$ git clone https://github.com/alok87/learn.git	
	Suppose you cloned a repo from github.com, then git automatically 
		> creates remote with name origin for you. to name your own remote use git clone -o hullala ...
		> pulls all its data and and creates a branch master and also names it origin/master locally.
	c1	c2	c3 < master		     || at github.com	
	c1	c2	c3 < origin/master && master || at my computer after clone
	
	c1	c2	c3	c6 < master	     || at github.com after new push from other user
	c1	c2	c3	c4  	c5	     || at my computer after new commits
			^		^
			origin/master	master
    #fetch	
	$ git fetch origin
	# This command finds out which server origin refers to, then goes to that server and gets the latest changes and 
	  updates your origin/master pointer to the latest changes. 
	  In short updates your origin/master with the latest github change.
	so,
	c1	c2	c3	c6 < origin/master   || at my computer, after git fetch origin
				c4	c5 < master    
	
        #Multiple remotes in this situation
	suppose you have one more remote https://github.com/alok87/spree.git
	c3	c7	c8 < master 		     || at github.com
	create a remote locally for it also
	$ git remote add origin2 https://github.com/alok87/spree.git
	$ git fetch origin2
		
	c1	c2	c3	c6 < origin/master   || at my computer, after git fetch origin && git fetch origin2
				c4	c5 < master    
				c7	c8 < origin2/master
	
	So think to observe here is, you do not have a working branch with origin/master or origin2/master.
	They are just pointers avaiable to use to create new branches/merge changes
	a. create new branch from that pointer
		$ git branch -b origin_master origin/master # this creates a branch from your remote pointer.
	b. merge changes from pointers to your branch
		$ git merge origin2/master # this merges the remote pointer to your current branch.
    #push
	Once in a while you have to push your topic branches to the github.com remote.
	You do it by using below command, so for say you are pushing your topicbranch to topicbranch in github.
	$ git push origin serverfix #push serverfix branch to remote origin url 
or, 	$ git push origin serverfix:serverfix
or,	$ rgit push origin serverfix:new_serverfix
	Both of the above commands means you are pushing all your local serverfix code to serverfix/new_serverfix in github.

	To not allow git to keep asking git password, use below command to cache your config for few mins.
	$ git config --global credential.helper cache # stores git config in cache for sometime, so that no pass to give

	Deleting Remote branches
	$ git push origin --delete serverfix # deletes the serverfix branch in the remote server origin is mapped to.
					     # it justs remove the pointer pointing to this data, garbage collecn permanently 
					     # removes it

Rebasing
	In git there are two ways to integrate changes b.w. branches: 
		a. merging
		b. rebasing

	#merging
	>       c1      c2      c3 < master
				c4 < expt

	>	c1	c2	c3 < master	
				c4 < expt
					c5 < master #after performing 3 way merge

	In merging, three way merge is done. latest snapshots of 2 branches c3 and c4 are merged in a 3way manner with common
	ancestor c2 to get the latest c5.

	#rebasing
				c4 < expt
	>	c1	c2	c3 < master

	>	c1	c2	c3	c4' 		
				^master	^expt

	>	c1	c2	c3	c4' < master
					^expt

	$ git checkout expt
	$ git rebase master
	$ git checkout master
	$ git merge experiment

	The state you reach in c4' is exactly same as c5. The only difference is how you reachled this state.
	The rebased state results in a very clean log history. It looks as if the development was done in a linear/series way though
	it was done parallely.

	How it happened?
	You checked out your project at experiment. Then on rebasing it with master did the following:
		> common ancesotr of master and expt was found out to be c2.
		> diff was done b.w. c2 and c4 and stored in a temp file.
		> change of rebasing into branch(master branch, c3 change) was applied to c2.
		> then the stored temp change was applied to make c4'
		> then you switched back to your main branch master.
		> then you did a fast forward merge to the latest change c4'.
	This way you have a very linear commit history c1 c2 c3 c4' instead of having history like below -
									      c4
									c1 c2 c3
										 c5			

	VVI 
	So a good development practice, workflow would be the one in which developers creates their own branches, does their 
	development and then rebase their changes into the main branch/remote branch. In that way:
		> history of the branch would always be linear.
		> and the maintainer of the master branch would only need to fast forward merge to the lastest change.
	So REBASE instead of 3-way merge.

	DRAWBACKS of REBASING
		Do not rebase commits that exist outside your repository
		you did not rebase your commits and pushed it to common repo. Someone later pulled that from common repo
		and started using it. Later you again pulled it and rebased the history and pushed it. Now when the other guy
		pushes to the common repo CONFLICTS and CONFUSION will happen over the history.


------------------------------------------------------------------------------ 4. Git Server

	Git server is a common place where everyone contribute changes and others pulls the latest code from here.
	Since there is no need to have the latest snapshot of the code be available in some working directory, you do not need
	a working dir. So git server merely can be seen as a .git folder.

	Git uses four protocols to transfer data:
	
	a. Local Protocol
	   Remote repository is on another directory or disk(common file-system mount/NFS mount).
	   Use case: Every member in the team is working on the same computer.
		     Every member in the team has the access to one common shared mount.
	   $ git clone /home/aks/shared/project1/learn.git            # clone a local remote git server || faster
or,	   $ git clone file:///home/aks/shared/project1/learn.git     # clone a local remote git server || cleaner
	   $ git remote add local_project1_learn /home/aks/shared/project1/learn.git # local remote add for a git server
	   Pros:
		 Easy to setup. Just put the repository(.git) in any shared location everyone has acecss to. And start pulling/pushing
		 code into it. There is no issue with it at all. Read/Write access can be provided just like any other read/write access you provide.
	   Cons:
		 Shared access is slow and hard to setup compared to network access.
		 Supopose you are at home, then you wont have access to that office shared repo and even if you do it would be slow.

	b. Http Protocol
	   smart http - user/pass authentication, super easy to use. very popular now a days.
	   dumb  http - web server authentication. 

	   pros - smart http has a simple user/pass authentication which makes it super good for the endusers. pass is only required 
		  few times. It is better when compared with SSH as no SSH key setups are required. Fast and efficient at the same time.
		  Encrpyted transfer of data supported using HTTPS. You can make it even more secure by making use of signed SSL certs.
		  Good for working under corporate firewall setups.

	   cons - sometimes provinding password once in a while can be a big head ache. but caching tools are available which will 
		  store your crendentials which you do not need to provide.

	c. SSH Protocol
	   use case - place where all servers are already connected with ssh. Even if it is not it is easy to setup ssh. And accessing over
		      ssh is a well authenticated method which can be used.

		$ git clone ssh://user@host/home/aks/shared/project1/learn.git # clone using ssh protocol.
		$ git clone user@host:/home/aks/shared/project1/learn.git      # scp like clone using ssh protcol.		
									       # if you do not specfiy a user above git assumes your current user.
		pros - of ssh are many. very easy to setup, sysadmins and IT people know about it. It is highly secure and ecrypted. 
		cons - everyone should have an ssh access established before using it. So annonymous access is not possible here. Not good for
		       open source projects. 
	 
	d. Git Protocol
	   use case - a project with huge traffic of read/pulls and pushes. It provides the fastet transfer of data compared to all the 
	   protocols as it does not have any authentication, encryption. So since it does not have any authentication anyone who has the 
           url of your project has the acces yo your repo.

	   pros - good for using it for read only access as it is super fast. Good for public projects with huge traffic.
	   cons - no authentication. no encrpytion. very hard to setup. Not good in firewall protected organization.
	
Git Server(ssh protocol) ------------------------------------------------------------
UseCase- Small Setups, For small organizations with few developers, we can setup like below.
     > Establish ssh between git server and the developer machines.
       #Login to the git server and make a project dir and intialize it as bare repository.	
	$ mkdir -p /home/git/projects/learn.git && git init --bare 
    > Your git server is ready. Now you can pull and push to this repository.
       #Login to the developer machine and push to the git repo.
	$ cdl && git remote add localgitrepo_learn git@centdev01:/home/git/projects/learn.git
	$ git push localgitrepo_learn master # This pushes your learn.git to your localgit repo at git@centdev01
    > You can disable ssh login to the git server by developers using git-shell like below.
	$ cat `which git-shell` >> /etc/shells # append the git-shell to the /etc/shells, only if not present there.
------
Smart Http git server has a simple CGI script which sees if the clinet is smart/dumb. 
If the clinet is having version of git > 1.6 it is smart and CGI interacts with it in a smart http way 
otherwise it falls back and interacts in a dumb http way.
	$ git httpd-backend














	
